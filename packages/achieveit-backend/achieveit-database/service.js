/* Filename: service.js */
const mongoose = require('mongoose');
const { TodoItem, TodoList, User } = require('./schemas');
// read the URL to connect to the database from ../server-locations.json
const serverLocations = require('./server-locations.json');
let serverUrl = serverLocations['database'];
mongoose.set('debug', true);

// check if argv contains --local
if (process.argv.includes('--local')) {
    // set to mongodb://localhost:27017/users for
    serverUrl = "mongodb://localhost:27017/users";
}
mongoose
    .connect(serverUrl, {
        useNewUrlParser: true,
        useUnifiedTopology: true,
    })
    .catch((error) => console.log(error));


// Find a user with the given username
function findUser(username) {
    let promise = User.find({ username: username });
    return promise;
}

// Create a new to-do list
async function createTodoList(username, listName) {
  // create a new list

  let promise = User.find({ username: username }).populate({
    path: 'todoLists',
    model: 'TodoList',
  }).then((result) => {
    return TodoList.create({ name: listName, items: [] })
      .then((createdList) => {
        return User.updateOne(
          { username: username },
          { $push: { todoLists: createdList._id } },
        );
      })
      .then((result) => {
        console.log("Successfully created list with name " + listName + " for user " + username);
        return result;
      })
  })
  .catch((error) => {
    console.error("An error ocurred: " + error);
    throw error;
  });

  return promise;
}

// Read all to-do lists, or read a single to-do list by name
async function getTodoList(username, name) {
  let promise;

  if (name) {
    promise = User.find({ username: username }).populate({
      path: 'todoLists',
      model: 'TodoList',
    }).then((result) => {
      let res = result[0].todoLists.filter((list) => { 
        if (list.name == name){
          return list;
        }
      });

      return res;
    });
  } else {
    promise = User.find({ username: username }).populate({
      path: 'todoLists',
      model: 'TodoList',
    }).then((result) => {
      const res = result[0].todoLists.map((list) => {
        return list.populate({
          path: 'items',
          model: 'TodoItem',
        })
        .then((l) => {
          return l;
        });
      });

      return Promise.all(res);
    });
  }

  return promise;
}

// Delete a to-do list by name
function deleteTodoList(username, listName) {

  return getTodoList(username, listName)
      .then((result) => {
        const listId = result[0]._id;
        User.find({ username: username }).populate({
          path: 'todoLists',
          model: 'TodoList',
        })
        .then((result) => {
          return User.updateOne(
            { username: username },
            { $pull: { todoLists: listId } },
          );
        })
        .then((result) => {
          console.log("Successfully removed list: " + listName);
          return result;
        })
      });
}

// Create a new to-do item for a specific to-do list
function createTodoItem(username, itemData) {
  return getTodoList(username, itemData.task_category)
    .then((result) => {
      const listId = result[0]._id;

      console.log('listId: ' + listId);
      console.log(itemData);

      const obj = {
        name: itemData.task,
        listId: listId,
        description: itemData.description,
        due_date: itemData.due_date,
        priority: itemData.priority,
        completed: itemData.completed,
      };

      return TodoItem.create(obj)
        .then((createdItem) => {
          return TodoList.updateOne(
            { _id: listId },
            { $push: { items: createdItem._id } },
          );
        })
        .then(() => {
          console.log('TodoItem created and linked to TodoList successfully.');
        });
    })
    .catch((error) => {
      console.error('An error occurred:', error);
      throw error; // Propagate the error if needed
    });
}

// Delete a to-do item by name
function deleteTodoItem(username, listName, itemName) {
  
  return getTodoList(username, listName)
    .then((result) => {
      const listId = result[0]._id;
      console.log('listId: ' + listId);

      // Return the promise generated by TodoItem.deleteOne directly
      return TodoItem.deleteOne({ name: itemName, listId: listId });
    })
    .catch((error) => {
      console.error('An error occurred:', error);
      // Handle or propagate the error as needed
      throw error;
    });
}

// Update a to-do item's completed status
function toggleCheck(username, listName, taskName, status) {
  return getTodoList(username, listName)
    .then((list) => {
      const listId = list[0]._id;
      console.log('listId: ' + listId);

      // Update the task's completed status
      return TodoItem.updateOne(
        { name: taskName },
        { $set: { completed: status } },
      );
    })
    .catch((error) => {
      console.error('An error occurred:', error);
      throw error; // You can handle or propagate the error as needed
    });
}

module.exports = {
  findUser,
  createTodoList,
  getTodoList,
  deleteTodoList,
  createTodoItem,
  deleteTodoItem,
  toggleCheck,
};
