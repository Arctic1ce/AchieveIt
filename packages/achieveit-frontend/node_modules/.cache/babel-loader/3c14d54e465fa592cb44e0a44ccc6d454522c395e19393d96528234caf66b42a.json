{"ast":null,"code":"// src/use-spinner.ts\nimport { mapPropsVariants } from \"@nextui-org/system-rsc\";\nimport { spinner } from \"@nextui-org/theme\";\nimport { clsx } from \"@nextui-org/shared-utils\";\nimport { useMemo, useCallback } from \"react\";\nfunction useSpinner(originalProps) {\n  const [props, variantProps] = mapPropsVariants(originalProps, spinner.variantKeys);\n  const {\n    children,\n    className,\n    classNames,\n    label: labelProp,\n    ...otherProps\n  } = props;\n  const slots = useMemo(() => spinner({\n    ...variantProps\n  }), [...Object.values(variantProps)]);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const label = labelProp || children;\n  const ariaLabel = useMemo(() => {\n    if (label && typeof label === \"string\") {\n      return label;\n    }\n    return !otherProps[\"aria-label\"] ? \"Loading\" : \"\";\n  }, [children, label, otherProps[\"aria-label\"]]);\n  const getSpinnerProps = useCallback(() => ({\n    \"aria-label\": ariaLabel,\n    className: slots.base({\n      class: baseStyles\n    }),\n    ...otherProps\n  }), [ariaLabel, slots, baseStyles, otherProps]);\n  return {\n    label,\n    slots,\n    classNames,\n    getSpinnerProps\n  };\n}\nexport { useSpinner };","map":{"version":3,"names":["mapPropsVariants","spinner","clsx","useMemo","useCallback","useSpinner","originalProps","props","variantProps","variantKeys","children","className","classNames","label","labelProp","otherProps","slots","Object","values","baseStyles","base","ariaLabel","getSpinnerProps","class"],"sources":["C:/Users/joelp/csc-307-achieveit/AchieveIt/node_modules/@nextui-org/spinner/dist/chunk-EQVUDELC.mjs"],"sourcesContent":["// src/use-spinner.ts\nimport { mapPropsVariants } from \"@nextui-org/system-rsc\";\nimport { spinner } from \"@nextui-org/theme\";\nimport { clsx } from \"@nextui-org/shared-utils\";\nimport { useMemo, useCallback } from \"react\";\nfunction useSpinner(originalProps) {\n  const [props, variantProps] = mapPropsVariants(originalProps, spinner.variantKeys);\n  const { children, className, classNames, label: labelProp, ...otherProps } = props;\n  const slots = useMemo(() => spinner({ ...variantProps }), [...Object.values(variantProps)]);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const label = labelProp || children;\n  const ariaLabel = useMemo(() => {\n    if (label && typeof label === \"string\") {\n      return label;\n    }\n    return !otherProps[\"aria-label\"] ? \"Loading\" : \"\";\n  }, [children, label, otherProps[\"aria-label\"]]);\n  const getSpinnerProps = useCallback(\n    () => ({\n      \"aria-label\": ariaLabel,\n      className: slots.base({\n        class: baseStyles\n      }),\n      ...otherProps\n    }),\n    [ariaLabel, slots, baseStyles, otherProps]\n  );\n  return { label, slots, classNames, getSpinnerProps };\n}\n\nexport {\n  useSpinner\n};\n"],"mappings":"AAAA;AACA,SAASA,gBAAgB,QAAQ,wBAAwB;AACzD,SAASC,OAAO,QAAQ,mBAAmB;AAC3C,SAASC,IAAI,QAAQ,0BAA0B;AAC/C,SAASC,OAAO,EAAEC,WAAW,QAAQ,OAAO;AAC5C,SAASC,UAAUA,CAACC,aAAa,EAAE;EACjC,MAAM,CAACC,KAAK,EAAEC,YAAY,CAAC,GAAGR,gBAAgB,CAACM,aAAa,EAAEL,OAAO,CAACQ,WAAW,CAAC;EAClF,MAAM;IAAEC,QAAQ;IAAEC,SAAS;IAAEC,UAAU;IAAEC,KAAK,EAAEC,SAAS;IAAE,GAAGC;EAAW,CAAC,GAAGR,KAAK;EAClF,MAAMS,KAAK,GAAGb,OAAO,CAAC,MAAMF,OAAO,CAAC;IAAE,GAAGO;EAAa,CAAC,CAAC,EAAE,CAAC,GAAGS,MAAM,CAACC,MAAM,CAACV,YAAY,CAAC,CAAC,CAAC;EAC3F,MAAMW,UAAU,GAAGjB,IAAI,CAACU,UAAU,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACQ,IAAI,EAAET,SAAS,CAAC;EACjF,MAAME,KAAK,GAAGC,SAAS,IAAIJ,QAAQ;EACnC,MAAMW,SAAS,GAAGlB,OAAO,CAAC,MAAM;IAC9B,IAAIU,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MACtC,OAAOA,KAAK;IACd;IACA,OAAO,CAACE,UAAU,CAAC,YAAY,CAAC,GAAG,SAAS,GAAG,EAAE;EACnD,CAAC,EAAE,CAACL,QAAQ,EAAEG,KAAK,EAAEE,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC;EAC/C,MAAMO,eAAe,GAAGlB,WAAW,CACjC,OAAO;IACL,YAAY,EAAEiB,SAAS;IACvBV,SAAS,EAAEK,KAAK,CAACI,IAAI,CAAC;MACpBG,KAAK,EAAEJ;IACT,CAAC,CAAC;IACF,GAAGJ;EACL,CAAC,CAAC,EACF,CAACM,SAAS,EAAEL,KAAK,EAAEG,UAAU,EAAEJ,UAAU,CAC3C,CAAC;EACD,OAAO;IAAEF,KAAK;IAAEG,KAAK;IAAEJ,UAAU;IAAEU;EAAgB,CAAC;AACtD;AAEA,SACEjB,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}