{"ast":null,"code":"// src/use-multiselect.ts\nimport { useCollator } from \"@react-aria/i18n\";\nimport { setInteractionModality } from \"@react-aria/interactions\";\nimport { useField } from \"@react-aria/label\";\nimport { useMenuTrigger } from \"@react-aria/menu\";\nimport { ListKeyboardDelegate, useTypeSelect } from \"@react-aria/selection\";\nimport { chain, filterDOMProps, mergeProps, useId } from \"@react-aria/utils\";\nimport { useMemo } from \"react\";\nfunction useMultiSelect(props, state, ref) {\n  const {\n    disallowEmptySelection,\n    isDisabled\n  } = props;\n  const collator = useCollator({\n    usage: \"search\",\n    sensitivity: \"base\"\n  });\n  const delegate = useMemo(() => new ListKeyboardDelegate(state.collection, state.disabledKeys, null, collator), [state.collection, state.disabledKeys, collator]);\n  const {\n    menuTriggerProps,\n    menuProps\n  } = useMenuTrigger({\n    isDisabled,\n    type: \"listbox\"\n  }, state, ref);\n  const triggerOnKeyDown = e => {\n    if (state.selectionMode === \"single\") {\n      switch (e.key) {\n        case \"ArrowLeft\":\n          {\n            e.preventDefault();\n            const key = state.selectedKeys.size > 0 ? delegate.getKeyAbove(state.selectedKeys.values().next().value) : delegate.getFirstKey();\n            if (key) {\n              state.setSelectedKeys([key]);\n            }\n            break;\n          }\n        case \"ArrowRight\":\n          {\n            e.preventDefault();\n            const key = state.selectedKeys.size > 0 ? delegate.getKeyBelow(state.selectedKeys.values().next().value) : delegate.getFirstKey();\n            if (key) {\n              state.setSelectedKeys([key]);\n            }\n            break;\n          }\n      }\n    }\n  };\n  const {\n    typeSelectProps\n  } = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: state.selectionManager,\n    onTypeSelect(key) {\n      state.setSelectedKeys([key]);\n    }\n  });\n  const {\n    labelProps,\n    fieldProps,\n    descriptionProps,\n    errorMessageProps\n  } = useField({\n    ...props,\n    labelElementType: \"span\"\n  });\n  typeSelectProps.onKeyDown = typeSelectProps.onKeyDownCapture;\n  delete typeSelectProps.onKeyDownCapture;\n  const domProps = filterDOMProps(props, {\n    labelable: true\n  });\n  const triggerProps = mergeProps(typeSelectProps, menuTriggerProps, fieldProps);\n  const valueId = useId();\n  return {\n    labelProps: {\n      ...labelProps,\n      onClick: () => {\n        var _a;\n        if (!props.isDisabled) {\n          (_a = ref.current) == null ? void 0 : _a.focus();\n          setInteractionModality(\"keyboard\");\n        }\n      }\n    },\n    triggerProps: mergeProps(domProps, {\n      ...triggerProps,\n      onKeyDown: chain(triggerProps.onKeyDown, triggerOnKeyDown, props.onKeyDown),\n      onKeyUp: props.onKeyUp,\n      \"aria-labelledby\": [valueId, domProps[\"aria-label\"] !== void 0 ? domProps[\"aria-labelledby\"] !== void 0 ? domProps[\"aria-labelledby\"] : triggerProps.id : triggerProps[\"aria-labelledby\"]].join(\" \"),\n      onFocus(e) {\n        if (state.isFocused) {\n          return;\n        }\n        if (props.onFocus) {\n          props.onFocus(e);\n        }\n        state.setFocused(true);\n      },\n      onBlur(e) {\n        if (state.isOpen) {\n          return;\n        }\n        if (props.onBlur) {\n          props.onBlur(e);\n        }\n        state.setFocused(false);\n      }\n    }),\n    valueProps: {\n      id: valueId\n    },\n    menuProps: {\n      ...menuProps,\n      disallowEmptySelection,\n      autoFocus: state.focusStrategy || true,\n      shouldSelectOnPressUp: true,\n      shouldFocusOnHover: true,\n      onBlur: e => {\n        if (e.currentTarget.contains(e.relatedTarget)) {\n          return;\n        }\n        if (props.onBlur) {\n          props.onBlur(e);\n        }\n        state.setFocused(false);\n      },\n      onFocus: menuProps == null ? void 0 : menuProps.onFocus,\n      \"aria-labelledby\": [fieldProps[\"aria-labelledby\"], triggerProps[\"aria-label\"] && !fieldProps[\"aria-labelledby\"] ? triggerProps.id : null].filter(Boolean).join(\" \")\n    },\n    descriptionProps,\n    errorMessageProps\n  };\n}\nexport { useMultiSelect };","map":{"version":3,"names":["useCollator","setInteractionModality","useField","useMenuTrigger","ListKeyboardDelegate","useTypeSelect","chain","filterDOMProps","mergeProps","useId","useMemo","useMultiSelect","props","state","ref","disallowEmptySelection","isDisabled","collator","usage","sensitivity","delegate","collection","disabledKeys","menuTriggerProps","menuProps","type","triggerOnKeyDown","e","selectionMode","key","preventDefault","selectedKeys","size","getKeyAbove","values","next","value","getFirstKey","setSelectedKeys","getKeyBelow","typeSelectProps","keyboardDelegate","selectionManager","onTypeSelect","labelProps","fieldProps","descriptionProps","errorMessageProps","labelElementType","onKeyDown","onKeyDownCapture","domProps","labelable","triggerProps","valueId","onClick","_a","current","focus","onKeyUp","id","join","onFocus","isFocused","setFocused","onBlur","isOpen","valueProps","autoFocus","focusStrategy","shouldSelectOnPressUp","shouldFocusOnHover","currentTarget","contains","relatedTarget","filter","Boolean"],"sources":["C:/Users/joelp/csc-307-achieveit/AchieveIt/node_modules/@nextui-org/use-aria-multiselect/dist/chunk-3L3RM3MK.mjs"],"sourcesContent":["// src/use-multiselect.ts\nimport { useCollator } from \"@react-aria/i18n\";\nimport { setInteractionModality } from \"@react-aria/interactions\";\nimport { useField } from \"@react-aria/label\";\nimport { useMenuTrigger } from \"@react-aria/menu\";\nimport { ListKeyboardDelegate, useTypeSelect } from \"@react-aria/selection\";\nimport { chain, filterDOMProps, mergeProps, useId } from \"@react-aria/utils\";\nimport { useMemo } from \"react\";\nfunction useMultiSelect(props, state, ref) {\n  const { disallowEmptySelection, isDisabled } = props;\n  const collator = useCollator({ usage: \"search\", sensitivity: \"base\" });\n  const delegate = useMemo(\n    () => new ListKeyboardDelegate(state.collection, state.disabledKeys, null, collator),\n    [state.collection, state.disabledKeys, collator]\n  );\n  const { menuTriggerProps, menuProps } = useMenuTrigger(\n    {\n      isDisabled,\n      type: \"listbox\"\n    },\n    state,\n    ref\n  );\n  const triggerOnKeyDown = (e) => {\n    if (state.selectionMode === \"single\") {\n      switch (e.key) {\n        case \"ArrowLeft\": {\n          e.preventDefault();\n          const key = state.selectedKeys.size > 0 ? delegate.getKeyAbove(state.selectedKeys.values().next().value) : delegate.getFirstKey();\n          if (key) {\n            state.setSelectedKeys([key]);\n          }\n          break;\n        }\n        case \"ArrowRight\": {\n          e.preventDefault();\n          const key = state.selectedKeys.size > 0 ? delegate.getKeyBelow(state.selectedKeys.values().next().value) : delegate.getFirstKey();\n          if (key) {\n            state.setSelectedKeys([key]);\n          }\n          break;\n        }\n      }\n    }\n  };\n  const { typeSelectProps } = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: state.selectionManager,\n    onTypeSelect(key) {\n      state.setSelectedKeys([key]);\n    }\n  });\n  const { labelProps, fieldProps, descriptionProps, errorMessageProps } = useField({\n    ...props,\n    labelElementType: \"span\"\n  });\n  typeSelectProps.onKeyDown = typeSelectProps.onKeyDownCapture;\n  delete typeSelectProps.onKeyDownCapture;\n  const domProps = filterDOMProps(props, { labelable: true });\n  const triggerProps = mergeProps(typeSelectProps, menuTriggerProps, fieldProps);\n  const valueId = useId();\n  return {\n    labelProps: {\n      ...labelProps,\n      onClick: () => {\n        var _a;\n        if (!props.isDisabled) {\n          (_a = ref.current) == null ? void 0 : _a.focus();\n          setInteractionModality(\"keyboard\");\n        }\n      }\n    },\n    triggerProps: mergeProps(domProps, {\n      ...triggerProps,\n      onKeyDown: chain(triggerProps.onKeyDown, triggerOnKeyDown, props.onKeyDown),\n      onKeyUp: props.onKeyUp,\n      \"aria-labelledby\": [\n        valueId,\n        domProps[\"aria-label\"] !== void 0 ? domProps[\"aria-labelledby\"] !== void 0 ? domProps[\"aria-labelledby\"] : triggerProps.id : triggerProps[\"aria-labelledby\"]\n      ].join(\" \"),\n      onFocus(e) {\n        if (state.isFocused) {\n          return;\n        }\n        if (props.onFocus) {\n          props.onFocus(e);\n        }\n        state.setFocused(true);\n      },\n      onBlur(e) {\n        if (state.isOpen) {\n          return;\n        }\n        if (props.onBlur) {\n          props.onBlur(e);\n        }\n        state.setFocused(false);\n      }\n    }),\n    valueProps: {\n      id: valueId\n    },\n    menuProps: {\n      ...menuProps,\n      disallowEmptySelection,\n      autoFocus: state.focusStrategy || true,\n      shouldSelectOnPressUp: true,\n      shouldFocusOnHover: true,\n      onBlur: (e) => {\n        if (e.currentTarget.contains(e.relatedTarget)) {\n          return;\n        }\n        if (props.onBlur) {\n          props.onBlur(e);\n        }\n        state.setFocused(false);\n      },\n      onFocus: menuProps == null ? void 0 : menuProps.onFocus,\n      \"aria-labelledby\": [\n        fieldProps[\"aria-labelledby\"],\n        triggerProps[\"aria-label\"] && !fieldProps[\"aria-labelledby\"] ? triggerProps.id : null\n      ].filter(Boolean).join(\" \")\n    },\n    descriptionProps,\n    errorMessageProps\n  };\n}\n\nexport {\n  useMultiSelect\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}