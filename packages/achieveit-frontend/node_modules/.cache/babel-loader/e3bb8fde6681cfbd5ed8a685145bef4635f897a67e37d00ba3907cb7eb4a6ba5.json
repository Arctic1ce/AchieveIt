{"ast":null,"code":"import { createContext as $jcIOw$createContext, useMemo as $jcIOw$useMemo, useContext as $jcIOw$useContext, useState as $jcIOw$useState, useRef as $jcIOw$useRef, useEffect as $jcIOw$useEffect } from \"react\";\n\n/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2023 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\nconst $e5be200c675c3b3a$export$aca958c65c314e6c = {\n  badInput: false,\n  customError: false,\n  patternMismatch: false,\n  rangeOverflow: false,\n  rangeUnderflow: false,\n  stepMismatch: false,\n  tooLong: false,\n  tooShort: false,\n  typeMismatch: false,\n  valueMissing: false,\n  valid: true\n};\nconst $e5be200c675c3b3a$var$CUSTOM_VALIDITY_STATE = {\n  ...$e5be200c675c3b3a$export$aca958c65c314e6c,\n  customError: true,\n  valid: false\n};\nconst $e5be200c675c3b3a$export$dad6ae84456c676a = {\n  isInvalid: false,\n  validationDetails: $e5be200c675c3b3a$export$aca958c65c314e6c,\n  validationErrors: []\n};\nconst $e5be200c675c3b3a$export$571b5131b7e65c11 = (0, $jcIOw$createContext)({});\nconst $e5be200c675c3b3a$export$a763b9476acd3eb = \"__formValidationState\" + Date.now();\nfunction $e5be200c675c3b3a$export$fc1a364ae1f3ff10(props) {\n  // Private prop for parent components to pass state to children.\n  if (props[$e5be200c675c3b3a$export$a763b9476acd3eb]) {\n    let {\n      realtimeValidation: realtimeValidation,\n      displayValidation: displayValidation,\n      updateValidation: updateValidation,\n      resetValidation: resetValidation,\n      commitValidation: commitValidation\n    } = props[$e5be200c675c3b3a$export$a763b9476acd3eb];\n    return {\n      realtimeValidation: realtimeValidation,\n      displayValidation: displayValidation,\n      updateValidation: updateValidation,\n      resetValidation: resetValidation,\n      commitValidation: commitValidation\n    };\n  }\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return $e5be200c675c3b3a$var$useFormValidationStateImpl(props);\n}\nfunction $e5be200c675c3b3a$var$useFormValidationStateImpl(props) {\n  let {\n    isInvalid: isInvalid,\n    validationState: validationState,\n    name: name,\n    value: value,\n    builtinValidation: builtinValidation,\n    validate: validate,\n    validationBehavior = \"aria\"\n  } = props;\n  // backward compatibility.\n  if (validationState) isInvalid || (isInvalid = validationState === \"invalid\");\n  // If the isInvalid prop is true, update validation result in realtime (controlled).\n  let controlledError = isInvalid ? {\n    isInvalid: true,\n    validationErrors: [],\n    validationDetails: $e5be200c675c3b3a$var$CUSTOM_VALIDITY_STATE\n  } : null;\n  // Perform custom client side validation.\n  let clientError = (0, $jcIOw$useMemo)(() => $e5be200c675c3b3a$var$getValidationResult($e5be200c675c3b3a$var$runValidate(validate, value)), [validate, value]);\n  if (builtinValidation === null || builtinValidation === void 0 ? void 0 : builtinValidation.validationDetails.valid) builtinValidation = null;\n  // Get relevant server errors from the form.\n  let serverErrors = (0, $jcIOw$useContext)($e5be200c675c3b3a$export$571b5131b7e65c11);\n  let serverErrorMessages = (0, $jcIOw$useMemo)(() => {\n    if (name) return Array.isArray(name) ? name.flatMap(name => $e5be200c675c3b3a$var$asArray(serverErrors[name])) : $e5be200c675c3b3a$var$asArray(serverErrors[name]);\n    return [];\n  }, [serverErrors, name]);\n  // Show server errors when the form gets a new value, and clear when the user changes the value.\n  let [lastServerErrors, setLastServerErrors] = (0, $jcIOw$useState)(serverErrors);\n  let [isServerErrorCleared, setServerErrorCleared] = (0, $jcIOw$useState)(false);\n  if (serverErrors !== lastServerErrors) {\n    setLastServerErrors(serverErrors);\n    setServerErrorCleared(false);\n  }\n  let serverError = (0, $jcIOw$useMemo)(() => $e5be200c675c3b3a$var$getValidationResult(isServerErrorCleared ? [] : serverErrorMessages), [isServerErrorCleared, serverErrorMessages]);\n  // Track the next validation state in a ref until commitValidation is called.\n  let nextValidation = (0, $jcIOw$useRef)($e5be200c675c3b3a$export$dad6ae84456c676a);\n  let [currentValidity, setCurrentValidity] = (0, $jcIOw$useState)($e5be200c675c3b3a$export$dad6ae84456c676a);\n  let lastError = (0, $jcIOw$useRef)($e5be200c675c3b3a$export$dad6ae84456c676a);\n  let commitValidation = () => {\n    if (!commitQueued) return;\n    setCommitQueued(false);\n    let error = clientError || builtinValidation || nextValidation.current;\n    if (!$e5be200c675c3b3a$var$isEqualValidation(error, lastError.current)) {\n      lastError.current = error;\n      setCurrentValidity(error);\n    }\n  };\n  let [commitQueued, setCommitQueued] = (0, $jcIOw$useState)(false);\n  (0, $jcIOw$useEffect)(commitValidation);\n  // realtimeValidation is used to update the native input element's state based on custom validation logic.\n  // displayValidation is the currently displayed validation state that the user sees (e.g. on input change/form submit).\n  // With validationBehavior=\"aria\", all errors are displayed in realtime rather than on submit.\n  let realtimeValidation = controlledError || serverError || clientError || builtinValidation || $e5be200c675c3b3a$export$dad6ae84456c676a;\n  let displayValidation = validationBehavior === \"native\" ? controlledError || serverError || currentValidity : controlledError || serverError || clientError || builtinValidation || currentValidity;\n  return {\n    realtimeValidation: realtimeValidation,\n    displayValidation: displayValidation,\n    updateValidation(value) {\n      // If validationBehavior is 'aria', update in realtime. Otherwise, store in a ref until commit.\n      if (validationBehavior === \"aria\" && !$e5be200c675c3b3a$var$isEqualValidation(currentValidity, value)) setCurrentValidity(value);else nextValidation.current = value;\n    },\n    resetValidation() {\n      // Update the currently displayed validation state to valid on form reset,\n      // even if the native validity says it isn't. It'll show again on the next form submit.\n      let error = $e5be200c675c3b3a$export$dad6ae84456c676a;\n      if (!$e5be200c675c3b3a$var$isEqualValidation(error, lastError.current)) {\n        lastError.current = error;\n        setCurrentValidity(error);\n      }\n      // Do not commit validation after the next render. This avoids a condition where\n      // useSelect calls commitValidation inside an onReset handler.\n      if (validationBehavior === \"native\") setCommitQueued(false);\n      setServerErrorCleared(true);\n    },\n    commitValidation() {\n      // Commit validation state so the user sees it on blur/change/submit. Also clear any server errors.\n      // Wait until after the next render to commit so that the latest value has been validated.\n      if (validationBehavior === \"native\") setCommitQueued(true);\n      setServerErrorCleared(true);\n    }\n  };\n}\nfunction $e5be200c675c3b3a$var$asArray(v) {\n  if (!v) return [];\n  return Array.isArray(v) ? v : [v];\n}\nfunction $e5be200c675c3b3a$var$runValidate(validate, value) {\n  if (typeof validate === \"function\") {\n    let e = validate(value);\n    if (e && typeof e !== \"boolean\") return $e5be200c675c3b3a$var$asArray(e);\n  }\n  return [];\n}\nfunction $e5be200c675c3b3a$var$getValidationResult(errors) {\n  return errors.length ? {\n    isInvalid: true,\n    validationErrors: errors,\n    validationDetails: $e5be200c675c3b3a$var$CUSTOM_VALIDITY_STATE\n  } : null;\n}\nfunction $e5be200c675c3b3a$var$isEqualValidation(a, b) {\n  if (a === b) return true;\n  return a && b && a.isInvalid === b.isInvalid && a.validationErrors.length === b.validationErrors.length && a.validationErrors.every((a, i) => a === b.validationErrors[i]) && Object.entries(a.validationDetails).every(([k, v]) => b.validationDetails[k] === v);\n}\nfunction $e5be200c675c3b3a$export$75ee7c75d68f5b0e(...results) {\n  let errors = new Set();\n  let isInvalid = false;\n  let validationDetails = {\n    ...$e5be200c675c3b3a$export$aca958c65c314e6c\n  };\n  for (let v of results) {\n    var _validationDetails, _key;\n    for (let e of v.validationErrors) errors.add(e);\n    // Only these properties apply for checkboxes.\n    isInvalid || (isInvalid = v.isInvalid);\n    for (let key in validationDetails) (_validationDetails = validationDetails)[_key = key] || (_validationDetails[_key] = v.validationDetails[key]);\n  }\n  validationDetails.valid = !isInvalid;\n  return {\n    isInvalid: isInvalid,\n    validationErrors: [...errors],\n    validationDetails: validationDetails\n  };\n}\nexport { $e5be200c675c3b3a$export$571b5131b7e65c11 as FormValidationContext, $e5be200c675c3b3a$export$fc1a364ae1f3ff10 as useFormValidationState, $e5be200c675c3b3a$export$dad6ae84456c676a as DEFAULT_VALIDATION_RESULT, $e5be200c675c3b3a$export$aca958c65c314e6c as VALID_VALIDITY_STATE, $e5be200c675c3b3a$export$a763b9476acd3eb as privateValidationStateProp, $e5be200c675c3b3a$export$75ee7c75d68f5b0e as mergeValidation };","map":{"version":3,"names":["$e5be200c675c3b3a$export$aca958c65c314e6c","badInput","customError","patternMismatch","rangeOverflow","rangeUnderflow","stepMismatch","tooLong","tooShort","typeMismatch","valueMissing","valid","$e5be200c675c3b3a$var$CUSTOM_VALIDITY_STATE","$e5be200c675c3b3a$export$dad6ae84456c676a","isInvalid","validationDetails","validationErrors","$e5be200c675c3b3a$export$571b5131b7e65c11","$jcIOw$createContext","$e5be200c675c3b3a$export$a763b9476acd3eb","Date","now","$e5be200c675c3b3a$export$fc1a364ae1f3ff10","props","realtimeValidation","displayValidation","updateValidation","resetValidation","commitValidation","$e5be200c675c3b3a$var$useFormValidationStateImpl","validationState","name","value","builtinValidation","validate","validationBehavior","controlledError","clientError","$jcIOw$useMemo","$e5be200c675c3b3a$var$getValidationResult","$e5be200c675c3b3a$var$runValidate","serverErrors","$jcIOw$useContext","serverErrorMessages","Array","isArray","flatMap","$e5be200c675c3b3a$var$asArray","lastServerErrors","setLastServerErrors","$jcIOw$useState","isServerErrorCleared","setServerErrorCleared","serverError","nextValidation","$jcIOw$useRef","currentValidity","setCurrentValidity","lastError","commitQueued","setCommitQueued","error","current","$e5be200c675c3b3a$var$isEqualValidation","$jcIOw$useEffect","v","e","errors","length","a","b","every","i","Object","entries","k","$e5be200c675c3b3a$export$75ee7c75d68f5b0e","results","Set","_validationDetails","_key","add","key"],"sources":["C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@react-stately\\form\\dist\\packages\\@react-stately\\form\\src\\index.ts","C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@react-stately\\form\\dist\\packages\\@react-stately\\form\\src\\useFormValidationState.ts"],"sourcesContent":["/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {FormValidationContext, useFormValidationState, DEFAULT_VALIDATION_RESULT, VALID_VALIDITY_STATE, privateValidationStateProp, mergeValidation} from './useFormValidationState';\nexport type {FormValidationState} from './useFormValidationState';\n","/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {createContext, useContext, useEffect, useMemo, useRef, useState} from 'react';\nimport {Validation, ValidationErrors, ValidationFunction, ValidationResult} from '@react-types/shared';\n\nexport const VALID_VALIDITY_STATE: ValidityState = {\n  badInput: false,\n  customError: false,\n  patternMismatch: false,\n  rangeOverflow: false,\n  rangeUnderflow: false,\n  stepMismatch: false,\n  tooLong: false,\n  tooShort: false,\n  typeMismatch: false,\n  valueMissing: false,\n  valid: true\n};\n\nconst CUSTOM_VALIDITY_STATE: ValidityState = {\n  ...VALID_VALIDITY_STATE,\n  customError: true,\n  valid: false\n};\n\nexport const DEFAULT_VALIDATION_RESULT: ValidationResult = {\n  isInvalid: false,\n  validationDetails: VALID_VALIDITY_STATE,\n  validationErrors: []\n};\n\nexport const FormValidationContext = createContext<ValidationErrors>({});\n\nexport const privateValidationStateProp = '__formValidationState' + Date.now();\n\ninterface FormValidationProps<T> extends Validation<T> {\n  builtinValidation?: ValidationResult,\n  name?: string | string[],\n  value: T\n}\n\nexport interface FormValidationState {\n  /** Realtime validation results, updated as the user edits the value. */\n  realtimeValidation: ValidationResult,\n  /** Currently displayed validation results, updated when the user commits their changes. */\n  displayValidation: ValidationResult,\n  /** Updates the current validation result. Not displayed to the user until `commitValidation` is called. */\n  updateValidation(result: ValidationResult): void,\n  /** Resets the displayed validation state to valid when the user resets the form. */\n  resetValidation(): void,\n  /** Commits the realtime validation so it is displayed to the user. */\n  commitValidation(): void\n}\n\nexport function useFormValidationState<T>(props: FormValidationProps<T>): FormValidationState {\n  // Private prop for parent components to pass state to children.\n  if (props[privateValidationStateProp]) {\n    let {realtimeValidation, displayValidation, updateValidation, resetValidation, commitValidation} = props[privateValidationStateProp] as FormValidationState;\n    return {realtimeValidation, displayValidation, updateValidation, resetValidation, commitValidation};\n  }\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return useFormValidationStateImpl(props);\n}\n\nfunction useFormValidationStateImpl<T>(props: FormValidationProps<T>): FormValidationState {\n  let {isInvalid, validationState, name, value, builtinValidation, validate, validationBehavior = 'aria'} = props;\n\n  // backward compatibility.\n  if (validationState) {\n    isInvalid ||= validationState === 'invalid';\n  }\n\n  // If the isInvalid prop is true, update validation result in realtime (controlled).\n  let controlledError: ValidationResult | null = isInvalid ? {\n    isInvalid: true,\n    validationErrors: [],\n    validationDetails: CUSTOM_VALIDITY_STATE\n  } : null;\n\n  // Perform custom client side validation.\n  let clientError: ValidationResult | null = useMemo(() => getValidationResult(runValidate(validate, value)), [validate, value]);\n\n  if (builtinValidation?.validationDetails.valid) {\n    builtinValidation = null;\n  }\n\n  // Get relevant server errors from the form.\n  let serverErrors = useContext(FormValidationContext);\n  let serverErrorMessages = useMemo(() => {\n    if (name) {\n      return Array.isArray(name) ? name.flatMap(name => asArray(serverErrors[name])) : asArray(serverErrors[name]);\n    }\n    return [];\n  }, [serverErrors, name]);\n\n  // Show server errors when the form gets a new value, and clear when the user changes the value.\n  let [lastServerErrors, setLastServerErrors] = useState(serverErrors);\n  let [isServerErrorCleared, setServerErrorCleared] = useState(false);\n  if (serverErrors !== lastServerErrors) {\n    setLastServerErrors(serverErrors);\n    setServerErrorCleared(false);\n  }\n\n  let serverError: ValidationResult | null = useMemo(() =>\n    getValidationResult(isServerErrorCleared ? [] : serverErrorMessages),\n    [isServerErrorCleared, serverErrorMessages]\n  );\n\n  // Track the next validation state in a ref until commitValidation is called.\n  let nextValidation = useRef(DEFAULT_VALIDATION_RESULT);\n  let [currentValidity, setCurrentValidity] = useState(DEFAULT_VALIDATION_RESULT);\n\n  let lastError = useRef(DEFAULT_VALIDATION_RESULT);\n  let commitValidation = () => {\n    if (!commitQueued) {\n      return;\n    }\n\n    setCommitQueued(false);\n    let error = clientError || builtinValidation || nextValidation.current;\n    if (!isEqualValidation(error, lastError.current)) {\n      lastError.current = error;\n      setCurrentValidity(error);\n    }\n  };\n\n  let [commitQueued, setCommitQueued] = useState(false);\n  useEffect(commitValidation);\n\n  // realtimeValidation is used to update the native input element's state based on custom validation logic.\n  // displayValidation is the currently displayed validation state that the user sees (e.g. on input change/form submit).\n  // With validationBehavior=\"aria\", all errors are displayed in realtime rather than on submit.\n  let realtimeValidation = controlledError || serverError || clientError || builtinValidation || DEFAULT_VALIDATION_RESULT;\n  let displayValidation = validationBehavior === 'native'\n    ? controlledError || serverError || currentValidity\n    : controlledError || serverError || clientError || builtinValidation || currentValidity;\n\n  return {\n    realtimeValidation,\n    displayValidation,\n    updateValidation(value) {\n      // If validationBehavior is 'aria', update in realtime. Otherwise, store in a ref until commit.\n      if (validationBehavior === 'aria' && !isEqualValidation(currentValidity, value)) {\n        setCurrentValidity(value);\n      } else {\n        nextValidation.current = value;\n      }\n    },\n    resetValidation() {\n      // Update the currently displayed validation state to valid on form reset,\n      // even if the native validity says it isn't. It'll show again on the next form submit.\n      let error = DEFAULT_VALIDATION_RESULT;\n      if (!isEqualValidation(error, lastError.current)) {\n        lastError.current = error;\n        setCurrentValidity(error);\n      }\n\n      // Do not commit validation after the next render. This avoids a condition where\n      // useSelect calls commitValidation inside an onReset handler.\n      if (validationBehavior === 'native') {\n        setCommitQueued(false);\n      }\n\n      setServerErrorCleared(true);\n    },\n    commitValidation() {\n      // Commit validation state so the user sees it on blur/change/submit. Also clear any server errors.\n      // Wait until after the next render to commit so that the latest value has been validated.\n      if (validationBehavior === 'native') {\n        setCommitQueued(true);\n      }\n      setServerErrorCleared(true);\n    }\n  };\n}\n\nfunction asArray<T>(v: T | T[]): T[] {\n  if (!v) {\n    return [];\n  }\n\n  return Array.isArray(v) ? v : [v];\n}\n\nfunction runValidate<T>(validate: ValidationFunction<T>, value: T): string[] {\n  if (typeof validate === 'function') {\n    let e = validate(value);\n    if (e && typeof e !== 'boolean') {\n      return asArray(e);\n    }\n  }\n\n  return [];\n}\n\nfunction getValidationResult(errors: string[]): ValidationResult | null {\n  return errors.length ? {\n    isInvalid: true,\n    validationErrors: errors,\n    validationDetails: CUSTOM_VALIDITY_STATE\n  } : null;\n}\n\nfunction isEqualValidation(a: ValidationResult | null, b: ValidationResult | null): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  return a && b\n    && a.isInvalid === b.isInvalid\n    && a.validationErrors.length === b.validationErrors.length\n    && a.validationErrors.every((a, i) => a === b.validationErrors[i])\n    && Object.entries(a.validationDetails).every(([k, v]) => b.validationDetails[k] === v);\n}\n\nexport function mergeValidation(...results: ValidationResult[]): ValidationResult {\n  let errors = new Set<string>();\n  let isInvalid = false;\n  let validationDetails = {\n    ...VALID_VALIDITY_STATE\n  };\n\n  for (let v of results) {\n    for (let e of v.validationErrors) {\n      errors.add(e);\n    }\n\n    // Only these properties apply for checkboxes.\n    isInvalid ||= v.isInvalid;\n    for (let key in validationDetails) {\n      validationDetails[key] ||= v.validationDetails[key];\n    }\n  }\n\n  validationDetails.valid = !isInvalid;\n  return {\n    isInvalid,\n    validationErrors: [...errors],\n    validationDetails\n  };\n}\n"],"mappings":";;AAAA;;;;;;;;;;ACAA,GDAA,CCAA;;;;;;;;;;;AAeO,MAAMA,yCAAA,GAAsC;EACjDC,QAAA,EAAU;EACVC,WAAA,EAAa;EACbC,eAAA,EAAiB;EACjBC,aAAA,EAAe;EACfC,cAAA,EAAgB;EAChBC,YAAA,EAAc;EACdC,OAAA,EAAS;EACTC,QAAA,EAAU;EACVC,YAAA,EAAc;EACdC,YAAA,EAAc;EACdC,KAAA,EAAO;AACT;AAEA,MAAMC,2CAAA,GAAuC;EAC3C,GAAGZ,yCAAoB;EACvBE,WAAA,EAAa;EACbS,KAAA,EAAO;AACT;AAEO,MAAME,yCAAA,GAA8C;EACzDC,SAAA,EAAW;EACXC,iBAAA,EAAmBf,yCAAA;EACnBgB,gBAAA,EAAkB;AACpB;AAEO,MAAMC,yCAAA,GAAwB,IAAAC,oBAAY,EAAoB,CAAC;AAE/D,MAAMC,wCAAA,GAA6B,0BAA0BC,IAAA,CAAKC,GAAG;AAqBrE,SAASC,0CAA0BC,KAA6B;EACrE;EACA,IAAIA,KAAK,CAACJ,wCAAA,CAA2B,EAAE;IACrC,IAAI;MAAAK,kBAAA,EAACA,kBAAkB;MAAAC,iBAAA,EAAEA,iBAAiB;MAAAC,gBAAA,EAAEA,gBAAgB;MAAAC,eAAA,EAAEA,eAAe;MAAAC,gBAAA,EAAEA;IAAgB,CAAC,GAAGL,KAAK,CAACJ,wCAAA,CAA2B;IACpI,OAAO;0BAACK,kBAAA;yBAAoBC,iBAAA;wBAAmBC,gBAAA;uBAAkBC,eAAA;wBAAiBC;IAAgB;EACpG;EAEA;EACA,OAAOC,gDAAA,CAA2BN,KAAA;AACpC;AAEA,SAASM,iDAA8BN,KAA6B;EAClE,IAAI;IAAAT,SAAA,EAACA,SAAS;IAAAgB,eAAA,EAAEA,eAAe;IAAAC,IAAA,EAAEA,IAAI;IAAAC,KAAA,EAAEA,KAAK;IAAAC,iBAAA,EAAEA,iBAAiB;IAAAC,QAAA,EAAEA,QAAQ;IAAEC,kBAAA,GAAqB;EAAA,CAAO,GAAGZ,KAAA;EAE1G;EACA,IAAIO,eAAA,EACFhB,SAAA,KAAAA,SAAA,GAAcgB,eAAA,KAAoB;EAGpC;EACA,IAAIM,eAAA,GAA2CtB,SAAA,GAAY;IACzDA,SAAA,EAAW;IACXE,gBAAA,EAAkB,EAAE;IACpBD,iBAAA,EAAmBH;EACrB,IAAI;EAEJ;EACA,IAAIyB,WAAA,GAAuC,IAAAC,cAAM,EAAE,MAAMC,yCAAA,CAAoBC,iCAAA,CAAYN,QAAA,EAAUF,KAAA,IAAS,CAACE,QAAA,EAAUF,KAAA,CAAM;EAE7H,IAAIC,iBAAA,aAAAA,iBAAA,uBAAAA,iBAAA,CAAmBlB,iBAAiB,CAACJ,KAAK,EAC5CsB,iBAAA,GAAoB;EAGtB;EACA,IAAIQ,YAAA,GAAe,IAAAC,iBAAS,EAAEzB,yCAAA;EAC9B,IAAI0B,mBAAA,GAAsB,IAAAL,cAAM,EAAE;IAChC,IAAIP,IAAA,EACF,OAAOa,KAAA,CAAMC,OAAO,CAACd,IAAA,IAAQA,IAAA,CAAKe,OAAO,CAACf,IAAA,IAAQgB,6BAAA,CAAQN,YAAY,CAACV,IAAA,CAAK,KAAKgB,6BAAA,CAAQN,YAAY,CAACV,IAAA,CAAK;IAE7G,OAAO,EAAE;EACX,GAAG,CAACU,YAAA,EAAcV,IAAA,CAAK;EAEvB;EACA,IAAI,CAACiB,gBAAA,EAAkBC,mBAAA,CAAoB,GAAG,IAAAC,eAAO,EAAET,YAAA;EACvD,IAAI,CAACU,oBAAA,EAAsBC,qBAAA,CAAsB,GAAG,IAAAF,eAAO,EAAE;EAC7D,IAAIT,YAAA,KAAiBO,gBAAA,EAAkB;IACrCC,mBAAA,CAAoBR,YAAA;IACpBW,qBAAA,CAAsB;EACxB;EAEA,IAAIC,WAAA,GAAuC,IAAAf,cAAM,EAAE,MACjDC,yCAAA,CAAoBY,oBAAA,GAAuB,EAAE,GAAGR,mBAAA,GAChD,CAACQ,oBAAA,EAAsBR,mBAAA,CAAoB;EAG7C;EACA,IAAIW,cAAA,GAAiB,IAAAC,aAAK,EAAE1C,yCAAA;EAC5B,IAAI,CAAC2C,eAAA,EAAiBC,kBAAA,CAAmB,GAAG,IAAAP,eAAO,EAAErC,yCAAA;EAErD,IAAI6C,SAAA,GAAY,IAAAH,aAAK,EAAE1C,yCAAA;EACvB,IAAIe,gBAAA,GAAmBA,CAAA;IACrB,IAAI,CAAC+B,YAAA,EACH;IAGFC,eAAA,CAAgB;IAChB,IAAIC,KAAA,GAAQxB,WAAA,IAAeJ,iBAAA,IAAqBqB,cAAA,CAAeQ,OAAO;IACtE,IAAI,CAACC,uCAAA,CAAkBF,KAAA,EAAOH,SAAA,CAAUI,OAAO,GAAG;MAChDJ,SAAA,CAAUI,OAAO,GAAGD,KAAA;MACpBJ,kBAAA,CAAmBI,KAAA;IACrB;EACF;EAEA,IAAI,CAACF,YAAA,EAAcC,eAAA,CAAgB,GAAG,IAAAV,eAAO,EAAE;EAC/C,IAAAc,gBAAQ,EAAEpC,gBAAA;EAEV;EACA;EACA;EACA,IAAIJ,kBAAA,GAAqBY,eAAA,IAAmBiB,WAAA,IAAehB,WAAA,IAAeJ,iBAAA,IAAqBpB,yCAAA;EAC/F,IAAIY,iBAAA,GAAoBU,kBAAA,KAAuB,WAC3CC,eAAA,IAAmBiB,WAAA,IAAeG,eAAA,GAClCpB,eAAA,IAAmBiB,WAAA,IAAehB,WAAA,IAAeJ,iBAAA,IAAqBuB,eAAA;EAE1E,OAAO;wBACLhC,kBAAA;uBACAC,iBAAA;IACAC,iBAAiBM,KAAK;MACpB;MACA,IAAIG,kBAAA,KAAuB,UAAU,CAAC4B,uCAAA,CAAkBP,eAAA,EAAiBxB,KAAA,GACvEyB,kBAAA,CAAmBzB,KAAA,OAEnBsB,cAAA,CAAeQ,OAAO,GAAG9B,KAAA;IAE7B;IACAL,gBAAA;MACE;MACA;MACA,IAAIkC,KAAA,GAAQhD,yCAAA;MACZ,IAAI,CAACkD,uCAAA,CAAkBF,KAAA,EAAOH,SAAA,CAAUI,OAAO,GAAG;QAChDJ,SAAA,CAAUI,OAAO,GAAGD,KAAA;QACpBJ,kBAAA,CAAmBI,KAAA;MACrB;MAEA;MACA;MACA,IAAI1B,kBAAA,KAAuB,UACzByB,eAAA,CAAgB;MAGlBR,qBAAA,CAAsB;IACxB;IACAxB,iBAAA;MACE;MACA;MACA,IAAIO,kBAAA,KAAuB,UACzByB,eAAA,CAAgB;MAElBR,qBAAA,CAAsB;IACxB;EACF;AACF;AAEA,SAASL,8BAAWkB,CAAU;EAC5B,IAAI,CAACA,CAAA,EACH,OAAO,EAAE;EAGX,OAAOrB,KAAA,CAAMC,OAAO,CAACoB,CAAA,IAAKA,CAAA,GAAI,CAACA,CAAA,CAAE;AACnC;AAEA,SAASzB,kCAAeN,QAA+B,EAAEF,KAAQ;EAC/D,IAAI,OAAOE,QAAA,KAAa,YAAY;IAClC,IAAIgC,CAAA,GAAIhC,QAAA,CAASF,KAAA;IACjB,IAAIkC,CAAA,IAAK,OAAOA,CAAA,KAAM,WACpB,OAAOnB,6BAAA,CAAQmB,CAAA;EAEnB;EAEA,OAAO,EAAE;AACX;AAEA,SAAS3B,0CAAoB4B,MAAgB;EAC3C,OAAOA,MAAA,CAAOC,MAAM,GAAG;IACrBtD,SAAA,EAAW;IACXE,gBAAA,EAAkBmD,MAAA;IAClBpD,iBAAA,EAAmBH;EACrB,IAAI;AACN;AAEA,SAASmD,wCAAkBM,CAA0B,EAAEC,CAA0B;EAC/E,IAAID,CAAA,KAAMC,CAAA,EACR,OAAO;EAGT,OAAOD,CAAA,IAAKC,CAAA,IACPD,CAAA,CAAEvD,SAAS,KAAKwD,CAAA,CAAExD,SAAS,IAC3BuD,CAAA,CAAErD,gBAAgB,CAACoD,MAAM,KAAKE,CAAA,CAAEtD,gBAAgB,CAACoD,MAAM,IACvDC,CAAA,CAAErD,gBAAgB,CAACuD,KAAK,CAAC,CAACF,CAAA,EAAGG,CAAA,KAAMH,CAAA,KAAMC,CAAA,CAAEtD,gBAAgB,CAACwD,CAAA,CAAE,KAC9DC,MAAA,CAAOC,OAAO,CAACL,CAAA,CAAEtD,iBAAiB,EAAEwD,KAAK,CAAC,CAAC,CAACI,CAAA,EAAGV,CAAA,CAAE,KAAKK,CAAA,CAAEvD,iBAAiB,CAAC4D,CAAA,CAAE,KAAKV,CAAA;AACxF;AAEO,SAASW,0CAAgB,GAAGC,OAA2B;EAC5D,IAAIV,MAAA,GAAS,IAAIW,GAAA;EACjB,IAAIhE,SAAA,GAAY;EAChB,IAAIC,iBAAA,GAAoB;IACtB,GAAGf;EACL;EAEA,KAAK,IAAIiE,CAAA,IAAKY,OAAA,EAAS;QAQnBE,kBAAA,EAAkBC,IAAA;IAPpB,KAAK,IAAId,CAAA,IAAKD,CAAA,CAAEjD,gBAAgB,EAC9BmD,MAAA,CAAOc,GAAG,CAACf,CAAA;IAGb;IACApD,SAAA,KAAAA,SAAA,GAAcmD,CAAA,CAAEnD,SAAS;IACzB,KAAK,IAAIoE,GAAA,IAAOnE,iBAAA,EACd,CAAAgE,kBAAA,GAAAhE,iBAAA,EAAkBiE,IAAA,GAAAE,GAAA,CAAI,KAAtBH,kBAAiB,CAACC,IAAA,CAAI,GAAKf,CAAA,CAAElD,iBAAiB,CAACmE,GAAA,CAAI;EAEvD;EAEAnE,iBAAA,CAAkBJ,KAAK,GAAG,CAACG,SAAA;EAC3B,OAAO;eACLA,SAAA;IACAE,gBAAA,EAAkB,C,GAAImD,MAAA,CAAO;uBAC7BpD;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}