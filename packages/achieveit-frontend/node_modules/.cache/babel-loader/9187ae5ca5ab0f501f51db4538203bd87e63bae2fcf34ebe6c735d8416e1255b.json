{"ast":null,"code":"// src/use-kbd.ts\nimport { mapPropsVariants } from \"@nextui-org/system-rsc\";\nimport { kbd } from \"@nextui-org/theme\";\nimport { clsx } from \"@nextui-org/shared-utils\";\nimport { useMemo } from \"react\";\nfunction useKbd(originalProps) {\n  const [props, variantProps] = mapPropsVariants(originalProps, kbd.variantKeys);\n  const {\n    as,\n    children,\n    className,\n    keys,\n    title,\n    classNames,\n    ...otherProps\n  } = props;\n  const Component = as || \"kbd\";\n  const slots = useMemo(() => kbd({\n    ...variantProps\n  }), [...Object.values(variantProps)]);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const keysToRender = typeof keys === \"string\" ? [keys] : Array.isArray(keys) ? keys : [];\n  const getKbdProps = (props2 = {}) => ({\n    ...otherProps,\n    ...props2,\n    className: clsx(slots.base({\n      class: clsx(baseStyles, props2.className)\n    }))\n  });\n  return {\n    Component,\n    slots,\n    classNames,\n    title,\n    children,\n    keysToRender,\n    getKbdProps\n  };\n}\nexport { useKbd };","map":{"version":3,"names":["mapPropsVariants","kbd","clsx","useMemo","useKbd","originalProps","props","variantProps","variantKeys","as","children","className","keys","title","classNames","otherProps","Component","slots","Object","values","baseStyles","base","keysToRender","Array","isArray","getKbdProps","props2","class"],"sources":["C:/Users/joelp/csc-307-achieveit/AchieveIt/node_modules/@nextui-org/kbd/dist/chunk-6LGFRRJC.mjs"],"sourcesContent":["// src/use-kbd.ts\nimport { mapPropsVariants } from \"@nextui-org/system-rsc\";\nimport { kbd } from \"@nextui-org/theme\";\nimport { clsx } from \"@nextui-org/shared-utils\";\nimport { useMemo } from \"react\";\nfunction useKbd(originalProps) {\n  const [props, variantProps] = mapPropsVariants(originalProps, kbd.variantKeys);\n  const { as, children, className, keys, title, classNames, ...otherProps } = props;\n  const Component = as || \"kbd\";\n  const slots = useMemo(\n    () => kbd({\n      ...variantProps\n    }),\n    [...Object.values(variantProps)]\n  );\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const keysToRender = typeof keys === \"string\" ? [keys] : Array.isArray(keys) ? keys : [];\n  const getKbdProps = (props2 = {}) => ({\n    ...otherProps,\n    ...props2,\n    className: clsx(slots.base({ class: clsx(baseStyles, props2.className) }))\n  });\n  return { Component, slots, classNames, title, children, keysToRender, getKbdProps };\n}\n\nexport {\n  useKbd\n};\n"],"mappings":"AAAA;AACA,SAASA,gBAAgB,QAAQ,wBAAwB;AACzD,SAASC,GAAG,QAAQ,mBAAmB;AACvC,SAASC,IAAI,QAAQ,0BAA0B;AAC/C,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,MAAMA,CAACC,aAAa,EAAE;EAC7B,MAAM,CAACC,KAAK,EAAEC,YAAY,CAAC,GAAGP,gBAAgB,CAACK,aAAa,EAAEJ,GAAG,CAACO,WAAW,CAAC;EAC9E,MAAM;IAAEC,EAAE;IAAEC,QAAQ;IAAEC,SAAS;IAAEC,IAAI;IAAEC,KAAK;IAAEC,UAAU;IAAE,GAAGC;EAAW,CAAC,GAAGT,KAAK;EACjF,MAAMU,SAAS,GAAGP,EAAE,IAAI,KAAK;EAC7B,MAAMQ,KAAK,GAAGd,OAAO,CACnB,MAAMF,GAAG,CAAC;IACR,GAAGM;EACL,CAAC,CAAC,EACF,CAAC,GAAGW,MAAM,CAACC,MAAM,CAACZ,YAAY,CAAC,CACjC,CAAC;EACD,MAAMa,UAAU,GAAGlB,IAAI,CAACY,UAAU,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACO,IAAI,EAAEV,SAAS,CAAC;EACjF,MAAMW,YAAY,GAAG,OAAOV,IAAI,KAAK,QAAQ,GAAG,CAACA,IAAI,CAAC,GAAGW,KAAK,CAACC,OAAO,CAACZ,IAAI,CAAC,GAAGA,IAAI,GAAG,EAAE;EACxF,MAAMa,WAAW,GAAGA,CAACC,MAAM,GAAG,CAAC,CAAC,MAAM;IACpC,GAAGX,UAAU;IACb,GAAGW,MAAM;IACTf,SAAS,EAAET,IAAI,CAACe,KAAK,CAACI,IAAI,CAAC;MAAEM,KAAK,EAAEzB,IAAI,CAACkB,UAAU,EAAEM,MAAM,CAACf,SAAS;IAAE,CAAC,CAAC;EAC3E,CAAC,CAAC;EACF,OAAO;IAAEK,SAAS;IAAEC,KAAK;IAAEH,UAAU;IAAED,KAAK;IAAEH,QAAQ;IAAEY,YAAY;IAAEG;EAAY,CAAC;AACrF;AAEA,SACErB,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}