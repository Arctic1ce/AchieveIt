{"ast":null,"code":"import { _ as $cUVuN$_ } from \"@swc/helpers/_/_class_private_field_init\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */ // Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $2b4dce13dd5a17fa$export$842a2cf37af977e1(amount, numerator) {\n  return amount - numerator * Math.floor(amount / numerator);\n}\nfunction $2b4dce13dd5a17fa$export$784d13d8ee351f07(date) {\n  if (date.era) return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(date.calendar, date.era, date.year, date.month, date.day);else return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(date.calendar, date.year, date.month, date.day);\n}\nfunction $2b4dce13dd5a17fa$export$27fa0172ae2644b3(date) {\n  if (date.era) return new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)(date.calendar, date.era, date.year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);else return new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)(date.calendar, date.year, date.month, date.day, date.hour, date.minute, date.second);\n}\nconst $3b62074eb05584b2$var$EPOCH = 1721426; // 001/01/03 Julian C.E.\nfunction $3b62074eb05584b2$export$f297eb839006d339(era, year, month, day) {\n  year = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year);\n  let y1 = year - 1;\n  let monthOffset = -2;\n  if (month <= 2) monthOffset = 0;else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) monthOffset = -1;\n  return $3b62074eb05584b2$var$EPOCH - 1 + 365 * y1 + Math.floor(y1 / 4) - Math.floor(y1 / 100) + Math.floor(y1 / 400) + Math.floor((367 * month - 362) / 12 + monthOffset + day);\n}\nfunction $3b62074eb05584b2$export$553d7fa8e3805fc0(year) {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\nfunction $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year) {\n  return era === \"BC\" ? 1 - year : year;\n}\nfunction $3b62074eb05584b2$export$4475b7e617eb123c(year) {\n  let era = \"AD\";\n  if (year <= 0) {\n    era = \"BC\";\n    year = 1 - year;\n  }\n  return [era, year];\n}\nconst $3b62074eb05584b2$var$daysInMonth = {\n  standard: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  leapyear: [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n};\nclass $3b62074eb05584b2$export$80ee6245ec4f29ec {\n  fromJulianDay(jd) {\n    let jd0 = jd;\n    let depoch = jd0 - $3b62074eb05584b2$var$EPOCH;\n    let quadricent = Math.floor(depoch / 146097);\n    let dqc = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(depoch, 146097);\n    let cent = Math.floor(dqc / 36524);\n    let dcent = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(dqc, 36524);\n    let quad = Math.floor(dcent / 1461);\n    let dquad = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(dcent, 1461);\n    let yindex = Math.floor(dquad / 365);\n    let extendedYear = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);\n    let [era, year] = $3b62074eb05584b2$export$4475b7e617eb123c(extendedYear);\n    let yearDay = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, 1, 1);\n    let leapAdj = 2;\n    if (jd0 < $3b62074eb05584b2$export$f297eb839006d339(era, year, 3, 1)) leapAdj = 0;else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) leapAdj = 1;\n    let month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);\n    let day = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, month, 1) + 1;\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, month, day);\n  }\n  toJulianDay(date) {\n    return $3b62074eb05584b2$export$f297eb839006d339(date.era, date.year, date.month, date.day);\n  }\n  getDaysInMonth(date) {\n    return $3b62074eb05584b2$var$daysInMonth[$3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? \"leapyear\" : \"standard\"][date.month - 1];\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getMonthsInYear(date) {\n    return 12;\n  }\n  getDaysInYear(date) {\n    return $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? 366 : 365;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getYearsInEra(date) {\n    return 9999;\n  }\n  getEras() {\n    return [\"BC\", \"AD\"];\n  }\n  isInverseEra(date) {\n    return date.era === \"BC\";\n  }\n  balanceDate(date) {\n    if (date.year <= 0) {\n      date.era = date.era === \"BC\" ? \"AD\" : \"BC\";\n      date.year = 1 - date.year;\n    }\n  }\n  constructor() {\n    this.identifier = \"gregory\";\n  }\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Data from https://github.com/unicode-cldr/cldr-core/blob/master/supplemental/weekData.json\n// Locales starting on Sunday have been removed for compression.\nconst $2fe286d2fb449abb$export$7a5acbd77d414bd9 = {\n  \"001\": 1,\n  AD: 1,\n  AE: 6,\n  AF: 6,\n  AI: 1,\n  AL: 1,\n  AM: 1,\n  AN: 1,\n  AR: 1,\n  AT: 1,\n  AU: 1,\n  AX: 1,\n  AZ: 1,\n  BA: 1,\n  BE: 1,\n  BG: 1,\n  BH: 6,\n  BM: 1,\n  BN: 1,\n  BY: 1,\n  CH: 1,\n  CL: 1,\n  CM: 1,\n  CN: 1,\n  CR: 1,\n  CY: 1,\n  CZ: 1,\n  DE: 1,\n  DJ: 6,\n  DK: 1,\n  DZ: 6,\n  EC: 1,\n  EE: 1,\n  EG: 6,\n  ES: 1,\n  FI: 1,\n  FJ: 1,\n  FO: 1,\n  FR: 1,\n  GB: 1,\n  GE: 1,\n  GF: 1,\n  GP: 1,\n  GR: 1,\n  HR: 1,\n  HU: 1,\n  IE: 1,\n  IQ: 6,\n  IR: 6,\n  IS: 1,\n  IT: 1,\n  JO: 6,\n  KG: 1,\n  KW: 6,\n  KZ: 1,\n  LB: 1,\n  LI: 1,\n  LK: 1,\n  LT: 1,\n  LU: 1,\n  LV: 1,\n  LY: 6,\n  MC: 1,\n  MD: 1,\n  ME: 1,\n  MK: 1,\n  MN: 1,\n  MQ: 1,\n  MV: 5,\n  MY: 1,\n  NL: 1,\n  NO: 1,\n  NZ: 1,\n  OM: 6,\n  PL: 1,\n  QA: 6,\n  RE: 1,\n  RO: 1,\n  RS: 1,\n  RU: 1,\n  SD: 6,\n  SE: 1,\n  SI: 1,\n  SK: 1,\n  SM: 1,\n  SY: 6,\n  TJ: 1,\n  TM: 1,\n  TR: 1,\n  UA: 1,\n  UY: 1,\n  UZ: 1,\n  VA: 1,\n  VN: 1,\n  XK: 1\n};\nfunction $14e0f24ef4ac5c92$export$ea39ec197993aef0(a, b) {\n  b = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(b, a.calendar);\n  return a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\nfunction $14e0f24ef4ac5c92$export$a18c89cbd24170ff(a, b) {\n  b = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(b, a.calendar);\n  // In the Japanese calendar, months can span multiple eras/years, so only compare the first of the month.\n  a = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(a);\n  b = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(b);\n  return a.era === b.era && a.year === b.year && a.month === b.month;\n}\nfunction $14e0f24ef4ac5c92$export$5841f9eb9773f25f(a, b) {\n  b = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(b, a.calendar);\n  a = $14e0f24ef4ac5c92$export$f91e89d3d0406102(a);\n  b = $14e0f24ef4ac5c92$export$f91e89d3d0406102(b);\n  return a.era === b.era && a.year === b.year;\n}\nfunction $14e0f24ef4ac5c92$export$91b62ebf2ba703ee(a, b) {\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\nfunction $14e0f24ef4ac5c92$export$5a8da0c44a3afdf2(a, b) {\n  a = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(a);\n  b = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month;\n}\nfunction $14e0f24ef4ac5c92$export$ea840f5a6dda8147(a, b) {\n  a = $14e0f24ef4ac5c92$export$f91e89d3d0406102(a);\n  b = $14e0f24ef4ac5c92$export$f91e89d3d0406102(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year;\n}\nfunction $14e0f24ef4ac5c92$export$629b0a497aa65267(date, timeZone) {\n  return $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone));\n}\nfunction $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale) {\n  let julian = date.calendar.toJulianDay(date);\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  let dayOfWeek = Math.ceil(julian + 1 - $14e0f24ef4ac5c92$var$getWeekStart(locale)) % 7;\n  if (dayOfWeek < 0) dayOfWeek += 7;\n  return dayOfWeek;\n}\nfunction $14e0f24ef4ac5c92$export$461939dd4422153(timeZone) {\n  return (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(Date.now(), timeZone);\n}\nfunction $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone) {\n  return (0, $11d87f3f76e88657$export$93522d1a439f3617)($14e0f24ef4ac5c92$export$461939dd4422153(timeZone));\n}\nfunction $14e0f24ef4ac5c92$export$68781ddf31c0090f(a, b) {\n  return a.calendar.toJulianDay(a) - b.calendar.toJulianDay(b);\n}\nfunction $14e0f24ef4ac5c92$export$c19a80a9721b80f6(a, b) {\n  return $14e0f24ef4ac5c92$var$timeToMs(a) - $14e0f24ef4ac5c92$var$timeToMs(b);\n}\nfunction $14e0f24ef4ac5c92$var$timeToMs(a) {\n  return a.hour * 3600000 + a.minute * 60000 + a.second * 1000 + a.millisecond;\n}\nfunction $14e0f24ef4ac5c92$export$126c91c941de7e(a, timeZone) {\n  let ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(a, timeZone);\n  let tomorrow = a.add({\n    days: 1\n  });\n  let tomorrowMs = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(tomorrow, timeZone);\n  return (tomorrowMs - ms) / 3600000;\n}\nlet $14e0f24ef4ac5c92$var$localTimeZone = null;\nfunction $14e0f24ef4ac5c92$export$aa8b41735afcabd2() {\n  // TODO: invalidate this somehow?\n  if ($14e0f24ef4ac5c92$var$localTimeZone == null) $14e0f24ef4ac5c92$var$localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  return $14e0f24ef4ac5c92$var$localTimeZone;\n}\nfunction $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date) {\n  // Use `subtract` instead of `set` so we don't get constrained in an era.\n  return date.subtract({\n    days: date.day - 1\n  });\n}\nfunction $14e0f24ef4ac5c92$export$a2258d9c4118825c(date) {\n  return date.add({\n    days: date.calendar.getDaysInMonth(date) - date.day\n  });\n}\nfunction $14e0f24ef4ac5c92$export$f91e89d3d0406102(date) {\n  return $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date.subtract({\n    months: date.month - 1\n  }));\n}\nfunction $14e0f24ef4ac5c92$export$8b7aa55c66d5569e(date) {\n  return $14e0f24ef4ac5c92$export$a2258d9c4118825c(date.add({\n    months: date.calendar.getMonthsInYear(date) - date.month\n  }));\n}\nfunction $14e0f24ef4ac5c92$export$5412ac11713b72ad(date) {\n  if (date.calendar.getMinimumMonthInYear) return date.calendar.getMinimumMonthInYear(date);\n  return 1;\n}\nfunction $14e0f24ef4ac5c92$export$b2f4953d301981d5(date) {\n  if (date.calendar.getMinimumDayInMonth) return date.calendar.getMinimumDayInMonth(date);\n  return 1;\n}\nfunction $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale) {\n  let dayOfWeek = $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale);\n  return date.subtract({\n    days: dayOfWeek\n  });\n}\nfunction $14e0f24ef4ac5c92$export$ef8b6d9133084f4e(date, locale) {\n  return $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale).add({\n    days: 6\n  });\n}\nconst $14e0f24ef4ac5c92$var$cachedRegions = new Map();\nfunction $14e0f24ef4ac5c92$var$getRegion(locale) {\n  // If the Intl.Locale API is available, use it to get the region for the locale.\n  // @ts-ignore\n  if (Intl.Locale) {\n    // Constructing an Intl.Locale is expensive, so cache the result.\n    let region = $14e0f24ef4ac5c92$var$cachedRegions.get(locale);\n    if (!region) {\n      // @ts-ignore\n      region = new Intl.Locale(locale).maximize().region;\n      $14e0f24ef4ac5c92$var$cachedRegions.set(locale, region);\n    }\n    return region;\n  }\n  // If not, just try splitting the string.\n  // If the second part of the locale string is 'u',\n  // then this is a unicode extension, so ignore it.\n  // Otherwise, it should be the region.\n  let part = locale.split(\"-\")[1];\n  return part === \"u\" ? null : part;\n}\nfunction $14e0f24ef4ac5c92$var$getWeekStart(locale) {\n  // TODO: use Intl.Locale for this once browsers support the weekInfo property\n  // https://github.com/tc39/proposal-intl-locale-info\n  let region = $14e0f24ef4ac5c92$var$getRegion(locale);\n  return (0, $2fe286d2fb449abb$export$7a5acbd77d414bd9)[region] || 0;\n}\nfunction $14e0f24ef4ac5c92$export$ccc1b2479e7dd654(date, locale) {\n  let days = date.calendar.getDaysInMonth(date);\n  return Math.ceil(($14e0f24ef4ac5c92$export$2061056d06d7cdf7($14e0f24ef4ac5c92$export$a5a3b454ada2268e(date), locale) + days) / 7);\n}\nfunction $14e0f24ef4ac5c92$export$5c333a116e949cdd(a, b) {\n  if (a && b) return a.compare(b) <= 0 ? a : b;\n  return a || b;\n}\nfunction $14e0f24ef4ac5c92$export$a75f2bff57811055(a, b) {\n  if (a && b) return a.compare(b) >= 0 ? a : b;\n  return a || b;\n}\nconst $14e0f24ef4ac5c92$var$WEEKEND_DATA = {\n  AF: [4, 5],\n  AE: [5, 6],\n  BH: [5, 6],\n  DZ: [5, 6],\n  EG: [5, 6],\n  IL: [5, 6],\n  IQ: [5, 6],\n  IR: [5, 5],\n  JO: [5, 6],\n  KW: [5, 6],\n  LY: [5, 6],\n  OM: [5, 6],\n  QA: [5, 6],\n  SA: [5, 6],\n  SD: [5, 6],\n  SY: [5, 6],\n  YE: [5, 6]\n};\nfunction $14e0f24ef4ac5c92$export$618d60ea299da42(date, locale) {\n  let julian = date.calendar.toJulianDay(date);\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  let dayOfWeek = Math.ceil(julian + 1) % 7;\n  if (dayOfWeek < 0) dayOfWeek += 7;\n  let region = $14e0f24ef4ac5c92$var$getRegion(locale);\n  // Use Intl.Locale for this once weekInfo is supported.\n  // https://github.com/tc39/proposal-intl-locale-info\n  let [start, end] = $14e0f24ef4ac5c92$var$WEEKEND_DATA[region] || [6, 0];\n  return dayOfWeek === start || dayOfWeek === end;\n}\nfunction $14e0f24ef4ac5c92$export$ee9d87258e1d19ed(date, locale) {\n  return !$14e0f24ef4ac5c92$export$618d60ea299da42(date, locale);\n}\nfunction $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) {\n  date = $11d87f3f76e88657$export$b4a036af3fc0b032(date, new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n  let year = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(date.era, date.year);\n  return $11d87f3f76e88657$var$epochFromParts(year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n}\nfunction $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, millisecond) {\n  // Note: Date.UTC() interprets one and two-digit years as being in the\n  // 20th century, so don't use it\n  let date = new Date();\n  date.setUTCHours(hour, minute, second, millisecond);\n  date.setUTCFullYear(year, month - 1, day);\n  return date.getTime();\n}\nfunction $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone) {\n  // Fast path for UTC.\n  if (timeZone === \"UTC\") return 0;\n  // Fast path: for local timezone after 1970, use native Date.\n  if (ms > 0 && timeZone === (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)()) return new Date(ms).getTimezoneOffset() * -60000;\n  let {\n    year: year,\n    month: month,\n    day: day,\n    hour: hour,\n    minute: minute,\n    second: second\n  } = $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone);\n  let utc = $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, 0);\n  return utc - Math.floor(ms / 1000) * 1000;\n}\nconst $11d87f3f76e88657$var$formattersByTimeZone = new Map();\nfunction $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone) {\n  let formatter = $11d87f3f76e88657$var$formattersByTimeZone.get(timeZone);\n  if (!formatter) {\n    formatter = new Intl.DateTimeFormat(\"en-US\", {\n      timeZone: timeZone,\n      hour12: false,\n      era: \"short\",\n      year: \"numeric\",\n      month: \"numeric\",\n      day: \"numeric\",\n      hour: \"numeric\",\n      minute: \"numeric\",\n      second: \"numeric\"\n    });\n    $11d87f3f76e88657$var$formattersByTimeZone.set(timeZone, formatter);\n  }\n  let parts = formatter.formatToParts(new Date(ms));\n  let namedParts = {};\n  for (let part of parts) if (part.type !== \"literal\") namedParts[part.type] = part.value;\n  return {\n    // Firefox returns B instead of BC... https://bugzilla.mozilla.org/show_bug.cgi?id=1752253\n    year: namedParts.era === \"BC\" || namedParts.era === \"B\" ? -namedParts.year + 1 : +namedParts.year,\n    month: +namedParts.month,\n    day: +namedParts.day,\n    hour: namedParts.hour === \"24\" ? 0 : +namedParts.hour,\n    minute: +namedParts.minute,\n    second: +namedParts.second\n  };\n}\nconst $11d87f3f76e88657$var$DAYMILLIS = 86400000;\nfunction $11d87f3f76e88657$export$136f38efe7caf549(date, timeZone) {\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date);\n  let earlier = ms - $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  let later = ms - $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  return $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later);\n}\nfunction $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later) {\n  let found = earlier === later ? [earlier] : [earlier, later];\n  return found.filter(absolute => $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute));\n}\nfunction $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute) {\n  let parts = $11d87f3f76e88657$var$getTimeZoneParts(absolute, timeZone);\n  return date.year === parts.year && date.month === parts.month && date.day === parts.day && date.hour === parts.hour && date.minute === parts.minute && date.second === parts.second;\n}\nfunction $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone, disambiguation = \"compatible\") {\n  let dateTime = $11d87f3f76e88657$export$b21e0b124e224484(date);\n  // Fast path: if the time zone is UTC, use native Date.\n  if (timeZone === \"UTC\") return $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);\n  // Fast path: if the time zone is the local timezone and disambiguation is compatible, use native Date.\n  if (timeZone === (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)() && disambiguation === \"compatible\") {\n    dateTime = $11d87f3f76e88657$export$b4a036af3fc0b032(dateTime, new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n    // Don't use Date constructor here because two-digit years are interpreted in the 20th century.\n    let date = new Date();\n    let year = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(dateTime.era, dateTime.year);\n    date.setFullYear(year, dateTime.month - 1, dateTime.day);\n    date.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n    return date.getTime();\n  }\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);\n  let offsetBefore = $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  let offsetAfter = $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  let valid = $11d87f3f76e88657$var$getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);\n  if (valid.length === 1) return valid[0];\n  if (valid.length > 1) switch (disambiguation) {\n    // 'compatible' means 'earlier' for \"fall back\" transitions\n    case \"compatible\":\n    case \"earlier\":\n      return valid[0];\n    case \"later\":\n      return valid[valid.length - 1];\n    case \"reject\":\n      throw new RangeError(\"Multiple possible absolute times found\");\n  }\n  switch (disambiguation) {\n    case \"earlier\":\n      return Math.min(ms - offsetBefore, ms - offsetAfter);\n    // 'compatible' means 'later' for \"spring forward\" transitions\n    case \"compatible\":\n    case \"later\":\n      return Math.max(ms - offsetBefore, ms - offsetAfter);\n    case \"reject\":\n      throw new RangeError(\"No such absolute time found\");\n  }\n}\nfunction $11d87f3f76e88657$export$e67a095c620b86fe(dateTime, timeZone, disambiguation = \"compatible\") {\n  return new Date($11d87f3f76e88657$export$5107c82f94518f5c(dateTime, timeZone, disambiguation));\n}\nfunction $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone) {\n  let offset = $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone);\n  let date = new Date(ms + offset);\n  let year = date.getUTCFullYear();\n  let month = date.getUTCMonth() + 1;\n  let day = date.getUTCDate();\n  let hour = date.getUTCHours();\n  let minute = date.getUTCMinutes();\n  let second = date.getUTCSeconds();\n  let millisecond = date.getUTCMilliseconds();\n  return new (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)(year, month, day, timeZone, offset, hour, minute, second, millisecond);\n}\nfunction $11d87f3f76e88657$export$e57ff100d91bd4b9(date, timeZone) {\n  return $11d87f3f76e88657$export$1b96692a1ba042ac(date.getTime(), timeZone);\n}\nfunction $11d87f3f76e88657$export$d7f92bcd3596b086(date) {\n  return $11d87f3f76e88657$export$e57ff100d91bd4b9(date, (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)());\n}\nfunction $11d87f3f76e88657$export$93522d1a439f3617(dateTime) {\n  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);\n}\nfunction $11d87f3f76e88657$export$6f4d78149f3f53ac(date) {\n  return {\n    era: date.era,\n    year: date.year,\n    month: date.month,\n    day: date.day\n  };\n}\nfunction $11d87f3f76e88657$export$4d0393e732857be5(date) {\n  return {\n    hour: date.hour,\n    minute: date.minute,\n    second: date.second,\n    millisecond: date.millisecond\n  };\n}\nfunction $11d87f3f76e88657$export$b21e0b124e224484(date, time) {\n  let hour = 0,\n    minute = 0,\n    second = 0,\n    millisecond = 0;\n  if (\"timeZone\" in date) ({\n    hour: hour,\n    minute: minute,\n    second: second,\n    millisecond: millisecond\n  } = date);else if (\"hour\" in date && !time) return date;\n  if (time) ({\n    hour: hour,\n    minute: minute,\n    second: second,\n    millisecond: millisecond\n  } = time);\n  return new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)(date.calendar, date.era, date.year, date.month, date.day, hour, minute, second, millisecond);\n}\nfunction $11d87f3f76e88657$export$d33f79e3ffc3dc83(dateTime) {\n  return new (0, $35ea8db9cb2ccb90$export$680ea196effce5f)(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n}\nfunction $11d87f3f76e88657$export$b4a036af3fc0b032(date, calendar) {\n  if (date.calendar.identifier === calendar.identifier) return date;\n  let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));\n  let copy = date.copy();\n  copy.calendar = calendar;\n  copy.era = calendarDate.era;\n  copy.year = calendarDate.year;\n  copy.month = calendarDate.month;\n  copy.day = calendarDate.day;\n  (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(copy);\n  return copy;\n}\nfunction $11d87f3f76e88657$export$84c95a83c799e074(date, timeZone, disambiguation) {\n  if (date instanceof (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)) {\n    if (date.timeZone === timeZone) return date;\n    return $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone);\n  }\n  let ms = $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone, disambiguation);\n  return $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone);\n}\nfunction $11d87f3f76e88657$export$83aac07b4c37b25(date) {\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;\n  return new Date(ms);\n}\nfunction $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone) {\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;\n  return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone), date.calendar);\n}\nfunction $11d87f3f76e88657$export$d9b67bc93c097491(date) {\n  return $11d87f3f76e88657$export$538b00033cc11c75(date, (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)());\n}\nconst $735220c2d4774dd3$var$ONE_HOUR = 3600000;\nfunction $735220c2d4774dd3$export$e16d8520af44a096(date, duration) {\n  let mutableDate = date.copy();\n  let days = \"hour\" in mutableDate ? $735220c2d4774dd3$var$addTimeFields(mutableDate, duration) : 0;\n  $735220c2d4774dd3$var$addYears(mutableDate, duration.years || 0);\n  if (mutableDate.calendar.balanceYearMonth) mutableDate.calendar.balanceYearMonth(mutableDate, date);\n  mutableDate.month += duration.months || 0;\n  $735220c2d4774dd3$var$balanceYearMonth(mutableDate);\n  $735220c2d4774dd3$var$constrainMonthDay(mutableDate);\n  mutableDate.day += (duration.weeks || 0) * 7;\n  mutableDate.day += duration.days || 0;\n  mutableDate.day += days;\n  $735220c2d4774dd3$var$balanceDay(mutableDate);\n  if (mutableDate.calendar.balanceDate) mutableDate.calendar.balanceDate(mutableDate);\n  // Constrain in case adding ended up with a date outside the valid range for the calendar system.\n  // The behavior here is slightly different than when constraining in the `set` function in that\n  // we adjust smaller fields to their minimum/maximum values rather than constraining each field\n  // individually. This matches the general behavior of `add` vs `set` regarding how fields are balanced.\n  if (mutableDate.year < 1) {\n    mutableDate.year = 1;\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n  let maxYear = mutableDate.calendar.getYearsInEra(mutableDate);\n  if (mutableDate.year > maxYear) {\n    var _mutableDate_calendar, _mutableDate_calendar_isInverseEra;\n    let isInverseEra = (_mutableDate_calendar_isInverseEra = (_mutableDate_calendar = mutableDate.calendar).isInverseEra) === null || _mutableDate_calendar_isInverseEra === void 0 ? void 0 : _mutableDate_calendar_isInverseEra.call(_mutableDate_calendar, mutableDate);\n    mutableDate.year = maxYear;\n    mutableDate.month = isInverseEra ? 1 : mutableDate.calendar.getMonthsInYear(mutableDate);\n    mutableDate.day = isInverseEra ? 1 : mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n  if (mutableDate.month < 1) {\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n  let maxMonth = mutableDate.calendar.getMonthsInYear(mutableDate);\n  if (mutableDate.month > maxMonth) {\n    mutableDate.month = maxMonth;\n    mutableDate.day = mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n  mutableDate.day = Math.max(1, Math.min(mutableDate.calendar.getDaysInMonth(mutableDate), mutableDate.day));\n  return mutableDate;\n}\nfunction $735220c2d4774dd3$var$addYears(date, years) {\n  var _date_calendar, _date_calendar_isInverseEra;\n  if ((_date_calendar_isInverseEra = (_date_calendar = date.calendar).isInverseEra) === null || _date_calendar_isInverseEra === void 0 ? void 0 : _date_calendar_isInverseEra.call(_date_calendar, date)) years = -years;\n  date.year += years;\n}\nfunction $735220c2d4774dd3$var$balanceYearMonth(date) {\n  while (date.month < 1) {\n    $735220c2d4774dd3$var$addYears(date, -1);\n    date.month += date.calendar.getMonthsInYear(date);\n  }\n  let monthsInYear = 0;\n  while (date.month > (monthsInYear = date.calendar.getMonthsInYear(date))) {\n    date.month -= monthsInYear;\n    $735220c2d4774dd3$var$addYears(date, 1);\n  }\n}\nfunction $735220c2d4774dd3$var$balanceDay(date) {\n  while (date.day < 1) {\n    date.month--;\n    $735220c2d4774dd3$var$balanceYearMonth(date);\n    date.day += date.calendar.getDaysInMonth(date);\n  }\n  while (date.day > date.calendar.getDaysInMonth(date)) {\n    date.day -= date.calendar.getDaysInMonth(date);\n    date.month++;\n    $735220c2d4774dd3$var$balanceYearMonth(date);\n  }\n}\nfunction $735220c2d4774dd3$var$constrainMonthDay(date) {\n  date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));\n  date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));\n}\nfunction $735220c2d4774dd3$export$c4e2ecac49351ef2(date) {\n  if (date.calendar.constrainDate) date.calendar.constrainDate(date);\n  date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));\n  $735220c2d4774dd3$var$constrainMonthDay(date);\n}\nfunction $735220c2d4774dd3$export$3e2544e88a25bff8(duration) {\n  let inverseDuration = {};\n  for (let key in duration) if (typeof duration[key] === \"number\") inverseDuration[key] = -duration[key];\n  return inverseDuration;\n}\nfunction $735220c2d4774dd3$export$4e2d2ead65e5f7e3(date, duration) {\n  return $735220c2d4774dd3$export$e16d8520af44a096(date, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));\n}\nfunction $735220c2d4774dd3$export$adaa4cf7ef1b65be(date, fields) {\n  let mutableDate = date.copy();\n  if (fields.era != null) mutableDate.era = fields.era;\n  if (fields.year != null) mutableDate.year = fields.year;\n  if (fields.month != null) mutableDate.month = fields.month;\n  if (fields.day != null) mutableDate.day = fields.day;\n  $735220c2d4774dd3$export$c4e2ecac49351ef2(mutableDate);\n  return mutableDate;\n}\nfunction $735220c2d4774dd3$export$e5d5e1c1822b6e56(value, fields) {\n  let mutableValue = value.copy();\n  if (fields.hour != null) mutableValue.hour = fields.hour;\n  if (fields.minute != null) mutableValue.minute = fields.minute;\n  if (fields.second != null) mutableValue.second = fields.second;\n  if (fields.millisecond != null) mutableValue.millisecond = fields.millisecond;\n  $735220c2d4774dd3$export$7555de1e070510cb(mutableValue);\n  return mutableValue;\n}\nfunction $735220c2d4774dd3$var$balanceTime(time) {\n  time.second += Math.floor(time.millisecond / 1000);\n  time.millisecond = $735220c2d4774dd3$var$nonNegativeMod(time.millisecond, 1000);\n  time.minute += Math.floor(time.second / 60);\n  time.second = $735220c2d4774dd3$var$nonNegativeMod(time.second, 60);\n  time.hour += Math.floor(time.minute / 60);\n  time.minute = $735220c2d4774dd3$var$nonNegativeMod(time.minute, 60);\n  let days = Math.floor(time.hour / 24);\n  time.hour = $735220c2d4774dd3$var$nonNegativeMod(time.hour, 24);\n  return days;\n}\nfunction $735220c2d4774dd3$export$7555de1e070510cb(time) {\n  time.millisecond = Math.max(0, Math.min(time.millisecond, 1000));\n  time.second = Math.max(0, Math.min(time.second, 59));\n  time.minute = Math.max(0, Math.min(time.minute, 59));\n  time.hour = Math.max(0, Math.min(time.hour, 23));\n}\nfunction $735220c2d4774dd3$var$nonNegativeMod(a, b) {\n  let result = a % b;\n  if (result < 0) result += b;\n  return result;\n}\nfunction $735220c2d4774dd3$var$addTimeFields(time, duration) {\n  time.hour += duration.hours || 0;\n  time.minute += duration.minutes || 0;\n  time.second += duration.seconds || 0;\n  time.millisecond += duration.milliseconds || 0;\n  return $735220c2d4774dd3$var$balanceTime(time);\n}\nfunction $735220c2d4774dd3$export$7ed87b6bc2506470(time, duration) {\n  let res = time.copy();\n  $735220c2d4774dd3$var$addTimeFields(res, duration);\n  return res;\n}\nfunction $735220c2d4774dd3$export$fe34d3a381cd7501(time, duration) {\n  return $735220c2d4774dd3$export$7ed87b6bc2506470(time, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));\n}\nfunction $735220c2d4774dd3$export$d52ced6badfb9a4c(value, field, amount, options) {\n  let mutable = value.copy();\n  switch (field) {\n    case \"era\":\n      {\n        let eras = value.calendar.getEras();\n        let eraIndex = eras.indexOf(value.era);\n        if (eraIndex < 0) throw new Error(\"Invalid era: \" + value.era);\n        eraIndex = $735220c2d4774dd3$var$cycleValue(eraIndex, amount, 0, eras.length - 1, options === null || options === void 0 ? void 0 : options.round);\n        mutable.era = eras[eraIndex];\n        // Constrain the year and other fields within the era, so the era doesn't change when we balance below.\n        $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);\n        break;\n      }\n    case \"year\":\n      var _mutable_calendar, _mutable_calendar_isInverseEra;\n      if ((_mutable_calendar_isInverseEra = (_mutable_calendar = mutable.calendar).isInverseEra) === null || _mutable_calendar_isInverseEra === void 0 ? void 0 : _mutable_calendar_isInverseEra.call(_mutable_calendar, mutable)) amount = -amount;\n      // The year field should not cycle within the era as that can cause weird behavior affecting other fields.\n      // We need to also allow values < 1 so that decrementing goes to the previous era. If we get -Infinity back\n      // we know we wrapped around after reaching 9999 (the maximum), so set the year back to 1.\n      mutable.year = $735220c2d4774dd3$var$cycleValue(value.year, amount, -Infinity, 9999, options === null || options === void 0 ? void 0 : options.round);\n      if (mutable.year === -Infinity) mutable.year = 1;\n      if (mutable.calendar.balanceYearMonth) mutable.calendar.balanceYearMonth(mutable, value);\n      break;\n    case \"month\":\n      mutable.month = $735220c2d4774dd3$var$cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options === null || options === void 0 ? void 0 : options.round);\n      break;\n    case \"day\":\n      mutable.day = $735220c2d4774dd3$var$cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options === null || options === void 0 ? void 0 : options.round);\n      break;\n    default:\n      throw new Error(\"Unsupported field \" + field);\n  }\n  if (value.calendar.balanceDate) value.calendar.balanceDate(mutable);\n  $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);\n  return mutable;\n}\nfunction $735220c2d4774dd3$export$dd02b3e0007dfe28(value, field, amount, options) {\n  let mutable = value.copy();\n  switch (field) {\n    case \"hour\":\n      {\n        let hours = value.hour;\n        let min = 0;\n        let max = 23;\n        if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {\n          let isPM = hours >= 12;\n          min = isPM ? 12 : 0;\n          max = isPM ? 23 : 11;\n        }\n        mutable.hour = $735220c2d4774dd3$var$cycleValue(hours, amount, min, max, options === null || options === void 0 ? void 0 : options.round);\n        break;\n      }\n    case \"minute\":\n      mutable.minute = $735220c2d4774dd3$var$cycleValue(value.minute, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);\n      break;\n    case \"second\":\n      mutable.second = $735220c2d4774dd3$var$cycleValue(value.second, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);\n      break;\n    case \"millisecond\":\n      mutable.millisecond = $735220c2d4774dd3$var$cycleValue(value.millisecond, amount, 0, 999, options === null || options === void 0 ? void 0 : options.round);\n      break;\n    default:\n      throw new Error(\"Unsupported field \" + field);\n  }\n  return mutable;\n}\nfunction $735220c2d4774dd3$var$cycleValue(value, amount, min, max, round = false) {\n  if (round) {\n    value += Math.sign(amount);\n    if (value < min) value = max;\n    let div = Math.abs(amount);\n    if (amount > 0) value = Math.ceil(value / div) * div;else value = Math.floor(value / div) * div;\n    if (value > max) value = min;\n  } else {\n    value += amount;\n    if (value < min) value = max - (min - value - 1);else if (value > max) value = min + (value - max - 1);\n  }\n  return value;\n}\nfunction $735220c2d4774dd3$export$96b1d28349274637(dateTime, duration) {\n  let ms;\n  if (duration.years != null && duration.years !== 0 || duration.months != null && duration.months !== 0 || duration.weeks != null && duration.weeks !== 0 || duration.days != null && duration.days !== 0) {\n    let res = $735220c2d4774dd3$export$e16d8520af44a096((0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime), {\n      years: duration.years,\n      months: duration.months,\n      weeks: duration.weeks,\n      days: duration.days\n    });\n    // Changing the date may change the timezone offset, so we need to recompute\n    // using the 'compatible' disambiguation.\n    ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(res, dateTime.timeZone);\n  } else\n    // Otherwise, preserve the offset of the original date.\n    ms = (0, $11d87f3f76e88657$export$bd4fb2bc8bb06fb)(dateTime) - dateTime.offset;\n  // Perform time manipulation in milliseconds rather than on the original time fields to account for DST.\n  // For example, adding one hour during a DST transition may result in the hour field staying the same or\n  // skipping an hour. This results in the offset field changing value instead of the specified field.\n  ms += duration.milliseconds || 0;\n  ms += (duration.seconds || 0) * 1000;\n  ms += (duration.minutes || 0) * 60000;\n  ms += (duration.hours || 0) * 3600000;\n  let res = (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone);\n  return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(res, dateTime.calendar);\n}\nfunction $735220c2d4774dd3$export$6814caac34ca03c7(dateTime, duration) {\n  return $735220c2d4774dd3$export$96b1d28349274637(dateTime, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));\n}\nfunction $735220c2d4774dd3$export$9a297d111fc86b79(dateTime, field, amount, options) {\n  // For date fields, we want the time to remain consistent and the UTC offset to potentially change to account for DST changes.\n  // For time fields, we want the time to change by the amount given. This may result in the hour field staying the same, but the UTC\n  // offset changing in the case of a backward DST transition, or skipping an hour in the case of a forward DST transition.\n  switch (field) {\n    case \"hour\":\n      {\n        let min = 0;\n        let max = 23;\n        if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {\n          let isPM = dateTime.hour >= 12;\n          min = isPM ? 12 : 0;\n          max = isPM ? 23 : 11;\n        }\n        // The minimum and maximum hour may be affected by daylight saving time.\n        // For example, it might jump forward at midnight, and skip 1am.\n        // Or it might end at midnight and repeat the 11pm hour. To handle this, we get\n        // the possible absolute times for the min and max, and find the maximum range\n        // that is within the current day.\n        let plainDateTime = (0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime);\n        let minDate = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {\n          hour: min\n        }), new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n        let minAbsolute = [(0, $11d87f3f76e88657$export$5107c82f94518f5c)(minDate, dateTime.timeZone, \"earlier\"), (0, $11d87f3f76e88657$export$5107c82f94518f5c)(minDate, dateTime.timeZone, \"later\")].filter(ms => (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone).day === minDate.day)[0];\n        let maxDate = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {\n          hour: max\n        }), new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n        let maxAbsolute = [(0, $11d87f3f76e88657$export$5107c82f94518f5c)(maxDate, dateTime.timeZone, \"earlier\"), (0, $11d87f3f76e88657$export$5107c82f94518f5c)(maxDate, dateTime.timeZone, \"later\")].filter(ms => (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone).day === maxDate.day).pop();\n        // Since hours may repeat, we need to operate on the absolute time in milliseconds.\n        // This is done in hours from the Unix epoch so that cycleValue works correctly,\n        // and then converted back to milliseconds.\n        let ms = (0, $11d87f3f76e88657$export$bd4fb2bc8bb06fb)(dateTime) - dateTime.offset;\n        let hours = Math.floor(ms / $735220c2d4774dd3$var$ONE_HOUR);\n        let remainder = ms % $735220c2d4774dd3$var$ONE_HOUR;\n        ms = $735220c2d4774dd3$var$cycleValue(hours, amount, Math.floor(minAbsolute / $735220c2d4774dd3$var$ONE_HOUR), Math.floor(maxAbsolute / $735220c2d4774dd3$var$ONE_HOUR), options === null || options === void 0 ? void 0 : options.round) * $735220c2d4774dd3$var$ONE_HOUR + remainder;\n        // Now compute the new timezone offset, and convert the absolute time back to local time.\n        return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);\n      }\n    case \"minute\":\n    case \"second\":\n    case \"millisecond\":\n      // @ts-ignore\n      return $735220c2d4774dd3$export$dd02b3e0007dfe28(dateTime, field, amount, options);\n    case \"era\":\n    case \"year\":\n    case \"month\":\n    case \"day\":\n      {\n        let res = $735220c2d4774dd3$export$d52ced6badfb9a4c((0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime), field, amount, options);\n        let ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(res, dateTime.timeZone);\n        return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);\n      }\n    default:\n      throw new Error(\"Unsupported field \" + field);\n  }\n}\nfunction $735220c2d4774dd3$export$31b5430eb18be4f8(dateTime, fields, disambiguation) {\n  // Set the date/time fields, and recompute the UTC offset to account for DST changes.\n  // We also need to validate by converting back to a local time in case hours are skipped during forward DST transitions.\n  let plainDateTime = (0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime);\n  let res = $735220c2d4774dd3$export$e5d5e1c1822b6e56($735220c2d4774dd3$export$adaa4cf7ef1b65be(plainDateTime, fields), fields);\n  // If the resulting plain date time values are equal, return the original time.\n  // We don't want to change the offset when setting the time to the same value.\n  if (res.compare(plainDateTime) === 0) return dateTime;\n  let ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(res, dateTime.timeZone, disambiguation);\n  return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $fae977aafc393c5c$var$TIME_RE = /^(\\d{2})(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst $fae977aafc393c5c$var$DATE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})$/;\nconst $fae977aafc393c5c$var$DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst $fae977aafc393c5c$var$ZONED_DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:([+-]\\d{2})(?::?(\\d{2}))?)?\\[(.*?)\\]$/;\nconst $fae977aafc393c5c$var$ABSOLUTE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:(?:([+-]\\d{2})(?::?(\\d{2}))?)|Z)$/;\nconst $fae977aafc393c5c$var$DATE_TIME_DURATION_RE = /^((?<negative>-)|\\+)?P((?<years>\\d*)Y)?((?<months>\\d*)M)?((?<weeks>\\d*)W)?((?<days>\\d*)D)?((?<time>T)((?<hours>\\d*[.,]?\\d{1,9})H)?((?<minutes>\\d*[.,]?\\d{1,9})M)?((?<seconds>\\d*[.,]?\\d{1,9})S)?)?$/;\nconst $fae977aafc393c5c$var$requiredDurationTimeGroups = [\"hours\", \"minutes\", \"seconds\"];\nconst $fae977aafc393c5c$var$requiredDurationGroups = [\"years\", \"months\", \"weeks\", \"days\", ...$fae977aafc393c5c$var$requiredDurationTimeGroups];\nfunction $fae977aafc393c5c$export$c9698ec7f05a07e1(value) {\n  let m = value.match($fae977aafc393c5c$var$TIME_RE);\n  if (!m) throw new Error(\"Invalid ISO 8601 time string: \" + value);\n  return new (0, $35ea8db9cb2ccb90$export$680ea196effce5f)($fae977aafc393c5c$var$parseNumber(m[1], 0, 23), m[2] ? $fae977aafc393c5c$var$parseNumber(m[2], 0, 59) : 0, m[3] ? $fae977aafc393c5c$var$parseNumber(m[3], 0, 59) : 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, Infinity) * 1000 : 0);\n}\nfunction $fae977aafc393c5c$export$6b862160d295c8e(value) {\n  let m = value.match($fae977aafc393c5c$var$DATE_RE);\n  if (!m) throw new Error(\"Invalid ISO 8601 date string: \" + value);\n  let date = new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)($fae977aafc393c5c$var$parseNumber(m[1], 0, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date;\n}\nfunction $fae977aafc393c5c$export$588937bcd60ade55(value) {\n  let m = value.match($fae977aafc393c5c$var$DATE_TIME_RE);\n  if (!m) throw new Error(\"Invalid ISO 8601 date time string: \" + value);\n  let date = new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date;\n}\nfunction $fae977aafc393c5c$export$fd7893f06e92a6a4(value, disambiguation) {\n  let m = value.match($fae977aafc393c5c$var$ZONED_DATE_TIME_RE);\n  if (!m) throw new Error(\"Invalid ISO 8601 date time string: \" + value);\n  let date = new (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, m[10], 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  let plainDateTime = (0, $11d87f3f76e88657$export$b21e0b124e224484)(date);\n  let ms;\n  if (m[8]) {\n    var _m_;\n    date.offset = $fae977aafc393c5c$var$parseNumber(m[8], -23, 23) * 3600000 + $fae977aafc393c5c$var$parseNumber((_m_ = m[9]) !== null && _m_ !== void 0 ? _m_ : \"0\", 0, 59) * 60000;\n    ms = (0, $11d87f3f76e88657$export$bd4fb2bc8bb06fb)(date) - date.offset;\n    // Validate offset against parsed date.\n    let absolutes = (0, $11d87f3f76e88657$export$136f38efe7caf549)(plainDateTime, date.timeZone);\n    if (!absolutes.includes(ms)) throw new Error(`Offset ${$fae977aafc393c5c$var$offsetToString(date.offset)} is invalid for ${$fae977aafc393c5c$export$4223de14708adc63(date)} in ${date.timeZone}`);\n  } else\n    // Convert to absolute and back to fix invalid times due to DST.\n    ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)((0, $11d87f3f76e88657$export$b21e0b124e224484)(plainDateTime), date.timeZone, disambiguation);\n  return (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, date.timeZone);\n}\nfunction $fae977aafc393c5c$export$5adfdab05168c219(value, timeZone) {\n  let m = value.match($fae977aafc393c5c$var$ABSOLUTE_RE);\n  if (!m) throw new Error(\"Invalid ISO 8601 date time string: \" + value);\n  let date = new (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, timeZone, 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  var _m_;\n  if (m[8]) date.offset = $fae977aafc393c5c$var$parseNumber(m[8], -23, 23) * 3600000 + $fae977aafc393c5c$var$parseNumber((_m_ = m[9]) !== null && _m_ !== void 0 ? _m_ : \"0\", 0, 59) * 60000;\n  return (0, $11d87f3f76e88657$export$538b00033cc11c75)(date, timeZone);\n}\nfunction $fae977aafc393c5c$export$8e384432362ed0f0(value) {\n  return $fae977aafc393c5c$export$5adfdab05168c219(value, (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)());\n}\nfunction $fae977aafc393c5c$var$parseNumber(value, min, max) {\n  let val = Number(value);\n  if (val < min || val > max) throw new RangeError(`Value out of range: ${min} <= ${val} <= ${max}`);\n  return val;\n}\nfunction $fae977aafc393c5c$export$f59dee82248f5ad4(time) {\n  return `${String(time.hour).padStart(2, \"0\")}:${String(time.minute).padStart(2, \"0\")}:${String(time.second).padStart(2, \"0\")}${time.millisecond ? String(time.millisecond / 1000).slice(1) : \"\"}`;\n}\nfunction $fae977aafc393c5c$export$60dfd74aa96791bd(date) {\n  let gregorianDate = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(date, new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n  return `${String(gregorianDate.year).padStart(4, \"0\")}-${String(gregorianDate.month).padStart(2, \"0\")}-${String(gregorianDate.day).padStart(2, \"0\")}`;\n}\nfunction $fae977aafc393c5c$export$4223de14708adc63(date) {\n  // @ts-ignore\n  return `${$fae977aafc393c5c$export$60dfd74aa96791bd(date)}T${$fae977aafc393c5c$export$f59dee82248f5ad4(date)}`;\n}\nfunction $fae977aafc393c5c$var$offsetToString(offset) {\n  let sign = Math.sign(offset) < 0 ? \"-\" : \"+\";\n  offset = Math.abs(offset);\n  let offsetHours = Math.floor(offset / 3600000);\n  let offsetMinutes = offset % 3600000 / 60000;\n  return `${sign}${String(offsetHours).padStart(2, \"0\")}:${String(offsetMinutes).padStart(2, \"0\")}`;\n}\nfunction $fae977aafc393c5c$export$bf79f1ebf4b18792(date) {\n  return `${$fae977aafc393c5c$export$4223de14708adc63(date)}${$fae977aafc393c5c$var$offsetToString(date.offset)}[${date.timeZone}]`;\n}\nfunction $fae977aafc393c5c$export$ecae829bb3747ea6(value) {\n  var _match_groups, _match_groups1, _match_groups2, _match_groups3, _match_groups4, _match_groups5, _match_groups6, _match_groups7, _match_groups8;\n  const match = value.match($fae977aafc393c5c$var$DATE_TIME_DURATION_RE);\n  if (!match) throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n  const parseDurationGroup = (group, isNegative, min, max) => {\n    if (!group) return 0;\n    try {\n      const sign = isNegative ? -1 : 1;\n      return sign * $fae977aafc393c5c$var$parseNumber(group.replace(\",\", \".\"), min, max);\n    } catch {\n      throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n    }\n  };\n  const isNegative = !!((_match_groups = match.groups) === null || _match_groups === void 0 ? void 0 : _match_groups.negative);\n  const hasRequiredGroups = $fae977aafc393c5c$var$requiredDurationGroups.some(group => {\n    var _match_groups;\n    return (_match_groups = match.groups) === null || _match_groups === void 0 ? void 0 : _match_groups[group];\n  });\n  if (!hasRequiredGroups) throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n  const durationStringIncludesTime = (_match_groups1 = match.groups) === null || _match_groups1 === void 0 ? void 0 : _match_groups1.time;\n  if (durationStringIncludesTime) {\n    const hasRequiredDurationTimeGroups = $fae977aafc393c5c$var$requiredDurationTimeGroups.some(group => {\n      var _match_groups;\n      return (_match_groups = match.groups) === null || _match_groups === void 0 ? void 0 : _match_groups[group];\n    });\n    if (!hasRequiredDurationTimeGroups) throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n  }\n  const duration = {\n    years: parseDurationGroup((_match_groups2 = match.groups) === null || _match_groups2 === void 0 ? void 0 : _match_groups2.years, isNegative, 0, 9999),\n    months: parseDurationGroup((_match_groups3 = match.groups) === null || _match_groups3 === void 0 ? void 0 : _match_groups3.months, isNegative, 0, 12),\n    weeks: parseDurationGroup((_match_groups4 = match.groups) === null || _match_groups4 === void 0 ? void 0 : _match_groups4.weeks, isNegative, 0, Infinity),\n    days: parseDurationGroup((_match_groups5 = match.groups) === null || _match_groups5 === void 0 ? void 0 : _match_groups5.days, isNegative, 0, 31),\n    hours: parseDurationGroup((_match_groups6 = match.groups) === null || _match_groups6 === void 0 ? void 0 : _match_groups6.hours, isNegative, 0, 23),\n    minutes: parseDurationGroup((_match_groups7 = match.groups) === null || _match_groups7 === void 0 ? void 0 : _match_groups7.minutes, isNegative, 0, 59),\n    seconds: parseDurationGroup((_match_groups8 = match.groups) === null || _match_groups8 === void 0 ? void 0 : _match_groups8.seconds, isNegative, 0, 59)\n  };\n  if (duration.hours % 1 !== 0 && (duration.minutes || duration.seconds)) throw new Error(`Invalid ISO 8601 Duration string: ${value} - only the smallest unit can be fractional`);\n  if (duration.minutes % 1 !== 0 && duration.seconds) throw new Error(`Invalid ISO 8601 Duration string: ${value} - only the smallest unit can be fractional`);\n  return duration;\n}\nfunction $35ea8db9cb2ccb90$var$shiftArgs(args) {\n  let calendar = typeof args[0] === \"object\" ? args.shift() : new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)();\n  let era;\n  if (typeof args[0] === \"string\") era = args.shift();else {\n    let eras = calendar.getEras();\n    era = eras[eras.length - 1];\n  }\n  let year = args.shift();\n  let month = args.shift();\n  let day = args.shift();\n  return [calendar, era, year, month, day];\n}\nvar\n// This prevents TypeScript from allowing other types with the same fields to match.\n// i.e. a ZonedDateTime should not be be passable to a parameter that expects CalendarDate.\n// If that behavior is desired, use the AnyCalendarDate interface instead.\n// @ts-ignore\n$35ea8db9cb2ccb90$var$_type = /*#__PURE__*/new WeakMap();\nclass $35ea8db9cb2ccb90$export$99faa760c7908e4f {\n  /** Returns a copy of this date. */copy() {\n    if (this.era) return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.era, this.year, this.month, this.day);else return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.year, this.month, this.day);\n  }\n  /** Returns a new `CalendarDate` with the given duration added to it. */\n  add(duration) {\n    return (0, $735220c2d4774dd3$export$e16d8520af44a096)(this, duration);\n  }\n  /** Returns a new `CalendarDate` with the given duration subtracted from it. */\n  subtract(duration) {\n    return (0, $735220c2d4774dd3$export$4e2d2ead65e5f7e3)(this, duration);\n  }\n  /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields) {\n    return (0, $735220c2d4774dd3$export$adaa4cf7ef1b65be)(this, fields);\n  }\n  /**\n  * Returns a new `CalendarDate` with the given field adjusted by a specified amount.\n  * When the resulting value reaches the limits of the field, it wraps around.\n  */\n  cycle(field, amount, options) {\n    return (0, $735220c2d4774dd3$export$d52ced6badfb9a4c)(this, field, amount, options);\n  }\n  /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */\n  toDate(timeZone) {\n    return (0, $11d87f3f76e88657$export$e67a095c620b86fe)(this, timeZone);\n  }\n  /** Converts the date to an ISO 8601 formatted string. */\n  toString() {\n    return (0, $fae977aafc393c5c$export$60dfd74aa96791bd)(this);\n  }\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b) {\n    return (0, $14e0f24ef4ac5c92$export$68781ddf31c0090f)(this, b);\n  }\n  constructor(...args) {\n    (0, $cUVuN$_)(this, $35ea8db9cb2ccb90$var$_type, {\n      writable: true,\n      value: void 0\n    });\n    let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(this);\n  }\n}\nvar\n// This prevents TypeScript from allowing other types with the same fields to match.\n// @ts-ignore\n$35ea8db9cb2ccb90$var$_type1 = /*#__PURE__*/new WeakMap();\nclass $35ea8db9cb2ccb90$export$680ea196effce5f {\n  /** Returns a copy of this time. */copy() {\n    return new $35ea8db9cb2ccb90$export$680ea196effce5f(this.hour, this.minute, this.second, this.millisecond);\n  }\n  /** Returns a new `Time` with the given duration added to it. */\n  add(duration) {\n    return (0, $735220c2d4774dd3$export$7ed87b6bc2506470)(this, duration);\n  }\n  /** Returns a new `Time` with the given duration subtracted from it. */\n  subtract(duration) {\n    return (0, $735220c2d4774dd3$export$fe34d3a381cd7501)(this, duration);\n  }\n  /** Returns a new `Time` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields) {\n    return (0, $735220c2d4774dd3$export$e5d5e1c1822b6e56)(this, fields);\n  }\n  /**\n  * Returns a new `Time` with the given field adjusted by a specified amount.\n  * When the resulting value reaches the limits of the field, it wraps around.\n  */\n  cycle(field, amount, options) {\n    return (0, $735220c2d4774dd3$export$dd02b3e0007dfe28)(this, field, amount, options);\n  }\n  /** Converts the time to an ISO 8601 formatted string. */\n  toString() {\n    return (0, $fae977aafc393c5c$export$f59dee82248f5ad4)(this);\n  }\n  /** Compares this time with another. A negative result indicates that this time is before the given one, and a positive time indicates that it is after. */\n  compare(b) {\n    return (0, $14e0f24ef4ac5c92$export$c19a80a9721b80f6)(this, b);\n  }\n  constructor(hour = 0, minute = 0, second = 0, millisecond = 0) {\n    (0, $cUVuN$_)(this, $35ea8db9cb2ccb90$var$_type1, {\n      writable: true,\n      value: void 0\n    });\n    this.hour = hour;\n    this.minute = minute;\n    this.second = second;\n    this.millisecond = millisecond;\n    (0, $735220c2d4774dd3$export$7555de1e070510cb)(this);\n  }\n}\nvar\n// This prevents TypeScript from allowing other types with the same fields to match.\n// @ts-ignore\n$35ea8db9cb2ccb90$var$_type2 = /*#__PURE__*/new WeakMap();\nclass $35ea8db9cb2ccb90$export$ca871e8dbb80966f {\n  /** Returns a copy of this date. */copy() {\n    if (this.era) return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);else return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n  }\n  /** Returns a new `CalendarDateTime` with the given duration added to it. */\n  add(duration) {\n    return (0, $735220c2d4774dd3$export$e16d8520af44a096)(this, duration);\n  }\n  /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */\n  subtract(duration) {\n    return (0, $735220c2d4774dd3$export$4e2d2ead65e5f7e3)(this, duration);\n  }\n  /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields) {\n    return (0, $735220c2d4774dd3$export$adaa4cf7ef1b65be)((0, $735220c2d4774dd3$export$e5d5e1c1822b6e56)(this, fields), fields);\n  }\n  /**\n  * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.\n  * When the resulting value reaches the limits of the field, it wraps around.\n  */\n  cycle(field, amount, options) {\n    switch (field) {\n      case \"era\":\n      case \"year\":\n      case \"month\":\n      case \"day\":\n        return (0, $735220c2d4774dd3$export$d52ced6badfb9a4c)(this, field, amount, options);\n      default:\n        return (0, $735220c2d4774dd3$export$dd02b3e0007dfe28)(this, field, amount, options);\n    }\n  }\n  /** Converts the date to a native JavaScript Date object in the given time zone. */\n  toDate(timeZone, disambiguation) {\n    return (0, $11d87f3f76e88657$export$e67a095c620b86fe)(this, timeZone, disambiguation);\n  }\n  /** Converts the date to an ISO 8601 formatted string. */\n  toString() {\n    return (0, $fae977aafc393c5c$export$4223de14708adc63)(this);\n  }\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b) {\n    let res = (0, $14e0f24ef4ac5c92$export$68781ddf31c0090f)(this, b);\n    if (res === 0) return (0, $14e0f24ef4ac5c92$export$c19a80a9721b80f6)(this, (0, $11d87f3f76e88657$export$b21e0b124e224484)(b));\n    return res;\n  }\n  constructor(...args) {\n    (0, $cUVuN$_)(this, $35ea8db9cb2ccb90$var$_type2, {\n      writable: true,\n      value: void 0\n    });\n    let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n    (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(this);\n  }\n}\nvar\n// This prevents TypeScript from allowing other types with the same fields to match.\n// @ts-ignore\n$35ea8db9cb2ccb90$var$_type3 = /*#__PURE__*/new WeakMap();\nclass $35ea8db9cb2ccb90$export$d3b7288e7994edea {\n  /** Returns a copy of this date. */copy() {\n    if (this.era) return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);else return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n  }\n  /** Returns a new `ZonedDateTime` with the given duration added to it. */\n  add(duration) {\n    return (0, $735220c2d4774dd3$export$96b1d28349274637)(this, duration);\n  }\n  /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */\n  subtract(duration) {\n    return (0, $735220c2d4774dd3$export$6814caac34ca03c7)(this, duration);\n  }\n  /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields, disambiguation) {\n    return (0, $735220c2d4774dd3$export$31b5430eb18be4f8)(this, fields, disambiguation);\n  }\n  /**\n  * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.\n  * When the resulting value reaches the limits of the field, it wraps around.\n  */\n  cycle(field, amount, options) {\n    return (0, $735220c2d4774dd3$export$9a297d111fc86b79)(this, field, amount, options);\n  }\n  /** Converts the date to a native JavaScript Date object. */\n  toDate() {\n    return (0, $11d87f3f76e88657$export$83aac07b4c37b25)(this);\n  }\n  /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */\n  toString() {\n    return (0, $fae977aafc393c5c$export$bf79f1ebf4b18792)(this);\n  }\n  /** Converts the date to an ISO 8601 formatted string in UTC. */\n  toAbsoluteString() {\n    return this.toDate().toISOString();\n  }\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b) {\n    // TODO: Is this a bad idea??\n    return this.toDate().getTime() - (0, $11d87f3f76e88657$export$84c95a83c799e074)(b, this.timeZone).toDate().getTime();\n  }\n  constructor(...args) {\n    (0, $cUVuN$_)(this, $35ea8db9cb2ccb90$var$_type3, {\n      writable: true,\n      value: void 0\n    });\n    let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);\n    let timeZone = args.shift();\n    let offset = args.shift();\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.timeZone = timeZone;\n    this.offset = offset;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n    (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(this);\n  }\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nconst $62225008020f0a13$var$ERA_START_DATES = [[1868, 9, 8], [1912, 7, 30], [1926, 12, 25], [1989, 1, 8], [2019, 5, 1]];\nconst $62225008020f0a13$var$ERA_END_DATES = [[1912, 7, 29], [1926, 12, 24], [1989, 1, 7], [2019, 4, 30]];\nconst $62225008020f0a13$var$ERA_ADDENDS = [1867, 1911, 1925, 1988, 2018];\nconst $62225008020f0a13$var$ERA_NAMES = [\"meiji\", \"taisho\", \"showa\", \"heisei\", \"reiwa\"];\nfunction $62225008020f0a13$var$findEraFromGregorianDate(date) {\n  const idx = $62225008020f0a13$var$ERA_START_DATES.findIndex(([year, month, day]) => {\n    if (date.year < year) return true;\n    if (date.year === year && date.month < month) return true;\n    if (date.year === year && date.month === month && date.day < day) return true;\n    return false;\n  });\n  if (idx === -1) return $62225008020f0a13$var$ERA_START_DATES.length - 1;\n  if (idx === 0) return 0;\n  return idx - 1;\n}\nfunction $62225008020f0a13$var$toGregorian(date) {\n  let eraAddend = $62225008020f0a13$var$ERA_ADDENDS[$62225008020f0a13$var$ERA_NAMES.indexOf(date.era)];\n  if (!eraAddend) throw new Error(\"Unknown era: \" + date.era);\n  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(date.year + eraAddend, date.month, date.day);\n}\nclass $62225008020f0a13$export$b746ab2b60cdffbf extends (0, $3b62074eb05584b2$export$80ee6245ec4f29ec) {\n  fromJulianDay(jd) {\n    let date = super.fromJulianDay(jd);\n    let era = $62225008020f0a13$var$findEraFromGregorianDate(date);\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, $62225008020f0a13$var$ERA_NAMES[era], date.year - $62225008020f0a13$var$ERA_ADDENDS[era], date.month, date.day);\n  }\n  toJulianDay(date) {\n    return super.toJulianDay($62225008020f0a13$var$toGregorian(date));\n  }\n  balanceDate(date) {\n    let gregorianDate = $62225008020f0a13$var$toGregorian(date);\n    let era = $62225008020f0a13$var$findEraFromGregorianDate(gregorianDate);\n    if ($62225008020f0a13$var$ERA_NAMES[era] !== date.era) {\n      date.era = $62225008020f0a13$var$ERA_NAMES[era];\n      date.year = gregorianDate.year - $62225008020f0a13$var$ERA_ADDENDS[era];\n    }\n    // Constrain in case we went before the first supported era.\n    this.constrainDate(date);\n  }\n  constrainDate(date) {\n    let idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);\n    let end = $62225008020f0a13$var$ERA_END_DATES[idx];\n    if (end != null) {\n      let [endYear, endMonth, endDay] = end;\n      // Constrain the year to the maximum possible value in the era.\n      // Then constrain the month and day fields within that.\n      let maxYear = endYear - $62225008020f0a13$var$ERA_ADDENDS[idx];\n      date.year = Math.max(1, Math.min(maxYear, date.year));\n      if (date.year === maxYear) {\n        date.month = Math.min(endMonth, date.month);\n        if (date.month === endMonth) date.day = Math.min(endDay, date.day);\n      }\n    }\n    if (date.year === 1 && idx >= 0) {\n      let [, startMonth, startDay] = $62225008020f0a13$var$ERA_START_DATES[idx];\n      date.month = Math.max(startMonth, date.month);\n      if (date.month === startMonth) date.day = Math.max(startDay, date.day);\n    }\n  }\n  getEras() {\n    return $62225008020f0a13$var$ERA_NAMES;\n  }\n  getYearsInEra(date) {\n    // Get the number of years in the era, taking into account the date's month and day fields.\n    let era = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);\n    let cur = $62225008020f0a13$var$ERA_START_DATES[era];\n    let next = $62225008020f0a13$var$ERA_START_DATES[era + 1];\n    if (next == null)\n      // 9999 gregorian is the maximum year allowed.\n      return 9999 - cur[0] + 1;\n    let years = next[0] - cur[0];\n    if (date.month < next[1] || date.month === next[1] && date.day < next[2]) years++;\n    return years;\n  }\n  getDaysInMonth(date) {\n    return super.getDaysInMonth($62225008020f0a13$var$toGregorian(date));\n  }\n  getMinimumMonthInYear(date) {\n    let start = $62225008020f0a13$var$getMinimums(date);\n    return start ? start[1] : 1;\n  }\n  getMinimumDayInMonth(date) {\n    let start = $62225008020f0a13$var$getMinimums(date);\n    return start && date.month === start[1] ? start[2] : 1;\n  }\n  constructor(...args) {\n    super(...args);\n    this.identifier = \"japanese\";\n  }\n}\nfunction $62225008020f0a13$var$getMinimums(date) {\n  if (date.year === 1) {\n    let idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);\n    return $62225008020f0a13$var$ERA_START_DATES[idx];\n  }\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nconst $8d73d47422ca7302$var$BUDDHIST_ERA_START = -543;\nclass $8d73d47422ca7302$export$42d20a78301dee44 extends (0, $3b62074eb05584b2$export$80ee6245ec4f29ec) {\n  fromJulianDay(jd) {\n    let gregorianDate = super.fromJulianDay(jd);\n    let year = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(gregorianDate.era, gregorianDate.year);\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year - $8d73d47422ca7302$var$BUDDHIST_ERA_START, gregorianDate.month, gregorianDate.day);\n  }\n  toJulianDay(date) {\n    return super.toJulianDay($8d73d47422ca7302$var$toGregorian(date));\n  }\n  getEras() {\n    return [\"BE\"];\n  }\n  getDaysInMonth(date) {\n    return super.getDaysInMonth($8d73d47422ca7302$var$toGregorian(date));\n  }\n  balanceDate() {}\n  constructor(...args) {\n    super(...args);\n    this.identifier = \"buddhist\";\n  }\n}\nfunction $8d73d47422ca7302$var$toGregorian(date) {\n  let [era, year] = (0, $3b62074eb05584b2$export$4475b7e617eb123c)(date.year + $8d73d47422ca7302$var$BUDDHIST_ERA_START);\n  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, date.month, date.day);\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nconst $5f31bd6f0c8940b2$var$TAIWAN_ERA_START = 1911;\nfunction $5f31bd6f0c8940b2$var$gregorianYear(date) {\n  return date.era === \"minguo\" ? date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START : 1 - date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;\n}\nfunction $5f31bd6f0c8940b2$var$gregorianToTaiwan(year) {\n  let y = year - $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;\n  if (y > 0) return [\"minguo\", y];else return [\"before_minguo\", 1 - y];\n}\nclass $5f31bd6f0c8940b2$export$65e01080afcb0799 extends (0, $3b62074eb05584b2$export$80ee6245ec4f29ec) {\n  fromJulianDay(jd) {\n    let date = super.fromJulianDay(jd);\n    let extendedYear = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(date.era, date.year);\n    let [era, year] = $5f31bd6f0c8940b2$var$gregorianToTaiwan(extendedYear);\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, date.month, date.day);\n  }\n  toJulianDay(date) {\n    return super.toJulianDay($5f31bd6f0c8940b2$var$toGregorian(date));\n  }\n  getEras() {\n    return [\"before_minguo\", \"minguo\"];\n  }\n  balanceDate(date) {\n    let [era, year] = $5f31bd6f0c8940b2$var$gregorianToTaiwan($5f31bd6f0c8940b2$var$gregorianYear(date));\n    date.era = era;\n    date.year = year;\n  }\n  isInverseEra(date) {\n    return date.era === \"before_minguo\";\n  }\n  getDaysInMonth(date) {\n    return super.getDaysInMonth($5f31bd6f0c8940b2$var$toGregorian(date));\n  }\n  getYearsInEra(date) {\n    return date.era === \"before_minguo\" ? 9999 : 9999 - $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;\n  }\n  constructor(...args) {\n    super(...args);\n    this.identifier = \"roc\" // Republic of China\n    ;\n  }\n}\n\nfunction $5f31bd6f0c8940b2$var$toGregorian(date) {\n  let [era, year] = (0, $3b62074eb05584b2$export$4475b7e617eb123c)($5f31bd6f0c8940b2$var$gregorianYear(date));\n  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, date.month, date.day);\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nconst $f3ed2e4472ae7e25$var$PERSIAN_EPOCH = 1948321; // 622/03/19 Julian C.E.\nfunction $f3ed2e4472ae7e25$var$isLeapYear(year) {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(y0, 2820) + 474;\n  return (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)((y1 + 38) * 31, 128) < 31;\n}\nfunction $f3ed2e4472ae7e25$var$persianToJulianDay(year, month, day) {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(y0, 2820) + 474;\n  let offset = month <= 7 ? 31 * (month - 1) : 30 * (month - 1) + 6;\n  return $f3ed2e4472ae7e25$var$PERSIAN_EPOCH - 1 + 1029983 * Math.floor(y0 / 2820) + 365 * (y1 - 1) + Math.floor((31 * y1 - 5) / 128) + offset + day;\n}\nclass $f3ed2e4472ae7e25$export$37fccdbfd14c5939 {\n  fromJulianDay(jd) {\n    let d0 = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(475, 1, 1);\n    let n2820 = Math.floor(d0 / 1029983);\n    let d1 = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(d0, 1029983);\n    let y2820 = d1 === 1029982 ? 2820 : Math.floor((128 * d1 + 46878) / 46751);\n    let year = 474 + 2820 * n2820 + y2820;\n    if (year <= 0) year--;\n    let yDay = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(year, 1, 1) + 1;\n    let month = yDay <= 186 ? Math.ceil(yDay / 31) : Math.ceil((yDay - 6) / 31);\n    let day = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(year, month, 1) + 1;\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year, month, day);\n  }\n  toJulianDay(date) {\n    return $f3ed2e4472ae7e25$var$persianToJulianDay(date.year, date.month, date.day);\n  }\n  getMonthsInYear() {\n    return 12;\n  }\n  getDaysInMonth(date) {\n    if (date.month <= 6) return 31;\n    if (date.month <= 11) return 30;\n    return $f3ed2e4472ae7e25$var$isLeapYear(date.year) ? 30 : 29;\n  }\n  getEras() {\n    return [\"AP\"];\n  }\n  getYearsInEra() {\n    // 9378-10-10 persian is 9999-12-31 gregorian.\n    // Round down to 9377 to set the maximum full year.\n    return 9377;\n  }\n  constructor() {\n    this.identifier = \"persian\";\n  }\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n// Starts in 78 AD,\nconst $82c358003bdda0a8$var$INDIAN_ERA_START = 78;\n// The Indian year starts 80 days later than the Gregorian year.\nconst $82c358003bdda0a8$var$INDIAN_YEAR_START = 80;\nclass $82c358003bdda0a8$export$39f31c639fa15726 extends (0, $3b62074eb05584b2$export$80ee6245ec4f29ec) {\n  fromJulianDay(jd) {\n    // Gregorian date for Julian day\n    let date = super.fromJulianDay(jd);\n    // Year in Saka era\n    let indianYear = date.year - $82c358003bdda0a8$var$INDIAN_ERA_START;\n    // Day number in Gregorian year (starting from 0)\n    let yDay = jd - (0, $3b62074eb05584b2$export$f297eb839006d339)(date.era, date.year, 1, 1);\n    let leapMonth;\n    if (yDay < $82c358003bdda0a8$var$INDIAN_YEAR_START) {\n      //  Day is at the end of the preceding Saka year\n      indianYear--;\n      // Days in leapMonth this year, previous Gregorian year\n      leapMonth = (0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(date.year - 1) ? 31 : 30;\n      yDay += leapMonth + 155 + 90 + 10;\n    } else {\n      // Days in leapMonth this year\n      leapMonth = (0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(date.year) ? 31 : 30;\n      yDay -= $82c358003bdda0a8$var$INDIAN_YEAR_START;\n    }\n    let indianMonth;\n    let indianDay;\n    if (yDay < leapMonth) {\n      indianMonth = 1;\n      indianDay = yDay + 1;\n    } else {\n      let mDay = yDay - leapMonth;\n      if (mDay < 155) {\n        indianMonth = Math.floor(mDay / 31) + 2;\n        indianDay = mDay % 31 + 1;\n      } else {\n        mDay -= 155;\n        indianMonth = Math.floor(mDay / 30) + 7;\n        indianDay = mDay % 30 + 1;\n      }\n    }\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, indianYear, indianMonth, indianDay);\n  }\n  toJulianDay(date) {\n    let extendedYear = date.year + $82c358003bdda0a8$var$INDIAN_ERA_START;\n    let [era, year] = (0, $3b62074eb05584b2$export$4475b7e617eb123c)(extendedYear);\n    let leapMonth;\n    let jd;\n    if ((0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(year)) {\n      leapMonth = 31;\n      jd = (0, $3b62074eb05584b2$export$f297eb839006d339)(era, year, 3, 21);\n    } else {\n      leapMonth = 30;\n      jd = (0, $3b62074eb05584b2$export$f297eb839006d339)(era, year, 3, 22);\n    }\n    if (date.month === 1) return jd + date.day - 1;\n    jd += leapMonth + Math.min(date.month - 2, 5) * 31;\n    if (date.month >= 8) jd += (date.month - 7) * 30;\n    jd += date.day - 1;\n    return jd;\n  }\n  getDaysInMonth(date) {\n    if (date.month === 1 && (0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(date.year + $82c358003bdda0a8$var$INDIAN_ERA_START)) return 31;\n    if (date.month >= 2 && date.month <= 6) return 31;\n    return 30;\n  }\n  getYearsInEra() {\n    // 9999-12-31 gregorian is 9920-10-10 indian.\n    // Round down to 9919 for the last full year.\n    return 9919;\n  }\n  getEras() {\n    return [\"saka\"];\n  }\n  balanceDate() {}\n  constructor(...args) {\n    super(...args);\n    this.identifier = \"indian\";\n  }\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nconst $f2f3e0e3a817edbd$var$CIVIL_EPOC = 1948440; // CE 622 July 16 Friday (Julian calendar) / CE 622 July 19 (Gregorian calendar)\nconst $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC = 1948439; // CE 622 July 15 Thursday (Julian calendar)\nconst $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START = 1300;\nconst $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END = 1600;\nconst $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS = 460322;\nfunction $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, day) {\n  return day + Math.ceil(29.5 * (month - 1)) + (year - 1) * 354 + Math.floor((3 + 11 * year) / 30) + epoch - 1;\n}\nfunction $f2f3e0e3a817edbd$var$julianDayToIslamic(calendar, epoch, jd) {\n  let year = Math.floor((30 * (jd - epoch) + 10646) / 10631);\n  let month = Math.min(12, Math.ceil((jd - (29 + $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);\n  let day = jd - $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, 1) + 1;\n  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(calendar, year, month, day);\n}\nfunction $f2f3e0e3a817edbd$var$isLeapYear(year) {\n  return (14 + 11 * year) % 30 < 11;\n}\nclass $f2f3e0e3a817edbd$export$2066795aadd37bfc {\n  fromJulianDay(jd) {\n    return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$CIVIL_EPOC, jd);\n  }\n  toJulianDay(date) {\n    return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$CIVIL_EPOC, date.year, date.month, date.day);\n  }\n  getDaysInMonth(date) {\n    let length = 29 + date.month % 2;\n    if (date.month === 12 && $f2f3e0e3a817edbd$var$isLeapYear(date.year)) length++;\n    return length;\n  }\n  getMonthsInYear() {\n    return 12;\n  }\n  getDaysInYear(date) {\n    return $f2f3e0e3a817edbd$var$isLeapYear(date.year) ? 355 : 354;\n  }\n  getYearsInEra() {\n    // 9999 gregorian\n    return 9665;\n  }\n  getEras() {\n    return [\"AH\"];\n  }\n  constructor() {\n    this.identifier = \"islamic-civil\";\n  }\n}\nclass $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 extends $f2f3e0e3a817edbd$export$2066795aadd37bfc {\n  fromJulianDay(jd) {\n    return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, jd);\n  }\n  toJulianDay(date) {\n    return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, date.year, date.month, date.day);\n  }\n  constructor(...args) {\n    super(...args);\n    this.identifier = \"islamic-tbla\";\n  }\n}\n// Generated by scripts/generate-umalqura.js\nconst $f2f3e0e3a817edbd$var$UMALQURA_DATA = \"qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=\";\nlet $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH;\nlet $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE;\nfunction $f2f3e0e3a817edbd$var$umalquraYearStart(year) {\n  return $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS + $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];\n}\nfunction $f2f3e0e3a817edbd$var$umalquraMonthLength(year, month) {\n  let idx = year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START;\n  let mask = 0x01 << 11 - (month - 1);\n  if (($f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH[idx] & mask) === 0) return 29;else return 30;\n}\nfunction $f2f3e0e3a817edbd$var$umalquraMonthStart(year, month) {\n  let day = $f2f3e0e3a817edbd$var$umalquraYearStart(year);\n  for (let i = 1; i < month; i++) day += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);\n  return day;\n}\nfunction $f2f3e0e3a817edbd$var$umalquraYearLength(year) {\n  return $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year + 1 - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];\n}\nclass $f2f3e0e3a817edbd$export$5baab4758c231076 extends $f2f3e0e3a817edbd$export$2066795aadd37bfc {\n  fromJulianDay(jd) {\n    let days = jd - $f2f3e0e3a817edbd$var$CIVIL_EPOC;\n    let startDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_START);\n    let endDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END);\n    if (days < startDays || days > endDays) return super.fromJulianDay(jd);else {\n      let y = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START - 1;\n      let m = 1;\n      let d = 1;\n      while (d > 0) {\n        y++;\n        d = days - $f2f3e0e3a817edbd$var$umalquraYearStart(y) + 1;\n        let yearLength = $f2f3e0e3a817edbd$var$umalquraYearLength(y);\n        if (d === yearLength) {\n          m = 12;\n          break;\n        } else if (d < yearLength) {\n          let monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);\n          m = 1;\n          while (d > monthLength) {\n            d -= monthLength;\n            m++;\n            monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);\n          }\n          break;\n        }\n      }\n      return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, y, m, days - $f2f3e0e3a817edbd$var$umalquraMonthStart(y, m) + 1);\n    }\n  }\n  toJulianDay(date) {\n    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.toJulianDay(date);\n    return $f2f3e0e3a817edbd$var$CIVIL_EPOC + $f2f3e0e3a817edbd$var$umalquraMonthStart(date.year, date.month) + (date.day - 1);\n  }\n  getDaysInMonth(date) {\n    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.getDaysInMonth(date);\n    return $f2f3e0e3a817edbd$var$umalquraMonthLength(date.year, date.month);\n  }\n  getDaysInYear(date) {\n    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.getDaysInYear(date);\n    return $f2f3e0e3a817edbd$var$umalquraYearLength(date.year);\n  }\n  constructor() {\n    super();\n    this.identifier = \"islamic-umalqura\";\n    if (!$f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH) $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(atob($f2f3e0e3a817edbd$var$UMALQURA_DATA), c => c.charCodeAt(0)).buffer);\n    if (!$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE) {\n      $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE = new Uint32Array($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START + 1);\n      let yearStart = 0;\n      for (let year = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START; year <= $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END; year++) {\n        $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] = yearStart;\n        for (let i = 1; i <= 12; i++) yearStart += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);\n      }\n    }\n  }\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nconst $7c5f6fbf42389787$var$HEBREW_EPOCH = 347997;\n// Hebrew date calculations are performed in terms of days, hours, and\n// \"parts\" (or halakim), which are 1/1080 of an hour, or 3 1/3 seconds.\nconst $7c5f6fbf42389787$var$HOUR_PARTS = 1080;\nconst $7c5f6fbf42389787$var$DAY_PARTS = 24 * $7c5f6fbf42389787$var$HOUR_PARTS;\n// An approximate value for the length of a lunar month.\n// It is used to calculate the approximate year and month of a given\n// absolute date.\nconst $7c5f6fbf42389787$var$MONTH_DAYS = 29;\nconst $7c5f6fbf42389787$var$MONTH_FRACT = 12 * $7c5f6fbf42389787$var$HOUR_PARTS + 793;\nconst $7c5f6fbf42389787$var$MONTH_PARTS = $7c5f6fbf42389787$var$MONTH_DAYS * $7c5f6fbf42389787$var$DAY_PARTS + $7c5f6fbf42389787$var$MONTH_FRACT;\nfunction $7c5f6fbf42389787$var$isLeapYear(year) {\n  return (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(year * 7 + 1, 19) < 7;\n}\n// Test for delay of start of new year and to avoid\n// Sunday, Wednesday, and Friday as start of the new year.\nfunction $7c5f6fbf42389787$var$hebrewDelay1(year) {\n  let months = Math.floor((235 * year - 234) / 19);\n  let parts = 12084 + 13753 * months;\n  let day = months * 29 + Math.floor(parts / 25920);\n  if ((0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(3 * (day + 1), 7) < 3) day += 1;\n  return day;\n}\n// Check for delay in start of new year due to length of adjacent years\nfunction $7c5f6fbf42389787$var$hebrewDelay2(year) {\n  let last = $7c5f6fbf42389787$var$hebrewDelay1(year - 1);\n  let present = $7c5f6fbf42389787$var$hebrewDelay1(year);\n  let next = $7c5f6fbf42389787$var$hebrewDelay1(year + 1);\n  if (next - present === 356) return 2;\n  if (present - last === 382) return 1;\n  return 0;\n}\nfunction $7c5f6fbf42389787$var$startOfYear(year) {\n  return $7c5f6fbf42389787$var$hebrewDelay1(year) + $7c5f6fbf42389787$var$hebrewDelay2(year);\n}\nfunction $7c5f6fbf42389787$var$getDaysInYear(year) {\n  return $7c5f6fbf42389787$var$startOfYear(year + 1) - $7c5f6fbf42389787$var$startOfYear(year);\n}\nfunction $7c5f6fbf42389787$var$getYearType(year) {\n  let yearLength = $7c5f6fbf42389787$var$getDaysInYear(year);\n  if (yearLength > 380) yearLength -= 30; // Subtract length of leap month.\n  switch (yearLength) {\n    case 353:\n      return 0;\n    // deficient\n    case 354:\n      return 1;\n    // normal\n    case 355:\n      return 2;\n    // complete\n  }\n}\n\nfunction $7c5f6fbf42389787$var$getDaysInMonth(year, month) {\n  // Normalize month numbers from 1 - 13, even on non-leap years\n  if (month >= 6 && !$7c5f6fbf42389787$var$isLeapYear(year)) month++;\n  // First of all, dispose of fixed-length 29 day months\n  if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13) return 29;\n  let yearType = $7c5f6fbf42389787$var$getYearType(year);\n  // If it's Heshvan, days depend on length of year\n  if (month === 2) return yearType === 2 ? 30 : 29;\n  // Similarly, Kislev varies with the length of year\n  if (month === 3) return yearType === 0 ? 29 : 30;\n  // Adar I only exists in leap years\n  if (month === 6) return $7c5f6fbf42389787$var$isLeapYear(year) ? 30 : 0;\n  return 30;\n}\nclass $7c5f6fbf42389787$export$ca405048b8fb5af {\n  fromJulianDay(jd) {\n    let d = jd - $7c5f6fbf42389787$var$HEBREW_EPOCH;\n    let m = d * $7c5f6fbf42389787$var$DAY_PARTS / $7c5f6fbf42389787$var$MONTH_PARTS; // Months (approx)\n    let year = Math.floor((19 * m + 234) / 235) + 1; // Years (approx)\n    let ys = $7c5f6fbf42389787$var$startOfYear(year); // 1st day of year\n    let dayOfYear = Math.floor(d - ys);\n    // Because of the postponement rules, it's possible to guess wrong.  Fix it.\n    while (dayOfYear < 1) {\n      year--;\n      ys = $7c5f6fbf42389787$var$startOfYear(year);\n      dayOfYear = Math.floor(d - ys);\n    }\n    // Now figure out which month we're in, and the date within that month\n    let month = 1;\n    let monthStart = 0;\n    while (monthStart < dayOfYear) {\n      monthStart += $7c5f6fbf42389787$var$getDaysInMonth(year, month);\n      month++;\n    }\n    month--;\n    monthStart -= $7c5f6fbf42389787$var$getDaysInMonth(year, month);\n    let day = dayOfYear - monthStart;\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year, month, day);\n  }\n  toJulianDay(date) {\n    let jd = $7c5f6fbf42389787$var$startOfYear(date.year);\n    for (let month = 1; month < date.month; month++) jd += $7c5f6fbf42389787$var$getDaysInMonth(date.year, month);\n    return jd + date.day + $7c5f6fbf42389787$var$HEBREW_EPOCH;\n  }\n  getDaysInMonth(date) {\n    return $7c5f6fbf42389787$var$getDaysInMonth(date.year, date.month);\n  }\n  getMonthsInYear(date) {\n    return $7c5f6fbf42389787$var$isLeapYear(date.year) ? 13 : 12;\n  }\n  getDaysInYear(date) {\n    return $7c5f6fbf42389787$var$getDaysInYear(date.year);\n  }\n  getYearsInEra() {\n    // 6239 gregorian\n    return 9999;\n  }\n  getEras() {\n    return [\"AM\"];\n  }\n  balanceYearMonth(date, previousDate) {\n    // Keep date in the same month when switching between leap years and non leap years\n    if (previousDate.year !== date.year) {\n      if ($7c5f6fbf42389787$var$isLeapYear(previousDate.year) && !$7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month--;else if (!$7c5f6fbf42389787$var$isLeapYear(previousDate.year) && $7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month++;\n    }\n  }\n  constructor() {\n    this.identifier = \"hebrew\";\n  }\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nconst $b956b2d7a6cf451f$var$ETHIOPIC_EPOCH = 1723856;\nconst $b956b2d7a6cf451f$var$COPTIC_EPOCH = 1824665;\n// The delta between Amete Alem 1 and Amete Mihret 1\n// AA 5501 = AM 1\nconst $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA = 5500;\nfunction $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, day) {\n  return epoch // difference from Julian epoch to 1,1,1\n  + 365 * year // number of days from years\n  + Math.floor(year / 4) // extra day of leap year\n  + 30 * (month - 1 // number of days from months (1 based)\n  ) + day - 1 // number of days for present month (1 based)\n  ;\n}\n\nfunction $b956b2d7a6cf451f$var$julianDayToCE(epoch, jd) {\n  let year = Math.floor(4 * (jd - epoch) / 1461);\n  let month = 1 + Math.floor((jd - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, 1, 1)) / 30);\n  let day = jd + 1 - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, 1);\n  return [year, month, day];\n}\nfunction $b956b2d7a6cf451f$var$getLeapDay(year) {\n  return Math.floor(year % 4 / 3);\n}\nfunction $b956b2d7a6cf451f$var$getDaysInMonth(year, month) {\n  // The Ethiopian and Coptic calendars have 13 months, 12 of 30 days each and\n  // an intercalary month at the end of the year of 5 or 6 days, depending whether\n  // the year is a leap year or not. The Leap Year follows the same rules as the\n  // Julian Calendar so that the extra month always has six days in the year before\n  // a Julian Leap Year.\n  if (month % 13 !== 0)\n    // not intercalary month\n    return 30;else\n    // intercalary month 5 days + possible leap day\n    return $b956b2d7a6cf451f$var$getLeapDay(year) + 5;\n}\nclass $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {\n  fromJulianDay(jd) {\n    let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd);\n    let era = \"AM\";\n    if (year <= 0) {\n      era = \"AA\";\n      year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n    }\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, month, day);\n  }\n  toJulianDay(date) {\n    let year = date.year;\n    if (date.era === \"AA\") year -= $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n    return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, year, date.month, date.day);\n  }\n  getDaysInMonth(date) {\n    return $b956b2d7a6cf451f$var$getDaysInMonth(date.year, date.month);\n  }\n  getMonthsInYear() {\n    return 13;\n  }\n  getDaysInYear(date) {\n    return 365 + $b956b2d7a6cf451f$var$getLeapDay(date.year);\n  }\n  getYearsInEra(date) {\n    // 9999-12-31 gregorian is 9992-20-02 ethiopic.\n    // Round down to 9991 for the last full year.\n    // AA 9999-01-01 ethiopic is 4506-09-30 gregorian.\n    return date.era === \"AA\" ? 9999 : 9991;\n  }\n  getEras() {\n    return [\"AA\", \"AM\"];\n  }\n  constructor() {\n    this.identifier = \"ethiopic\";\n  }\n}\nclass $b956b2d7a6cf451f$export$d72e0c37005a4914 extends $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {\n  fromJulianDay(jd) {\n    let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd);\n    year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, \"AA\", year, month, day);\n  }\n  getEras() {\n    return [\"AA\"];\n  }\n  getYearsInEra() {\n    // 9999-13-04 ethioaa is the maximum date, which is equivalent to 4506-09-29 gregorian.\n    return 9999;\n  }\n  constructor(...args) {\n    super(...args);\n    this.identifier = \"ethioaa\" // also known as 'ethiopic-amete-alem' in ICU\n    ;\n  }\n}\n\nclass $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 extends $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {\n  fromJulianDay(jd) {\n    let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$COPTIC_EPOCH, jd);\n    let era = \"CE\";\n    if (year <= 0) {\n      era = \"BCE\";\n      year = 1 - year;\n    }\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, month, day);\n  }\n  toJulianDay(date) {\n    let year = date.year;\n    if (date.era === \"BCE\") year = 1 - year;\n    return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$COPTIC_EPOCH, year, date.month, date.day);\n  }\n  getDaysInMonth(date) {\n    let year = date.year;\n    if (date.era === \"BCE\") year = 1 - year;\n    return $b956b2d7a6cf451f$var$getDaysInMonth(year, date.month);\n  }\n  isInverseEra(date) {\n    return date.era === \"BCE\";\n  }\n  balanceDate(date) {\n    if (date.year <= 0) {\n      date.era = date.era === \"BCE\" ? \"CE\" : \"BCE\";\n      date.year = 1 - date.year;\n    }\n  }\n  getEras() {\n    return [\"BCE\", \"CE\"];\n  }\n  getYearsInEra(date) {\n    // 9999-12-30 gregorian is 9716-02-20 coptic.\n    // Round down to 9715 for the last full year.\n    // BCE 9999-01-01 coptic is BC 9716-06-15 gregorian.\n    return date.era === \"BCE\" ? 9999 : 9715;\n  }\n  constructor(...args) {\n    super(...args);\n    this.identifier = \"coptic\";\n  }\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $64244302c3013299$export$dd0bbc9b26defe37(name) {\n  switch (name) {\n    case \"buddhist\":\n      return new (0, $8d73d47422ca7302$export$42d20a78301dee44)();\n    case \"ethiopic\":\n      return new (0, $b956b2d7a6cf451f$export$26ba6eab5e20cd7d)();\n    case \"ethioaa\":\n      return new (0, $b956b2d7a6cf451f$export$d72e0c37005a4914)();\n    case \"coptic\":\n      return new (0, $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1)();\n    case \"hebrew\":\n      return new (0, $7c5f6fbf42389787$export$ca405048b8fb5af)();\n    case \"indian\":\n      return new (0, $82c358003bdda0a8$export$39f31c639fa15726)();\n    case \"islamic-civil\":\n      return new (0, $f2f3e0e3a817edbd$export$2066795aadd37bfc)();\n    case \"islamic-tbla\":\n      return new (0, $f2f3e0e3a817edbd$export$37f0887f2f9d22f7)();\n    case \"islamic-umalqura\":\n      return new (0, $f2f3e0e3a817edbd$export$5baab4758c231076)();\n    case \"japanese\":\n      return new (0, $62225008020f0a13$export$b746ab2b60cdffbf)();\n    case \"persian\":\n      return new (0, $f3ed2e4472ae7e25$export$37fccdbfd14c5939)();\n    case \"roc\":\n      return new (0, $5f31bd6f0c8940b2$export$65e01080afcb0799)();\n    case \"gregory\":\n    default:\n      return new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)();\n  }\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nlet $fb18d541ea1ad717$var$formatterCache = new Map();\nclass $fb18d541ea1ad717$export$ad991b66133851cf {\n  /** Formats a date as a string according to the locale and format options passed to the constructor. */format(value) {\n    return this.formatter.format(value);\n  }\n  /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */\n  formatToParts(value) {\n    return this.formatter.formatToParts(value);\n  }\n  /** Formats a date range as a string. */\n  formatRange(start, end) {\n    // @ts-ignore\n    if (typeof this.formatter.formatRange === \"function\")\n      // @ts-ignore\n      return this.formatter.formatRange(start, end);\n    if (end < start) throw new RangeError(\"End date must be >= start date\");\n    // Very basic fallback for old browsers.\n    return `${this.formatter.format(start)} – ${this.formatter.format(end)}`;\n  }\n  /** Formats a date range as an array of parts. */\n  formatRangeToParts(start, end) {\n    // @ts-ignore\n    if (typeof this.formatter.formatRangeToParts === \"function\")\n      // @ts-ignore\n      return this.formatter.formatRangeToParts(start, end);\n    if (end < start) throw new RangeError(\"End date must be >= start date\");\n    let startParts = this.formatter.formatToParts(start);\n    let endParts = this.formatter.formatToParts(end);\n    return [...startParts.map(p => ({\n      ...p,\n      source: \"startRange\"\n    })), {\n      type: \"literal\",\n      value: \" – \",\n      source: \"shared\"\n    }, ...endParts.map(p => ({\n      ...p,\n      source: \"endRange\"\n    }))];\n  }\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n  resolvedOptions() {\n    let resolvedOptions = this.formatter.resolvedOptions();\n    if ($fb18d541ea1ad717$var$hasBuggyResolvedHourCycle()) {\n      if (!this.resolvedHourCycle) this.resolvedHourCycle = $fb18d541ea1ad717$var$getResolvedHourCycle(resolvedOptions.locale, this.options);\n      resolvedOptions.hourCycle = this.resolvedHourCycle;\n      resolvedOptions.hour12 = this.resolvedHourCycle === \"h11\" || this.resolvedHourCycle === \"h12\";\n    }\n    // Safari uses a different name for the Ethiopic (Amete Alem) calendar.\n    // https://bugs.webkit.org/show_bug.cgi?id=241564\n    if (resolvedOptions.calendar === \"ethiopic-amete-alem\") resolvedOptions.calendar = \"ethioaa\";\n    return resolvedOptions;\n  }\n  constructor(locale, options = {}) {\n    this.formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options);\n    this.options = options;\n  }\n}\n// There are multiple bugs involving the hour12 and hourCycle options in various browser engines.\n//   - Chrome [1] (and the ECMA 402 spec [2]) resolve hour12: false in English and other locales to h24 (24:00 - 23:59)\n//     rather than h23 (00:00 - 23:59). Same can happen with hour12: true in French, which Chrome resolves to h11 (00:00 - 11:59)\n//     rather than h12 (12:00 - 11:59).\n//   - WebKit returns an incorrect hourCycle resolved option in the French locale due to incorrect parsing of 'h' literal\n//     in the resolved pattern. It also formats incorrectly when specifying the hourCycle option for the same reason. [3]\n// [1] https://bugs.chromium.org/p/chromium/issues/detail?id=1045791\n// [2] https://github.com/tc39/ecma402/issues/402\n// [3] https://bugs.webkit.org/show_bug.cgi?id=229313\n// https://github.com/unicode-org/cldr/blob/018b55eff7ceb389c7e3fc44e2f657eae3b10b38/common/supplemental/supplementalData.xml#L4774-L4802\nconst $fb18d541ea1ad717$var$hour12Preferences = {\n  true: {\n    // Only Japanese uses the h11 style for 12 hour time. All others use h12.\n    ja: \"h11\"\n  },\n  false: {}\n};\nfunction $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options = {}) {\n  // Work around buggy hour12 behavior in Chrome / ECMA 402 spec by using hourCycle instead.\n  // Only apply the workaround if the issue is detected, because the hourCycle option is buggy in Safari.\n  if (typeof options.hour12 === \"boolean\" && $fb18d541ea1ad717$var$hasBuggyHour12Behavior()) {\n    options = {\n      ...options\n    };\n    let pref = $fb18d541ea1ad717$var$hour12Preferences[String(options.hour12)][locale.split(\"-\")[0]];\n    let defaultHourCycle = options.hour12 ? \"h12\" : \"h23\";\n    options.hourCycle = pref !== null && pref !== void 0 ? pref : defaultHourCycle;\n    delete options.hour12;\n  }\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : \"\");\n  if ($fb18d541ea1ad717$var$formatterCache.has(cacheKey)) return $fb18d541ea1ad717$var$formatterCache.get(cacheKey);\n  let numberFormatter = new Intl.DateTimeFormat(locale, options);\n  $fb18d541ea1ad717$var$formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\nlet $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = null;\nfunction $fb18d541ea1ad717$var$hasBuggyHour12Behavior() {\n  if ($fb18d541ea1ad717$var$_hasBuggyHour12Behavior == null) $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = new Intl.DateTimeFormat(\"en-US\", {\n    hour: \"numeric\",\n    hour12: false\n  }).format(new Date(2020, 2, 3, 0)) === \"24\";\n  return $fb18d541ea1ad717$var$_hasBuggyHour12Behavior;\n}\nlet $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = null;\nfunction $fb18d541ea1ad717$var$hasBuggyResolvedHourCycle() {\n  if ($fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle == null) $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = new Intl.DateTimeFormat(\"fr\", {\n    hour: \"numeric\",\n    hour12: false\n  }).resolvedOptions().hourCycle === \"h12\";\n  return $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle;\n}\nfunction $fb18d541ea1ad717$var$getResolvedHourCycle(locale, options) {\n  if (!options.timeStyle && !options.hour) return undefined;\n  // Work around buggy results in resolved hourCycle and hour12 options in WebKit.\n  // Format the minimum possible hour and maximum possible hour in a day and parse the results.\n  locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, \"\");\n  locale += (locale.includes(\"-u-\") ? \"\" : \"-u\") + \"-nu-latn\";\n  let formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, {\n    ...options,\n    timeZone: undefined // use local timezone\n  });\n\n  let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find(p => p.type === \"hour\").value, 10);\n  let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find(p => p.type === \"hour\").value, 10);\n  if (min === 0 && max === 23) return \"h23\";\n  if (min === 24 && max === 23) return \"h24\";\n  if (min === 0 && max === 11) return \"h11\";\n  if (min === 12 && max === 11) return \"h12\";\n  throw new Error(\"Unexpected hour cycle result\");\n}\nexport { $35ea8db9cb2ccb90$export$99faa760c7908e4f as CalendarDate, $35ea8db9cb2ccb90$export$ca871e8dbb80966f as CalendarDateTime, $35ea8db9cb2ccb90$export$680ea196effce5f as Time, $35ea8db9cb2ccb90$export$d3b7288e7994edea as ZonedDateTime, $3b62074eb05584b2$export$80ee6245ec4f29ec as GregorianCalendar, $62225008020f0a13$export$b746ab2b60cdffbf as JapaneseCalendar, $8d73d47422ca7302$export$42d20a78301dee44 as BuddhistCalendar, $5f31bd6f0c8940b2$export$65e01080afcb0799 as TaiwanCalendar, $f3ed2e4472ae7e25$export$37fccdbfd14c5939 as PersianCalendar, $82c358003bdda0a8$export$39f31c639fa15726 as IndianCalendar, $f2f3e0e3a817edbd$export$2066795aadd37bfc as IslamicCivilCalendar, $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 as IslamicTabularCalendar, $f2f3e0e3a817edbd$export$5baab4758c231076 as IslamicUmalquraCalendar, $7c5f6fbf42389787$export$ca405048b8fb5af as HebrewCalendar, $b956b2d7a6cf451f$export$26ba6eab5e20cd7d as EthiopicCalendar, $b956b2d7a6cf451f$export$d72e0c37005a4914 as EthiopicAmeteAlemCalendar, $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 as CopticCalendar, $64244302c3013299$export$dd0bbc9b26defe37 as createCalendar, $11d87f3f76e88657$export$93522d1a439f3617 as toCalendarDate, $11d87f3f76e88657$export$b21e0b124e224484 as toCalendarDateTime, $11d87f3f76e88657$export$d33f79e3ffc3dc83 as toTime, $11d87f3f76e88657$export$b4a036af3fc0b032 as toCalendar, $11d87f3f76e88657$export$84c95a83c799e074 as toZoned, $11d87f3f76e88657$export$538b00033cc11c75 as toTimeZone, $11d87f3f76e88657$export$d9b67bc93c097491 as toLocalTimeZone, $11d87f3f76e88657$export$e57ff100d91bd4b9 as fromDate, $11d87f3f76e88657$export$1b96692a1ba042ac as fromAbsolute, $14e0f24ef4ac5c92$export$ea39ec197993aef0 as isSameDay, $14e0f24ef4ac5c92$export$a18c89cbd24170ff as isSameMonth, $14e0f24ef4ac5c92$export$5841f9eb9773f25f as isSameYear, $14e0f24ef4ac5c92$export$91b62ebf2ba703ee as isEqualDay, $14e0f24ef4ac5c92$export$5a8da0c44a3afdf2 as isEqualMonth, $14e0f24ef4ac5c92$export$ea840f5a6dda8147 as isEqualYear, $14e0f24ef4ac5c92$export$629b0a497aa65267 as isToday, $14e0f24ef4ac5c92$export$2061056d06d7cdf7 as getDayOfWeek, $14e0f24ef4ac5c92$export$461939dd4422153 as now, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3 as today, $14e0f24ef4ac5c92$export$126c91c941de7e as getHoursInDay, $14e0f24ef4ac5c92$export$aa8b41735afcabd2 as getLocalTimeZone, $14e0f24ef4ac5c92$export$a5a3b454ada2268e as startOfMonth, $14e0f24ef4ac5c92$export$42c81a444fbfb5d4 as startOfWeek, $14e0f24ef4ac5c92$export$f91e89d3d0406102 as startOfYear, $14e0f24ef4ac5c92$export$a2258d9c4118825c as endOfMonth, $14e0f24ef4ac5c92$export$ef8b6d9133084f4e as endOfWeek, $14e0f24ef4ac5c92$export$8b7aa55c66d5569e as endOfYear, $14e0f24ef4ac5c92$export$5412ac11713b72ad as getMinimumMonthInYear, $14e0f24ef4ac5c92$export$b2f4953d301981d5 as getMinimumDayInMonth, $14e0f24ef4ac5c92$export$ccc1b2479e7dd654 as getWeeksInMonth, $14e0f24ef4ac5c92$export$5c333a116e949cdd as minDate, $14e0f24ef4ac5c92$export$a75f2bff57811055 as maxDate, $14e0f24ef4ac5c92$export$618d60ea299da42 as isWeekend, $14e0f24ef4ac5c92$export$ee9d87258e1d19ed as isWeekday, $fae977aafc393c5c$export$6b862160d295c8e as parseDate, $fae977aafc393c5c$export$588937bcd60ade55 as parseDateTime, $fae977aafc393c5c$export$c9698ec7f05a07e1 as parseTime, $fae977aafc393c5c$export$5adfdab05168c219 as parseAbsolute, $fae977aafc393c5c$export$8e384432362ed0f0 as parseAbsoluteToLocal, $fae977aafc393c5c$export$fd7893f06e92a6a4 as parseZonedDateTime, $fae977aafc393c5c$export$ecae829bb3747ea6 as parseDuration, $fb18d541ea1ad717$export$ad991b66133851cf as DateFormatter };","map":{"version":3,"names":["$2b4dce13dd5a17fa$export$842a2cf37af977e1","amount","numerator","Math","floor","$2b4dce13dd5a17fa$export$784d13d8ee351f07","date","era","$35ea8db9cb2ccb90$export$99faa760c7908e4f","calendar","year","month","day","$2b4dce13dd5a17fa$export$27fa0172ae2644b3","$35ea8db9cb2ccb90$export$ca871e8dbb80966f","hour","minute","second","millisecond","$3b62074eb05584b2$var$EPOCH","$3b62074eb05584b2$export$f297eb839006d339","$3b62074eb05584b2$export$c36e0ecb2d4fa69d","y1","monthOffset","$3b62074eb05584b2$export$553d7fa8e3805fc0","$3b62074eb05584b2$export$4475b7e617eb123c","$3b62074eb05584b2$var$daysInMonth","standard","leapyear","$3b62074eb05584b2$export$80ee6245ec4f29ec","fromJulianDay","jd","jd0","depoch","quadricent","dqc","cent","dcent","quad","dquad","yindex","extendedYear","yearDay","leapAdj","toJulianDay","getDaysInMonth","getMonthsInYear","getDaysInYear","getYearsInEra","getEras","isInverseEra","balanceDate","identifier","$2fe286d2fb449abb$export$7a5acbd77d414bd9","AD","AE","AF","AI","AL","AM","AN","AR","AT","AU","AX","AZ","BA","BE","BG","BH","BM","BN","BY","CH","CL","CM","CN","CR","CY","CZ","DE","DJ","DK","DZ","EC","EE","EG","ES","FI","FJ","FO","FR","GB","GE","GF","GP","GR","HR","HU","IE","IQ","IR","IS","IT","JO","KG","KW","KZ","LB","LI","LK","LT","LU","LV","LY","MC","MD","ME","MK","MN","MQ","MV","MY","NL","NO","NZ","OM","PL","QA","RE","RO","RS","RU","SD","SE","SI","SK","SM","SY","TJ","TM","TR","UA","UY","UZ","VA","VN","XK","$14e0f24ef4ac5c92$export$ea39ec197993aef0","a","b","$11d87f3f76e88657$export$b4a036af3fc0b032","$14e0f24ef4ac5c92$export$a18c89cbd24170ff","$14e0f24ef4ac5c92$export$a5a3b454ada2268e","$14e0f24ef4ac5c92$export$5841f9eb9773f25f","$14e0f24ef4ac5c92$export$f91e89d3d0406102","$14e0f24ef4ac5c92$export$91b62ebf2ba703ee","$14e0f24ef4ac5c92$export$5a8da0c44a3afdf2","$14e0f24ef4ac5c92$export$ea840f5a6dda8147","$14e0f24ef4ac5c92$export$629b0a497aa65267","timeZone","$14e0f24ef4ac5c92$export$d0bdf45af03a6ea3","$14e0f24ef4ac5c92$export$2061056d06d7cdf7","locale","julian","dayOfWeek","ceil","$14e0f24ef4ac5c92$var$getWeekStart","$14e0f24ef4ac5c92$export$461939dd4422153","$11d87f3f76e88657$export$1b96692a1ba042ac","Date","now","$11d87f3f76e88657$export$93522d1a439f3617","$14e0f24ef4ac5c92$export$68781ddf31c0090f","$14e0f24ef4ac5c92$export$c19a80a9721b80f6","$14e0f24ef4ac5c92$var$timeToMs","$14e0f24ef4ac5c92$export$126c91c941de7e","ms","$11d87f3f76e88657$export$5107c82f94518f5c","tomorrow","add","days","tomorrowMs","$14e0f24ef4ac5c92$var$localTimeZone","$14e0f24ef4ac5c92$export$aa8b41735afcabd2","Intl","DateTimeFormat","resolvedOptions","subtract","$14e0f24ef4ac5c92$export$a2258d9c4118825c","months","$14e0f24ef4ac5c92$export$8b7aa55c66d5569e","$14e0f24ef4ac5c92$export$5412ac11713b72ad","getMinimumMonthInYear","$14e0f24ef4ac5c92$export$b2f4953d301981d5","getMinimumDayInMonth","$14e0f24ef4ac5c92$export$42c81a444fbfb5d4","$14e0f24ef4ac5c92$export$ef8b6d9133084f4e","$14e0f24ef4ac5c92$var$cachedRegions","Map","$14e0f24ef4ac5c92$var$getRegion","Locale","region","get","maximize","set","part","split","$14e0f24ef4ac5c92$export$ccc1b2479e7dd654","$14e0f24ef4ac5c92$export$5c333a116e949cdd","compare","$14e0f24ef4ac5c92$export$a75f2bff57811055","$14e0f24ef4ac5c92$var$WEEKEND_DATA","IL","SA","YE","$14e0f24ef4ac5c92$export$618d60ea299da42","start","end","$14e0f24ef4ac5c92$export$ee9d87258e1d19ed","$11d87f3f76e88657$export$bd4fb2bc8bb06fb","$11d87f3f76e88657$var$epochFromParts","setUTCHours","setUTCFullYear","getTime","$11d87f3f76e88657$export$59c99f3515d3493f","getTimezoneOffset","$11d87f3f76e88657$var$getTimeZoneParts","utc","$11d87f3f76e88657$var$formattersByTimeZone","formatter","hour12","parts","formatToParts","namedParts","type","value","$11d87f3f76e88657$var$DAYMILLIS","$11d87f3f76e88657$export$136f38efe7caf549","earlier","later","$11d87f3f76e88657$var$getValidWallTimes","found","filter","absolute","$11d87f3f76e88657$var$isValidWallTime","disambiguation","dateTime","$11d87f3f76e88657$export$b21e0b124e224484","setFullYear","setHours","offsetBefore","offsetAfter","valid","length","RangeError","min","max","$11d87f3f76e88657$export$e67a095c620b86fe","offset","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","$35ea8db9cb2ccb90$export$d3b7288e7994edea","$11d87f3f76e88657$export$e57ff100d91bd4b9","$11d87f3f76e88657$export$d7f92bcd3596b086","$11d87f3f76e88657$export$6f4d78149f3f53ac","$11d87f3f76e88657$export$4d0393e732857be5","time","$11d87f3f76e88657$export$d33f79e3ffc3dc83","$35ea8db9cb2ccb90$export$680ea196effce5f","calendarDate","copy","$735220c2d4774dd3$export$c4e2ecac49351ef2","$11d87f3f76e88657$export$84c95a83c799e074","$11d87f3f76e88657$export$538b00033cc11c75","$11d87f3f76e88657$export$83aac07b4c37b25","$11d87f3f76e88657$export$d9b67bc93c097491","$735220c2d4774dd3$var$ONE_HOUR","$735220c2d4774dd3$export$e16d8520af44a096","duration","mutableDate","$735220c2d4774dd3$var$addTimeFields","$735220c2d4774dd3$var$addYears","years","balanceYearMonth","$735220c2d4774dd3$var$balanceYearMonth","$735220c2d4774dd3$var$constrainMonthDay","weeks","$735220c2d4774dd3$var$balanceDay","maxYear","_mutableDate_calendar","_mutableDate_calendar_isInverseEra","call","maxMonth","_date_calendar","_date_calendar_isInverseEra","monthsInYear","constrainDate","$735220c2d4774dd3$export$3e2544e88a25bff8","inverseDuration","key","$735220c2d4774dd3$export$4e2d2ead65e5f7e3","$735220c2d4774dd3$export$adaa4cf7ef1b65be","fields","$735220c2d4774dd3$export$e5d5e1c1822b6e56","mutableValue","$735220c2d4774dd3$export$7555de1e070510cb","$735220c2d4774dd3$var$balanceTime","$735220c2d4774dd3$var$nonNegativeMod","result","hours","minutes","seconds","milliseconds","$735220c2d4774dd3$export$7ed87b6bc2506470","res","$735220c2d4774dd3$export$fe34d3a381cd7501","$735220c2d4774dd3$export$d52ced6badfb9a4c","field","options","mutable","eras","eraIndex","indexOf","Error","$735220c2d4774dd3$var$cycleValue","round","_mutable_calendar","_mutable_calendar_isInverseEra","Infinity","$735220c2d4774dd3$export$dd02b3e0007dfe28","hourCycle","isPM","sign","div","abs","$735220c2d4774dd3$export$96b1d28349274637","$735220c2d4774dd3$export$6814caac34ca03c7","$735220c2d4774dd3$export$9a297d111fc86b79","plainDateTime","minDate","minAbsolute","maxDate","maxAbsolute","pop","remainder","$735220c2d4774dd3$export$31b5430eb18be4f8","$fae977aafc393c5c$var$TIME_RE","$fae977aafc393c5c$var$DATE_RE","$fae977aafc393c5c$var$DATE_TIME_RE","$fae977aafc393c5c$var$ZONED_DATE_TIME_RE","$fae977aafc393c5c$var$ABSOLUTE_RE","$fae977aafc393c5c$var$DATE_TIME_DURATION_RE","$fae977aafc393c5c$var$requiredDurationTimeGroups","$fae977aafc393c5c$var$requiredDurationGroups","$fae977aafc393c5c$export$c9698ec7f05a07e1","m","match","$fae977aafc393c5c$var$parseNumber","$fae977aafc393c5c$export$6b862160d295c8e","$fae977aafc393c5c$export$588937bcd60ade55","$fae977aafc393c5c$export$fd7893f06e92a6a4","_m_","absolutes","includes","$fae977aafc393c5c$var$offsetToString","$fae977aafc393c5c$export$4223de14708adc63","$fae977aafc393c5c$export$5adfdab05168c219","$fae977aafc393c5c$export$8e384432362ed0f0","val","Number","$fae977aafc393c5c$export$f59dee82248f5ad4","String","padStart","slice","$fae977aafc393c5c$export$60dfd74aa96791bd","gregorianDate","offsetHours","offsetMinutes","$fae977aafc393c5c$export$bf79f1ebf4b18792","$fae977aafc393c5c$export$ecae829bb3747ea6","_match_groups","_match_groups1","_match_groups2","_match_groups3","_match_groups4","_match_groups5","_match_groups6","_match_groups7","_match_groups8","parseDurationGroup","group","isNegative","replace","groups","negative","hasRequiredGroups","some","durationStringIncludesTime","hasRequiredDurationTimeGroups","$35ea8db9cb2ccb90$var$shiftArgs","args","shift","$35ea8db9cb2ccb90$var$_type","WeakMap","cycle","toDate","toString","constructor","$cUVuN$_","$35ea8db9cb2ccb90$var$_type1","$35ea8db9cb2ccb90$var$_type2","$35ea8db9cb2ccb90$var$_type3","toAbsoluteString","toISOString","$62225008020f0a13$var$ERA_START_DATES","$62225008020f0a13$var$ERA_END_DATES","$62225008020f0a13$var$ERA_ADDENDS","$62225008020f0a13$var$ERA_NAMES","$62225008020f0a13$var$findEraFromGregorianDate","idx","findIndex","$62225008020f0a13$var$toGregorian","eraAddend","$62225008020f0a13$export$b746ab2b60cdffbf","endYear","endMonth","endDay","startMonth","startDay","cur","next","$62225008020f0a13$var$getMinimums","$8d73d47422ca7302$var$BUDDHIST_ERA_START","$8d73d47422ca7302$export$42d20a78301dee44","$8d73d47422ca7302$var$toGregorian","$5f31bd6f0c8940b2$var$TAIWAN_ERA_START","$5f31bd6f0c8940b2$var$gregorianYear","$5f31bd6f0c8940b2$var$gregorianToTaiwan","y","$5f31bd6f0c8940b2$export$65e01080afcb0799","$5f31bd6f0c8940b2$var$toGregorian","$f3ed2e4472ae7e25$var$PERSIAN_EPOCH","$f3ed2e4472ae7e25$var$isLeapYear","y0","$f3ed2e4472ae7e25$var$persianToJulianDay","$f3ed2e4472ae7e25$export$37fccdbfd14c5939","d0","n2820","d1","y2820","yDay","$82c358003bdda0a8$var$INDIAN_ERA_START","$82c358003bdda0a8$var$INDIAN_YEAR_START","$82c358003bdda0a8$export$39f31c639fa15726","indianYear","leapMonth","indianMonth","indianDay","mDay","$f2f3e0e3a817edbd$var$CIVIL_EPOC","$f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC","$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START","$f2f3e0e3a817edbd$var$UMALQURA_YEAR_END","$f2f3e0e3a817edbd$var$UMALQURA_START_DAYS","$f2f3e0e3a817edbd$var$islamicToJulianDay","epoch","$f2f3e0e3a817edbd$var$julianDayToIslamic","$f2f3e0e3a817edbd$var$isLeapYear","$f2f3e0e3a817edbd$export$2066795aadd37bfc","$f2f3e0e3a817edbd$export$37f0887f2f9d22f7","$f2f3e0e3a817edbd$var$UMALQURA_DATA","$f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH","$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE","$f2f3e0e3a817edbd$var$umalquraYearStart","$f2f3e0e3a817edbd$var$umalquraMonthLength","mask","$f2f3e0e3a817edbd$var$umalquraMonthStart","i","$f2f3e0e3a817edbd$var$umalquraYearLength","$f2f3e0e3a817edbd$export$5baab4758c231076","startDays","endDays","d","yearLength","monthLength","Uint16Array","Uint8Array","from","atob","c","charCodeAt","buffer","Uint32Array","yearStart","$7c5f6fbf42389787$var$HEBREW_EPOCH","$7c5f6fbf42389787$var$HOUR_PARTS","$7c5f6fbf42389787$var$DAY_PARTS","$7c5f6fbf42389787$var$MONTH_DAYS","$7c5f6fbf42389787$var$MONTH_FRACT","$7c5f6fbf42389787$var$MONTH_PARTS","$7c5f6fbf42389787$var$isLeapYear","$7c5f6fbf42389787$var$hebrewDelay1","$7c5f6fbf42389787$var$hebrewDelay2","last","present","$7c5f6fbf42389787$var$startOfYear","$7c5f6fbf42389787$var$getDaysInYear","$7c5f6fbf42389787$var$getYearType","$7c5f6fbf42389787$var$getDaysInMonth","yearType","$7c5f6fbf42389787$export$ca405048b8fb5af","ys","dayOfYear","monthStart","previousDate","$b956b2d7a6cf451f$var$ETHIOPIC_EPOCH","$b956b2d7a6cf451f$var$COPTIC_EPOCH","$b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA","$b956b2d7a6cf451f$var$ceToJulianDay","$b956b2d7a6cf451f$var$julianDayToCE","$b956b2d7a6cf451f$var$getLeapDay","$b956b2d7a6cf451f$var$getDaysInMonth","$b956b2d7a6cf451f$export$26ba6eab5e20cd7d","$b956b2d7a6cf451f$export$d72e0c37005a4914","$b956b2d7a6cf451f$export$fe6243cbe1a4b7c1","$64244302c3013299$export$dd0bbc9b26defe37","name","$fb18d541ea1ad717$var$formatterCache","$fb18d541ea1ad717$export$ad991b66133851cf","format","formatRange","formatRangeToParts","startParts","endParts","map","p","source","$fb18d541ea1ad717$var$hasBuggyResolvedHourCycle","resolvedHourCycle","$fb18d541ea1ad717$var$getResolvedHourCycle","$fb18d541ea1ad717$var$getCachedDateFormatter","$fb18d541ea1ad717$var$hour12Preferences","true","ja","false","$fb18d541ea1ad717$var$hasBuggyHour12Behavior","pref","defaultHourCycle","cacheKey","Object","entries","sort","join","has","numberFormatter","$fb18d541ea1ad717$var$_hasBuggyHour12Behavior","$fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle","timeStyle","undefined","parseInt","find"],"sources":["C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\index.ts","C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\CalendarDate.ts","C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\manipulation.ts","C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\conversion.ts","C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\GregorianCalendar.ts","C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\utils.ts","C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\queries.ts","C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\weekStartData.ts","C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\string.ts","C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\JapaneseCalendar.ts","C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\BuddhistCalendar.ts","C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\TaiwanCalendar.ts","C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\PersianCalendar.ts","C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\IndianCalendar.ts","C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\IslamicCalendar.ts","C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\HebrewCalendar.ts","C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\EthiopicCalendar.ts","C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\createCalendar.ts","C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\DateFormatter.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {\n  AnyCalendarDate,\n  AnyTime,\n  AnyDateTime,\n  Calendar,\n  DateDuration,\n  TimeDuration,\n  DateTimeDuration,\n  DateFields,\n  TimeFields,\n  DateField,\n  TimeField,\n  Disambiguation,\n  CycleOptions,\n  CycleTimeOptions\n} from './types';\n\nexport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nexport {GregorianCalendar} from './calendars/GregorianCalendar';\nexport {JapaneseCalendar} from './calendars/JapaneseCalendar';\nexport {BuddhistCalendar} from './calendars/BuddhistCalendar';\nexport {TaiwanCalendar} from './calendars/TaiwanCalendar';\nexport {PersianCalendar} from './calendars/PersianCalendar';\nexport {IndianCalendar} from './calendars/IndianCalendar';\nexport {IslamicCivilCalendar, IslamicTabularCalendar, IslamicUmalquraCalendar} from './calendars/IslamicCalendar';\nexport {HebrewCalendar} from './calendars/HebrewCalendar';\nexport {EthiopicCalendar, EthiopicAmeteAlemCalendar, CopticCalendar} from './calendars/EthiopicCalendar';\nexport {createCalendar} from './createCalendar';\nexport {\n  toCalendarDate,\n  toCalendarDateTime,\n  toTime,\n  toCalendar,\n  toZoned,\n  toTimeZone,\n  toLocalTimeZone,\n  fromDate,\n  fromAbsolute\n} from './conversion';\nexport {\n  isSameDay,\n  isSameMonth,\n  isSameYear,\n  isEqualDay,\n  isEqualMonth,\n  isEqualYear,\n  isToday,\n  getDayOfWeek,\n  now,\n  today,\n  getHoursInDay,\n  getLocalTimeZone,\n  startOfMonth,\n  startOfWeek,\n  startOfYear,\n  endOfMonth,\n  endOfWeek,\n  endOfYear,\n  getMinimumMonthInYear,\n  getMinimumDayInMonth,\n  getWeeksInMonth,\n  minDate,\n  maxDate,\n  isWeekend,\n  isWeekday\n} from './queries';\nexport {\n  parseDate,\n  parseDateTime,\n  parseTime,\n  parseAbsolute,\n  parseAbsoluteToLocal,\n  parseZonedDateTime,\n  parseDuration\n} from './string';\nexport {DateFormatter} from './DateFormatter';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {add, addTime, addZoned, constrain, constrainTime, cycleDate, cycleTime, cycleZoned, set, setTime, setZoned, subtract, subtractTime, subtractZoned} from './manipulation';\nimport {AnyCalendarDate, AnyTime, Calendar, CycleOptions, CycleTimeOptions, DateDuration, DateField, DateFields, DateTimeDuration, Disambiguation, TimeDuration, TimeField, TimeFields} from './types';\nimport {compareDate, compareTime} from './queries';\nimport {dateTimeToString, dateToString, timeToString, zonedDateTimeToString} from './string';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {toCalendarDateTime, toDate, toZoned, zonedToDate} from './conversion';\n\nfunction shiftArgs(args: any[]) {\n  let calendar: Calendar = typeof args[0] === 'object'\n    ? args.shift()\n    : new GregorianCalendar();\n\n  let era: string;\n  if (typeof args[0] === 'string') {\n    era = args.shift();\n  } else {\n    let eras = calendar.getEras();\n    era = eras[eras.length - 1];\n  }\n\n  let year = args.shift();\n  let month = args.shift();\n  let day = args.shift();\n\n  return [calendar, era, year, month, day];\n}\n\n/** A CalendarDate represents a date without any time components in a specific calendar system. */\nexport class CalendarDate {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  // i.e. a ZonedDateTime should not be be passable to a parameter that expects CalendarDate.\n  // If that behavior is desired, use the AnyCalendarDate interface instead.\n  // @ts-ignore\n  #type;\n  /** The calendar system associated with this date, e.g. Gregorian. */\n  public readonly calendar: Calendar;\n  /** The calendar era for this date, e.g. \"BC\" or \"AD\". */\n  public readonly era: string;\n  /** The year of this date within the era. */\n  public readonly year: number;\n  /**\n   * The month number within the year. Note that some calendar systems such as Hebrew\n   * may have a variable number of months per year. Therefore, month numbers may not\n   * always correspond to the same month names in different years.\n   */\n  public readonly month: number;\n  /** The day number within the month. */\n  public readonly day: number;\n\n  constructor(year: number, month: number, day: number);\n  constructor(era: string, year: number, month: number, day: number);\n  constructor(calendar: Calendar, year: number, month: number, day: number);\n  constructor(calendar: Calendar, era: string, year: number, month: number, day: number);\n  constructor(...args: any[]) {\n    let [calendar, era, year, month, day] = shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n\n    constrain(this);\n  }\n\n  /** Returns a copy of this date. */\n  copy(): CalendarDate {\n    if (this.era) {\n      return new CalendarDate(this.calendar, this.era, this.year, this.month, this.day);\n    } else {\n      return new CalendarDate(this.calendar, this.year, this.month, this.day);\n    }\n  }\n\n  /** Returns a new `CalendarDate` with the given duration added to it. */\n  add(duration: DateDuration): CalendarDate {\n    return add(this, duration);\n  }\n\n  /** Returns a new `CalendarDate` with the given duration subtracted from it. */\n  subtract(duration: DateDuration): CalendarDate {\n    return subtract(this, duration);\n  }\n\n  /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: DateFields): CalendarDate {\n    return set(this, fields);\n  }\n\n  /**\n   * Returns a new `CalendarDate` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: DateField, amount: number, options?: CycleOptions): CalendarDate {\n    return cycleDate(this, field, amount, options);\n  }\n\n  /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */\n  toDate(timeZone: string): Date {\n    return toDate(this, timeZone);\n  }\n\n  /** Converts the date to an ISO 8601 formatted string. */\n  toString(): string {\n    return dateToString(this);\n  }\n\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b: AnyCalendarDate): number {\n    return compareDate(this, b);\n  }\n}\n\n/** A Time represents a clock time without any date components. */\nexport class Time {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  // @ts-ignore\n  #type;\n  /** The hour, numbered from 0 to 23. */\n  public readonly hour: number;\n  /** The minute in the hour. */\n  public readonly minute: number;\n  /** The second in the minute. */\n  public readonly second: number;\n  /** The millisecond in the second. */\n  public readonly millisecond: number;\n\n  constructor(\n    hour: number = 0,\n    minute: number = 0,\n    second: number = 0,\n    millisecond: number = 0\n  ) {\n    this.hour = hour;\n    this.minute = minute;\n    this.second = second;\n    this.millisecond = millisecond;\n    constrainTime(this);\n  }\n\n  /** Returns a copy of this time. */\n  copy(): Time {\n    return new Time(this.hour, this.minute, this.second, this.millisecond);\n  }\n\n  /** Returns a new `Time` with the given duration added to it. */\n  add(duration: TimeDuration) {\n    return addTime(this, duration);\n  }\n\n  /** Returns a new `Time` with the given duration subtracted from it. */\n  subtract(duration: TimeDuration) {\n    return subtractTime(this, duration);\n  }\n\n  /** Returns a new `Time` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: TimeFields) {\n    return setTime(this, fields);\n  }\n\n  /**\n   * Returns a new `Time` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: TimeField, amount: number, options?: CycleTimeOptions) {\n    return cycleTime(this, field, amount, options);\n  }\n\n  /** Converts the time to an ISO 8601 formatted string. */\n  toString() {\n    return timeToString(this);\n  }\n\n  /** Compares this time with another. A negative result indicates that this time is before the given one, and a positive time indicates that it is after. */\n  compare(b: AnyTime) {\n    return compareTime(this, b);\n  }\n}\n\n/** A CalendarDateTime represents a date and time without a time zone, in a specific calendar system. */\nexport class CalendarDateTime {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  // @ts-ignore\n  #type;\n  /** The calendar system associated with this date, e.g. Gregorian. */\n  public readonly calendar: Calendar;\n  /** The calendar era for this date, e.g. \"BC\" or \"AD\". */\n  public readonly era: string;\n  /** The year of this date within the era. */\n  public readonly year: number;\n  /**\n   * The month number within the year. Note that some calendar systems such as Hebrew\n   * may have a variable number of months per year. Therefore, month numbers may not\n   * always correspond to the same month names in different years.\n   */\n  public readonly month: number;\n  /** The day number within the month. */\n  public readonly day: number;\n  /** The hour in the day, numbered from 0 to 23. */\n  public readonly hour: number;\n  /** The minute in the hour. */\n  public readonly minute: number;\n  /** The second in the minute. */\n  public readonly second: number;\n  /** The millisecond in the second. */\n  public readonly millisecond: number;\n\n  constructor(year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(era: string, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, era: string, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(...args: any[]) {\n    let [calendar, era, year, month, day] = shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n\n    constrain(this);\n  }\n\n  /** Returns a copy of this date. */\n  copy(): CalendarDateTime {\n    if (this.era) {\n      return new CalendarDateTime(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n    } else {\n      return new CalendarDateTime(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n    }\n  }\n\n  /** Returns a new `CalendarDateTime` with the given duration added to it. */\n  add(duration: DateTimeDuration): CalendarDateTime {\n    return add(this, duration);\n  }\n\n  /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */\n  subtract(duration: DateTimeDuration): CalendarDateTime {\n    return subtract(this, duration);\n  }\n\n  /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: DateFields & TimeFields): CalendarDateTime {\n    return set(setTime(this, fields), fields);\n  }\n\n  /**\n   * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: DateField | TimeField, amount: number, options?: CycleTimeOptions): CalendarDateTime {\n    switch (field) {\n      case 'era':\n      case 'year':\n      case 'month':\n      case 'day':\n        return cycleDate(this, field, amount, options);\n      default:\n        return cycleTime(this, field, amount, options);\n    }\n  }\n\n  /** Converts the date to a native JavaScript Date object in the given time zone. */\n  toDate(timeZone: string, disambiguation?: Disambiguation): Date {\n    return toDate(this, timeZone, disambiguation);\n  }\n\n  /** Converts the date to an ISO 8601 formatted string. */\n  toString(): string {\n    return dateTimeToString(this);\n  }\n\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b: CalendarDate | CalendarDateTime | ZonedDateTime): number {\n    let res = compareDate(this, b);\n    if (res === 0) {\n      return compareTime(this, toCalendarDateTime(b));\n    }\n\n    return res;\n  }\n}\n\n/** A ZonedDateTime represents a date and time in a specific time zone and calendar system. */\nexport class ZonedDateTime {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  // @ts-ignore\n  #type;\n  /** The calendar system associated with this date, e.g. Gregorian. */\n  public readonly calendar: Calendar;\n  /** The calendar era for this date, e.g. \"BC\" or \"AD\". */\n  public readonly era: string;\n  /** The year of this date within the era. */\n  public readonly year: number;\n  /**\n   * The month number within the year. Note that some calendar systems such as Hebrew\n   * may have a variable number of months per year. Therefore, month numbers may not\n   * always correspond to the same month names in different years.\n   */\n  public readonly month: number;\n  /** The day number within the month. */\n  public readonly day: number;\n  /** The hour in the day, numbered from 0 to 23. */\n  public readonly hour: number;\n  /** The minute in the hour. */\n  public readonly minute: number;\n  /** The second in the minute. */\n  public readonly second: number;\n  /** The millisecond in the second. */\n  public readonly millisecond: number;\n  /** The IANA time zone identifier that this date and time is represented in. */\n  public readonly timeZone: string;\n  /** The UTC offset for this time, in milliseconds. */\n  public readonly offset: number;\n\n  constructor(year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(era: string, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, era: string, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(...args: any[]) {\n    let [calendar, era, year, month, day] = shiftArgs(args);\n    let timeZone = args.shift();\n    let offset = args.shift();\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.timeZone = timeZone;\n    this.offset = offset;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n\n    constrain(this);\n  }\n\n  /** Returns a copy of this date. */\n  copy(): ZonedDateTime {\n    if (this.era) {\n      return new ZonedDateTime(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n    } else {\n      return new ZonedDateTime(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n    }\n  }\n\n  /** Returns a new `ZonedDateTime` with the given duration added to it. */\n  add(duration: DateTimeDuration) {\n    return addZoned(this, duration);\n  }\n\n  /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */\n  subtract(duration: DateTimeDuration) {\n    return subtractZoned(this, duration);\n  }\n\n  /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: DateFields & TimeFields, disambiguation?: Disambiguation) {\n    return setZoned(this, fields, disambiguation);\n  }\n\n  /**\n   * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: DateField | TimeField, amount: number, options?: CycleTimeOptions) {\n    return cycleZoned(this, field, amount, options);\n  }\n\n  /** Converts the date to a native JavaScript Date object. */\n  toDate() {\n    return zonedToDate(this);\n  }\n\n   /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */\n  toString() {\n    return zonedDateTimeToString(this);\n  }\n\n   /** Converts the date to an ISO 8601 formatted string in UTC. */\n  toAbsoluteString() {\n    return this.toDate().toISOString();\n  }\n\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b: CalendarDate | CalendarDateTime | ZonedDateTime) {\n    // TODO: Is this a bad idea??\n    return this.toDate().getTime() - toZoned(b, this.timeZone).toDate().getTime();\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AnyCalendarDate, AnyDateTime, AnyTime, CycleOptions, CycleTimeOptions, DateDuration, DateField, DateFields, DateTimeDuration, Disambiguation, TimeDuration, TimeField, TimeFields} from './types';\nimport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nimport {epochFromDate, fromAbsolute, toAbsolute, toCalendar, toCalendarDateTime} from './conversion';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {Mutable} from './utils';\n\nconst ONE_HOUR = 3600000;\n\nexport function add(date: CalendarDateTime, duration: DateTimeDuration): CalendarDateTime;\nexport function add(date: CalendarDate, duration: DateDuration): CalendarDate;\nexport function add(date: CalendarDate | CalendarDateTime, duration: DateTimeDuration): CalendarDate | CalendarDateTime;\nexport function add(date: CalendarDate | CalendarDateTime, duration: DateTimeDuration) {\n  let mutableDate: Mutable<AnyCalendarDate | AnyDateTime> = date.copy();\n  let days = 'hour' in mutableDate ? addTimeFields(mutableDate, duration) : 0;\n\n  addYears(mutableDate, duration.years || 0);\n  if (mutableDate.calendar.balanceYearMonth) {\n    mutableDate.calendar.balanceYearMonth(mutableDate, date);\n  }\n\n  mutableDate.month += duration.months || 0;\n\n  balanceYearMonth(mutableDate);\n  constrainMonthDay(mutableDate);\n\n  mutableDate.day += (duration.weeks || 0) * 7;\n  mutableDate.day += duration.days || 0;\n  mutableDate.day += days;\n\n  balanceDay(mutableDate);\n\n  if (mutableDate.calendar.balanceDate) {\n    mutableDate.calendar.balanceDate(mutableDate);\n  }\n\n  // Constrain in case adding ended up with a date outside the valid range for the calendar system.\n  // The behavior here is slightly different than when constraining in the `set` function in that\n  // we adjust smaller fields to their minimum/maximum values rather than constraining each field\n  // individually. This matches the general behavior of `add` vs `set` regarding how fields are balanced.\n  if (mutableDate.year < 1) {\n    mutableDate.year = 1;\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n\n  let maxYear = mutableDate.calendar.getYearsInEra(mutableDate);\n  if (mutableDate.year > maxYear) {\n    let isInverseEra = mutableDate.calendar.isInverseEra?.(mutableDate);\n    mutableDate.year = maxYear;\n    mutableDate.month = isInverseEra ? 1 : mutableDate.calendar.getMonthsInYear(mutableDate);\n    mutableDate.day = isInverseEra ? 1 : mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n\n  if (mutableDate.month < 1) {\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n\n  let maxMonth = mutableDate.calendar.getMonthsInYear(mutableDate);\n  if (mutableDate.month > maxMonth) {\n    mutableDate.month = maxMonth;\n    mutableDate.day = mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n\n  mutableDate.day = Math.max(1, Math.min(mutableDate.calendar.getDaysInMonth(mutableDate), mutableDate.day));\n  return mutableDate;\n}\n\nfunction addYears(date: Mutable<AnyCalendarDate>, years: number) {\n  if (date.calendar.isInverseEra?.(date)) {\n    years = -years;\n  }\n\n  date.year += years;\n}\n\nfunction balanceYearMonth(date: Mutable<AnyCalendarDate>) {\n  while (date.month < 1) {\n    addYears(date, -1);\n    date.month += date.calendar.getMonthsInYear(date);\n  }\n\n  let monthsInYear = 0;\n  while (date.month > (monthsInYear = date.calendar.getMonthsInYear(date))) {\n    date.month -= monthsInYear;\n    addYears(date, 1);\n  }\n}\n\nfunction balanceDay(date: Mutable<AnyCalendarDate>) {\n  while (date.day < 1) {\n    date.month--;\n    balanceYearMonth(date);\n    date.day += date.calendar.getDaysInMonth(date);\n  }\n\n  while (date.day > date.calendar.getDaysInMonth(date)) {\n    date.day -= date.calendar.getDaysInMonth(date);\n    date.month++;\n    balanceYearMonth(date);\n  }\n}\n\nfunction constrainMonthDay(date: Mutable<AnyCalendarDate>) {\n  date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));\n  date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));\n}\n\nexport function constrain(date: Mutable<AnyCalendarDate>) {\n  if (date.calendar.constrainDate) {\n    date.calendar.constrainDate(date);\n  }\n\n  date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));\n  constrainMonthDay(date);\n}\n\nexport function invertDuration(duration: DateTimeDuration): DateTimeDuration {\n  let inverseDuration = {};\n  for (let key in duration) {\n    if (typeof duration[key] === 'number') {\n      inverseDuration[key] = -duration[key];\n    }\n  }\n\n  return inverseDuration;\n}\n\nexport function subtract(date: CalendarDateTime, duration: DateTimeDuration): CalendarDateTime;\nexport function subtract(date: CalendarDate, duration: DateDuration): CalendarDate;\nexport function subtract(date: CalendarDate | CalendarDateTime, duration: DateTimeDuration): CalendarDate | CalendarDateTime {\n  return add(date, invertDuration(duration));\n}\n\nexport function set(date: CalendarDateTime, fields: DateFields): CalendarDateTime;\nexport function set(date: CalendarDate, fields: DateFields): CalendarDate;\nexport function set(date: CalendarDate | CalendarDateTime, fields: DateFields) {\n  let mutableDate: Mutable<AnyCalendarDate> = date.copy();\n\n  if (fields.era != null) {\n    mutableDate.era = fields.era;\n  }\n\n  if (fields.year != null) {\n    mutableDate.year = fields.year;\n  }\n\n  if (fields.month != null) {\n    mutableDate.month = fields.month;\n  }\n\n  if (fields.day != null) {\n    mutableDate.day = fields.day;\n  }\n\n  constrain(mutableDate);\n  return mutableDate;\n}\n\nexport function setTime(value: CalendarDateTime, fields: TimeFields): CalendarDateTime;\nexport function setTime(value: Time, fields: TimeFields): Time;\nexport function setTime(value: Time | CalendarDateTime, fields: TimeFields) {\n  let mutableValue: Mutable<Time | CalendarDateTime> = value.copy();\n\n  if (fields.hour != null) {\n    mutableValue.hour = fields.hour;\n  }\n\n  if (fields.minute != null) {\n    mutableValue.minute = fields.minute;\n  }\n\n  if (fields.second != null) {\n    mutableValue.second = fields.second;\n  }\n\n  if (fields.millisecond != null) {\n    mutableValue.millisecond = fields.millisecond;\n  }\n\n  constrainTime(mutableValue);\n  return mutableValue;\n}\n\nfunction balanceTime(time: Mutable<AnyTime>): number {\n  time.second += Math.floor(time.millisecond / 1000);\n  time.millisecond = nonNegativeMod(time.millisecond, 1000);\n\n  time.minute += Math.floor(time.second / 60);\n  time.second = nonNegativeMod(time.second, 60);\n\n  time.hour += Math.floor(time.minute / 60);\n  time.minute = nonNegativeMod(time.minute, 60);\n\n  let days = Math.floor(time.hour / 24);\n  time.hour = nonNegativeMod(time.hour, 24);\n\n  return days;\n}\n\nexport function constrainTime(time: Mutable<AnyTime>) {\n  time.millisecond = Math.max(0, Math.min(time.millisecond, 1000));\n  time.second = Math.max(0, Math.min(time.second, 59));\n  time.minute = Math.max(0, Math.min(time.minute, 59));\n  time.hour = Math.max(0, Math.min(time.hour, 23));\n}\n\nfunction nonNegativeMod(a: number, b: number) {\n  let result = a % b;\n  if (result < 0) {\n    result += b;\n  }\n  return result;\n}\n\nfunction addTimeFields(time: Mutable<AnyTime>, duration: TimeDuration): number {\n  time.hour += duration.hours || 0;\n  time.minute += duration.minutes || 0;\n  time.second += duration.seconds || 0;\n  time.millisecond += duration.milliseconds || 0;\n  return balanceTime(time);\n}\n\nexport function addTime(time: Time, duration: TimeDuration): Time {\n  let res = time.copy();\n  addTimeFields(res, duration);\n  return res;\n}\n\nexport function subtractTime(time: Time, duration: TimeDuration): Time {\n  return addTime(time, invertDuration(duration));\n}\n\nexport function cycleDate(value: CalendarDateTime, field: DateField, amount: number, options?: CycleOptions): CalendarDateTime;\nexport function cycleDate(value: CalendarDate, field: DateField, amount: number, options?: CycleOptions): CalendarDate;\nexport function cycleDate(value: CalendarDate | CalendarDateTime, field: DateField, amount: number, options?: CycleOptions) {\n  let mutable: Mutable<CalendarDate | CalendarDateTime> = value.copy();\n\n  switch (field) {\n    case 'era': {\n      let eras = value.calendar.getEras();\n      let eraIndex = eras.indexOf(value.era);\n      if (eraIndex < 0) {\n        throw new Error('Invalid era: ' + value.era);\n      }\n      eraIndex = cycleValue(eraIndex, amount, 0, eras.length - 1, options?.round);\n      mutable.era = eras[eraIndex];\n\n      // Constrain the year and other fields within the era, so the era doesn't change when we balance below.\n      constrain(mutable);\n      break;\n    }\n    case 'year': {\n      if (mutable.calendar.isInverseEra?.(mutable)) {\n        amount = -amount;\n      }\n\n      // The year field should not cycle within the era as that can cause weird behavior affecting other fields.\n      // We need to also allow values < 1 so that decrementing goes to the previous era. If we get -Infinity back\n      // we know we wrapped around after reaching 9999 (the maximum), so set the year back to 1.\n      mutable.year = cycleValue(value.year, amount, -Infinity, 9999, options?.round);\n      if (mutable.year === -Infinity) {\n        mutable.year = 1;\n      }\n\n      if (mutable.calendar.balanceYearMonth) {\n        mutable.calendar.balanceYearMonth(mutable, value);\n      }\n      break;\n    }\n    case 'month':\n      mutable.month = cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options?.round);\n      break;\n    case 'day':\n      mutable.day = cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options?.round);\n      break;\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n\n  if (value.calendar.balanceDate) {\n    value.calendar.balanceDate(mutable);\n  }\n\n  constrain(mutable);\n  return mutable;\n}\n\nexport function cycleTime(value: CalendarDateTime, field: TimeField, amount: number, options?: CycleTimeOptions): CalendarDateTime;\nexport function cycleTime(value: Time, field: TimeField, amount: number, options?: CycleTimeOptions): Time;\nexport function cycleTime(value: Time | CalendarDateTime, field: TimeField, amount: number, options?: CycleTimeOptions) {\n  let mutable: Mutable<Time | CalendarDateTime> = value.copy();\n\n  switch (field) {\n    case 'hour': {\n      let hours = value.hour;\n      let min = 0;\n      let max = 23;\n      if (options?.hourCycle === 12) {\n        let isPM = hours >= 12;\n        min = isPM ? 12 : 0;\n        max = isPM ? 23 : 11;\n      }\n      mutable.hour = cycleValue(hours, amount, min, max, options?.round);\n      break;\n    }\n    case 'minute':\n      mutable.minute = cycleValue(value.minute, amount, 0, 59, options?.round);\n      break;\n    case 'second':\n      mutable.second = cycleValue(value.second, amount, 0, 59, options?.round);\n      break;\n    case 'millisecond':\n      mutable.millisecond = cycleValue(value.millisecond, amount, 0, 999, options?.round);\n      break;\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n\n  return mutable;\n}\n\nfunction cycleValue(value: number, amount: number, min: number, max: number, round = false) {\n  if (round) {\n    value += Math.sign(amount);\n\n    if (value < min) {\n      value = max;\n    }\n\n    let div = Math.abs(amount);\n    if (amount > 0) {\n      value = Math.ceil(value / div) * div;\n    } else {\n      value = Math.floor(value / div) * div;\n    }\n\n    if (value > max) {\n      value = min;\n    }\n  } else {\n    value += amount;\n    if (value < min) {\n      value = max - (min - value - 1);\n    } else if (value > max) {\n      value = min + (value - max - 1);\n    }\n  }\n\n  return value;\n}\n\nexport function addZoned(dateTime: ZonedDateTime, duration: DateTimeDuration): ZonedDateTime {\n  let ms: number;\n  if ((duration.years != null && duration.years !== 0) || (duration.months != null && duration.months !== 0) || (duration.weeks != null && duration.weeks !== 0) || (duration.days != null && duration.days !== 0)) {\n    let res = add(toCalendarDateTime(dateTime), {\n      years: duration.years,\n      months: duration.months,\n      weeks: duration.weeks,\n      days: duration.days\n    });\n\n    // Changing the date may change the timezone offset, so we need to recompute\n    // using the 'compatible' disambiguation.\n    ms = toAbsolute(res, dateTime.timeZone);\n  } else {\n    // Otherwise, preserve the offset of the original date.\n    ms = epochFromDate(dateTime) - dateTime.offset;\n  }\n\n  // Perform time manipulation in milliseconds rather than on the original time fields to account for DST.\n  // For example, adding one hour during a DST transition may result in the hour field staying the same or\n  // skipping an hour. This results in the offset field changing value instead of the specified field.\n  ms += duration.milliseconds || 0;\n  ms += (duration.seconds || 0) * 1000;\n  ms += (duration.minutes || 0) * 60 * 1000;\n  ms += (duration.hours || 0) * 60 * 60 * 1000;\n\n  let res = fromAbsolute(ms, dateTime.timeZone);\n  return toCalendar(res, dateTime.calendar);\n}\n\nexport function subtractZoned(dateTime: ZonedDateTime, duration: DateTimeDuration): ZonedDateTime {\n  return addZoned(dateTime, invertDuration(duration));\n}\n\nexport function cycleZoned(dateTime: ZonedDateTime, field: DateField | TimeField, amount: number, options?: CycleTimeOptions): ZonedDateTime {\n  // For date fields, we want the time to remain consistent and the UTC offset to potentially change to account for DST changes.\n  // For time fields, we want the time to change by the amount given. This may result in the hour field staying the same, but the UTC\n  // offset changing in the case of a backward DST transition, or skipping an hour in the case of a forward DST transition.\n  switch (field) {\n    case 'hour': {\n      let min = 0;\n      let max = 23;\n      if (options?.hourCycle === 12) {\n        let isPM = dateTime.hour >= 12;\n        min = isPM ? 12 : 0;\n        max = isPM ? 23 : 11;\n      }\n\n      // The minimum and maximum hour may be affected by daylight saving time.\n      // For example, it might jump forward at midnight, and skip 1am.\n      // Or it might end at midnight and repeat the 11pm hour. To handle this, we get\n      // the possible absolute times for the min and max, and find the maximum range\n      // that is within the current day.\n      let plainDateTime = toCalendarDateTime(dateTime);\n      let minDate = toCalendar(setTime(plainDateTime, {hour: min}), new GregorianCalendar());\n      let minAbsolute = [toAbsolute(minDate, dateTime.timeZone, 'earlier'), toAbsolute(minDate, dateTime.timeZone, 'later')]\n        .filter(ms => fromAbsolute(ms, dateTime.timeZone).day === minDate.day)[0];\n\n      let maxDate = toCalendar(setTime(plainDateTime, {hour: max}), new GregorianCalendar());\n      let maxAbsolute = [toAbsolute(maxDate, dateTime.timeZone, 'earlier'), toAbsolute(maxDate, dateTime.timeZone, 'later')]\n        .filter(ms => fromAbsolute(ms, dateTime.timeZone).day === maxDate.day).pop();\n\n      // Since hours may repeat, we need to operate on the absolute time in milliseconds.\n      // This is done in hours from the Unix epoch so that cycleValue works correctly,\n      // and then converted back to milliseconds.\n      let ms = epochFromDate(dateTime) - dateTime.offset;\n      let hours = Math.floor(ms / ONE_HOUR);\n      let remainder = ms % ONE_HOUR;\n      ms = cycleValue(\n        hours,\n        amount,\n        Math.floor(minAbsolute / ONE_HOUR),\n        Math.floor(maxAbsolute / ONE_HOUR),\n        options?.round\n      ) * ONE_HOUR + remainder;\n\n      // Now compute the new timezone offset, and convert the absolute time back to local time.\n      return toCalendar(fromAbsolute(ms, dateTime.timeZone), dateTime.calendar);\n    }\n    case 'minute':\n    case 'second':\n    case 'millisecond':\n      // @ts-ignore\n      return cycleTime(dateTime, field, amount, options);\n    case 'era':\n    case 'year':\n    case 'month':\n    case 'day': {\n      let res = cycleDate(toCalendarDateTime(dateTime), field, amount, options);\n      let ms = toAbsolute(res, dateTime.timeZone);\n      return toCalendar(fromAbsolute(ms, dateTime.timeZone), dateTime.calendar);\n    }\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n}\n\nexport function setZoned(dateTime: ZonedDateTime, fields: DateFields & TimeFields, disambiguation?: Disambiguation): ZonedDateTime {\n  // Set the date/time fields, and recompute the UTC offset to account for DST changes.\n  // We also need to validate by converting back to a local time in case hours are skipped during forward DST transitions.\n  let plainDateTime = toCalendarDateTime(dateTime);\n  let res = setTime(set(plainDateTime, fields), fields);\n\n  // If the resulting plain date time values are equal, return the original time.\n  // We don't want to change the offset when setting the time to the same value.\n  if (res.compare(plainDateTime) === 0) {\n    return dateTime;\n  }\n\n  let ms = toAbsolute(res, dateTime.timeZone, disambiguation);\n  return toCalendar(fromAbsolute(ms, dateTime.timeZone), dateTime.calendar);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, AnyDateTime, AnyTime, Calendar, DateFields, Disambiguation, TimeFields} from './types';\nimport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nimport {constrain} from './manipulation';\nimport {getExtendedYear, GregorianCalendar} from './calendars/GregorianCalendar';\nimport {getLocalTimeZone} from './queries';\nimport {Mutable} from './utils';\n\nexport function epochFromDate(date: AnyDateTime) {\n  date = toCalendar(date, new GregorianCalendar());\n  let year = getExtendedYear(date.era, date.year);\n  return epochFromParts(year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n}\n\nfunction epochFromParts(year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number) {\n  // Note: Date.UTC() interprets one and two-digit years as being in the\n  // 20th century, so don't use it\n  let date = new Date();\n  date.setUTCHours(hour, minute, second, millisecond);\n  date.setUTCFullYear(year, month - 1, day);\n  return date.getTime();\n}\n\nexport function getTimeZoneOffset(ms: number, timeZone: string) {\n  // Fast path for UTC.\n  if (timeZone === 'UTC') {\n    return 0;\n  }\n\n  // Fast path: for local timezone after 1970, use native Date.\n  if (ms > 0 && timeZone === getLocalTimeZone()) {\n    return new Date(ms).getTimezoneOffset() * -60 * 1000;\n  }\n\n  let {year, month, day, hour, minute, second} = getTimeZoneParts(ms, timeZone);\n  let utc = epochFromParts(year, month, day, hour, minute, second, 0);\n  return utc - Math.floor(ms / 1000) * 1000;\n}\n\nconst formattersByTimeZone = new Map<string, Intl.DateTimeFormat>();\n\nfunction getTimeZoneParts(ms: number, timeZone: string) {\n  let formatter = formattersByTimeZone.get(timeZone);\n  if (!formatter) {\n    formatter = new Intl.DateTimeFormat('en-US', {\n      timeZone,\n      hour12: false,\n      era: 'short',\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric'\n    });\n\n    formattersByTimeZone.set(timeZone, formatter);\n  }\n\n  let parts = formatter.formatToParts(new Date(ms));\n  let namedParts: {[name: string]: string} = {};\n  for (let part of parts) {\n    if (part.type !== 'literal') {\n      namedParts[part.type] = part.value;\n    }\n  }\n\n\n  return {\n    // Firefox returns B instead of BC... https://bugzilla.mozilla.org/show_bug.cgi?id=1752253\n    year: namedParts.era === 'BC' || namedParts.era === 'B' ? -namedParts.year + 1 : +namedParts.year,\n    month: +namedParts.month,\n    day: +namedParts.day,\n    hour: namedParts.hour === '24' ? 0 : +namedParts.hour, // bugs.chromium.org/p/chromium/issues/detail?id=1045791\n    minute: +namedParts.minute,\n    second: +namedParts.second\n  };\n}\n\nconst DAYMILLIS = 86400000;\n\nexport function possibleAbsolutes(date: CalendarDateTime, timeZone: string): number[] {\n  let ms = epochFromDate(date);\n  let earlier = ms - getTimeZoneOffset(ms - DAYMILLIS, timeZone);\n  let later = ms - getTimeZoneOffset(ms + DAYMILLIS, timeZone);\n  return getValidWallTimes(date, timeZone, earlier, later);\n}\n\nfunction getValidWallTimes(date: CalendarDateTime, timeZone: string, earlier: number, later: number): number[] {\n  let found = earlier === later ? [earlier] : [earlier, later];\n  return found.filter(absolute => isValidWallTime(date, timeZone, absolute));\n}\n\nfunction isValidWallTime(date: CalendarDateTime, timeZone: string, absolute: number) {\n  let parts = getTimeZoneParts(absolute, timeZone);\n  return date.year === parts.year\n    && date.month === parts.month\n    && date.day === parts.day\n    && date.hour === parts.hour\n    && date.minute === parts.minute\n    && date.second === parts.second;\n}\n\nexport function toAbsolute(date: CalendarDate | CalendarDateTime, timeZone: string, disambiguation: Disambiguation = 'compatible'): number {\n  let dateTime = toCalendarDateTime(date);\n\n  // Fast path: if the time zone is UTC, use native Date.\n  if (timeZone === 'UTC') {\n    return epochFromDate(dateTime);\n  }\n\n  // Fast path: if the time zone is the local timezone and disambiguation is compatible, use native Date.\n  if (timeZone === getLocalTimeZone() && disambiguation === 'compatible') {\n    dateTime = toCalendar(dateTime, new GregorianCalendar());\n\n    // Don't use Date constructor here because two-digit years are interpreted in the 20th century.\n    let date = new Date();\n    let year = getExtendedYear(dateTime.era, dateTime.year);\n    date.setFullYear(year, dateTime.month - 1, dateTime.day);\n    date.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n    return date.getTime();\n  }\n\n  let ms = epochFromDate(dateTime);\n  let offsetBefore = getTimeZoneOffset(ms - DAYMILLIS, timeZone);\n  let offsetAfter = getTimeZoneOffset(ms + DAYMILLIS, timeZone);\n  let valid = getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);\n\n  if (valid.length === 1) {\n    return valid[0];\n  }\n\n  if (valid.length > 1) {\n    switch (disambiguation) {\n      // 'compatible' means 'earlier' for \"fall back\" transitions\n      case 'compatible':\n      case 'earlier':\n        return valid[0];\n      case 'later':\n        return valid[valid.length - 1];\n      case 'reject':\n        throw new RangeError('Multiple possible absolute times found');\n    }\n  }\n\n  switch (disambiguation) {\n    case 'earlier':\n      return Math.min(ms - offsetBefore, ms - offsetAfter);\n    // 'compatible' means 'later' for \"spring forward\" transitions\n    case 'compatible':\n    case 'later':\n      return Math.max(ms - offsetBefore, ms - offsetAfter);\n    case 'reject':\n      throw new RangeError('No such absolute time found');\n  }\n}\n\nexport function toDate(dateTime: CalendarDate | CalendarDateTime, timeZone: string, disambiguation: Disambiguation = 'compatible'): Date {\n  return new Date(toAbsolute(dateTime, timeZone, disambiguation));\n}\n\n/**\n * Takes a Unix epoch (milliseconds since 1970) and converts it to the provided time zone.\n */\nexport function fromAbsolute(ms: number, timeZone: string): ZonedDateTime {\n  let offset = getTimeZoneOffset(ms, timeZone);\n  let date = new Date(ms + offset);\n  let year = date.getUTCFullYear();\n  let month = date.getUTCMonth() + 1;\n  let day = date.getUTCDate();\n  let hour = date.getUTCHours();\n  let minute = date.getUTCMinutes();\n  let second = date.getUTCSeconds();\n  let millisecond = date.getUTCMilliseconds();\n\n  return new ZonedDateTime(year, month, day, timeZone, offset, hour, minute, second, millisecond);\n}\n\n/**\n * Takes a `Date` object and converts it to the provided time zone.\n */\nexport function fromDate(date: Date, timeZone: string): ZonedDateTime {\n  return fromAbsolute(date.getTime(), timeZone);\n}\n\nexport function fromDateToLocal(date: Date): ZonedDateTime {\n  return fromDate(date, getLocalTimeZone());\n}\n\n/** Converts a value with date components such as a `CalendarDateTime` or `ZonedDateTime` into a `CalendarDate`. */\nexport function toCalendarDate(dateTime: AnyCalendarDate): CalendarDate {\n  return new CalendarDate(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);\n}\n\nexport function toDateFields(date: AnyCalendarDate): DateFields {\n  return {\n    era: date.era,\n    year: date.year,\n    month: date.month,\n    day: date.day\n  };\n}\n\nexport function toTimeFields(date: AnyTime): TimeFields {\n  return {\n    hour: date.hour,\n    minute: date.minute,\n    second: date.second,\n    millisecond: date.millisecond\n  };\n}\n\n/**\n * Converts a date value to a `CalendarDateTime`. An optional `Time` value can be passed to set the time\n * of the resulting value, otherwise it will default to midnight.\n */\nexport function toCalendarDateTime(date: CalendarDate | CalendarDateTime | ZonedDateTime, time?: AnyTime): CalendarDateTime {\n  let hour = 0, minute = 0, second = 0, millisecond = 0;\n  if ('timeZone' in date) {\n    ({hour, minute, second, millisecond} = date);\n  } else if ('hour' in date && !time) {\n    return date;\n  }\n\n  if (time) {\n    ({hour, minute, second, millisecond} = time);\n  }\n\n  return new CalendarDateTime(\n    date.calendar,\n    date.era,\n    date.year,\n    date.month,\n    date.day,\n    hour,\n    minute,\n    second,\n    millisecond\n  );\n}\n\n/** Extracts the time components from a value containing a date and time. */\nexport function toTime(dateTime: CalendarDateTime | ZonedDateTime): Time {\n  return new Time(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n}\n\n/** Converts a date from one calendar system to another. */\nexport function toCalendar<T extends AnyCalendarDate>(date: T, calendar: Calendar): T {\n  if (date.calendar.identifier === calendar.identifier) {\n    return date;\n  }\n\n  let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));\n  let copy: Mutable<T> = date.copy();\n  copy.calendar = calendar;\n  copy.era = calendarDate.era;\n  copy.year = calendarDate.year;\n  copy.month = calendarDate.month;\n  copy.day = calendarDate.day;\n  constrain(copy);\n  return copy;\n}\n\n/**\n * Converts a date value to a `ZonedDateTime` in the provided time zone. The `disambiguation` option can be set\n * to control how values that fall on daylight saving time changes are interpreted.\n */\nexport function toZoned(date: CalendarDate | CalendarDateTime | ZonedDateTime, timeZone: string, disambiguation?: Disambiguation): ZonedDateTime {\n  if (date instanceof ZonedDateTime) {\n    if (date.timeZone === timeZone) {\n      return date;\n    }\n\n    return toTimeZone(date, timeZone);\n  }\n\n  let ms = toAbsolute(date, timeZone, disambiguation);\n  return fromAbsolute(ms, timeZone);\n}\n\nexport function zonedToDate(date: ZonedDateTime) {\n  let ms = epochFromDate(date) - date.offset;\n  return new Date(ms);\n}\n\n/** Converts a `ZonedDateTime` from one time zone to another. */\nexport function toTimeZone(date: ZonedDateTime, timeZone: string): ZonedDateTime {\n  let ms = epochFromDate(date) - date.offset;\n  return toCalendar(fromAbsolute(ms, timeZone), date.calendar);\n}\n\n/** Converts the given `ZonedDateTime` into the user's local time zone. */\nexport function toLocalTimeZone(date: ZonedDateTime): ZonedDateTime {\n  return toTimeZone(date, getLocalTimeZone());\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {mod, Mutable} from '../utils';\n\nconst EPOCH = 1721426; // 001/01/03 Julian C.E.\nexport function gregorianToJulianDay(era: string, year: number, month: number, day: number): number {\n  year = getExtendedYear(era, year);\n\n  let y1 = year - 1;\n  let monthOffset = -2;\n  if (month <= 2) {\n    monthOffset = 0;\n  } else if (isLeapYear(year)) {\n    monthOffset = -1;\n  }\n\n  return (\n    EPOCH -\n    1 +\n    365 * y1 +\n    Math.floor(y1 / 4) -\n    Math.floor(y1 / 100) +\n    Math.floor(y1 / 400) +\n    Math.floor((367 * month - 362) / 12 + monthOffset + day)\n  );\n}\n\nexport function isLeapYear(year: number): boolean {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\n\nexport function getExtendedYear(era: string, year: number): number {\n  return era === 'BC' ? 1 - year : year;\n}\n\nexport function fromExtendedYear(year: number): [string, number] {\n  let era = 'AD';\n  if (year <= 0) {\n    era = 'BC';\n    year = 1 - year;\n  }\n\n  return [era, year];\n}\n\nconst daysInMonth = {\n  standard: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  leapyear: [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n};\n\n/**\n * The Gregorian calendar is the most commonly used calendar system in the world. It supports two eras: BC, and AD.\n * Years always contain 12 months, and 365 or 366 days depending on whether it is a leap year.\n */\nexport class GregorianCalendar implements Calendar {\n  identifier = 'gregory';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let jd0 = jd;\n    let depoch = jd0 - EPOCH;\n    let quadricent = Math.floor(depoch / 146097);\n    let dqc = mod(depoch, 146097);\n    let cent = Math.floor(dqc / 36524);\n    let dcent = mod(dqc, 36524);\n    let quad = Math.floor(dcent / 1461);\n    let dquad = mod(dcent, 1461);\n    let yindex = Math.floor(dquad / 365);\n\n    let extendedYear = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);\n    let [era, year] = fromExtendedYear(extendedYear);\n    let yearDay = jd0 - gregorianToJulianDay(era, year, 1, 1);\n    let leapAdj = 2;\n    if (jd0 < gregorianToJulianDay(era, year, 3, 1)) {\n      leapAdj = 0;\n    } else if (isLeapYear(year)) {\n      leapAdj = 1;\n    }\n    let month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);\n    let day = jd0 - gregorianToJulianDay(era, year, month, 1) + 1;\n\n    return new CalendarDate(era, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    return gregorianToJulianDay(date.era, date.year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return daysInMonth[isLeapYear(date.year) ? 'leapyear' : 'standard'][date.month - 1];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getMonthsInYear(date: AnyCalendarDate): number {\n    return 12;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return isLeapYear(date.year) ? 366 : 365;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getYearsInEra(date: AnyCalendarDate): number {\n    return 9999;\n  }\n\n  getEras() {\n    return ['BC', 'AD'];\n  }\n\n  isInverseEra(date: AnyCalendarDate): boolean {\n    return date.era === 'BC';\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    if (date.year <= 0) {\n      date.era = date.era === 'BC' ? 'AD' : 'BC';\n      date.year = 1 - date.year;\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CalendarDate, CalendarDateTime} from './CalendarDate';\n\nexport type Mutable<T> = {\n  -readonly[P in keyof T]: T[P]\n};\n\nexport function mod(amount: number, numerator: number): number {\n  return amount - numerator * Math.floor(amount / numerator);\n}\n\nexport function copy(date: CalendarDate): Mutable<CalendarDate> {\n  if (date.era) {\n    return new CalendarDate(date.calendar, date.era, date.year, date.month, date.day);\n  } else {\n    return new CalendarDate(date.calendar, date.year, date.month, date.day);\n  }\n}\n\nexport function copyDateTime(date: CalendarDateTime): Mutable<CalendarDateTime> {\n  if (date.era) {\n    return new CalendarDateTime(date.calendar, date.era, date.year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n  } else {\n    return new CalendarDateTime(date.calendar, date.year, date.month, date.day, date.hour, date.minute, date.second);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AnyCalendarDate, AnyTime} from './types';\nimport {CalendarDate, CalendarDateTime, ZonedDateTime} from './CalendarDate';\nimport {fromAbsolute, toAbsolute, toCalendar, toCalendarDate} from './conversion';\nimport {weekStartData} from './weekStartData';\n\ntype DateValue = CalendarDate | CalendarDateTime | ZonedDateTime;\n\n/** Returns whether the given dates occur on the same day, regardless of the time or calendar system. */\nexport function isSameDay(a: DateValue, b: DateValue): boolean {\n  b = toCalendar(b, a.calendar);\n  return a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\n\n/** Returns whether the given dates occur in the same month, using the calendar system of the first date. */\nexport function isSameMonth(a: DateValue, b: DateValue): boolean {\n  b = toCalendar(b, a.calendar);\n  // In the Japanese calendar, months can span multiple eras/years, so only compare the first of the month.\n  a = startOfMonth(a);\n  b = startOfMonth(b);\n  return a.era === b.era && a.year === b.year && a.month === b.month;\n}\n\n/** Returns whether the given dates occur in the same year, using the calendar system of the first date. */\nexport function isSameYear(a: DateValue, b: DateValue): boolean {\n  b = toCalendar(b, a.calendar);\n  a = startOfYear(a);\n  b = startOfYear(b);\n  return a.era === b.era && a.year === b.year;\n}\n\n/** Returns whether the given dates occur on the same day, and are of the same calendar system. */\nexport function isEqualDay(a: DateValue, b: DateValue): boolean {\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\n\n/** Returns whether the given dates occur in the same month, and are of the same calendar system. */\nexport function isEqualMonth(a: DateValue, b: DateValue): boolean {\n  a = startOfMonth(a);\n  b = startOfMonth(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month;\n}\n\n/** Returns whether the given dates occur in the same year, and are of the same calendar system. */\nexport function isEqualYear(a: DateValue, b: DateValue): boolean {\n  a = startOfYear(a);\n  b = startOfYear(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year;\n}\n\n/** Returns whether the date is today in the given time zone. */\nexport function isToday(date: DateValue, timeZone: string): boolean {\n  return isSameDay(date, today(timeZone));\n}\n\n/**\n * Returns the day of week for the given date and locale. Days are numbered from zero to six,\n * where zero is the first day of the week in the given locale. For example, in the United States,\n * the first day of the week is Sunday, but in France it is Monday.\n */\nexport function getDayOfWeek(date: DateValue, locale: string): number {\n  let julian = date.calendar.toJulianDay(date);\n\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  let dayOfWeek = Math.ceil(julian + 1 - getWeekStart(locale)) % 7;\n  if (dayOfWeek < 0) {\n    dayOfWeek += 7;\n  }\n\n  return dayOfWeek;\n}\n\n/** Returns the current time in the given time zone. */\nexport function now(timeZone: string): ZonedDateTime {\n  return fromAbsolute(Date.now(), timeZone);\n}\n\n/** Returns today's date in the given time zone. */\nexport function today(timeZone: string): CalendarDate {\n  return toCalendarDate(now(timeZone));\n}\n\nexport function compareDate(a: AnyCalendarDate, b: AnyCalendarDate): number {\n  return a.calendar.toJulianDay(a) - b.calendar.toJulianDay(b);\n}\n\nexport function compareTime(a: AnyTime, b: AnyTime): number {\n  return timeToMs(a) - timeToMs(b);\n}\n\nfunction timeToMs(a: AnyTime): number {\n  return a.hour * 60 * 60 * 1000 + a.minute * 60 * 1000 + a.second * 1000 + a.millisecond;\n}\n\n/**\n * Returns the number of hours in the given date and time zone.\n * Usually this is 24, but it could be 23 or 25 if the date is on a daylight saving transition.\n */\nexport function getHoursInDay(a: CalendarDate, timeZone: string): number {\n  let ms = toAbsolute(a, timeZone);\n  let tomorrow = a.add({days: 1});\n  let tomorrowMs = toAbsolute(tomorrow, timeZone);\n  return (tomorrowMs - ms) / 3600000;\n}\n\nlet localTimeZone = null;\n\n/** Returns the time zone identifier for the current user. */\nexport function getLocalTimeZone(): string {\n  // TODO: invalidate this somehow?\n  if (localTimeZone == null) {\n    localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  }\n\n  return localTimeZone;\n}\n\n/** Returns the first date of the month for the given date. */\nexport function startOfMonth(date: ZonedDateTime): ZonedDateTime;\nexport function startOfMonth(date: CalendarDateTime): CalendarDateTime;\nexport function startOfMonth(date: CalendarDate): CalendarDate;\nexport function startOfMonth(date: DateValue): DateValue;\nexport function startOfMonth(date: DateValue): DateValue {\n  // Use `subtract` instead of `set` so we don't get constrained in an era.\n  return date.subtract({days: date.day - 1});\n}\n\n/** Returns the last date of the month for the given date. */\nexport function endOfMonth(date: ZonedDateTime): ZonedDateTime;\nexport function endOfMonth(date: CalendarDateTime): CalendarDateTime;\nexport function endOfMonth(date: CalendarDate): CalendarDate;\nexport function endOfMonth(date: DateValue): DateValue;\nexport function endOfMonth(date: DateValue): DateValue {\n  return date.add({days: date.calendar.getDaysInMonth(date) - date.day});\n}\n\n/** Returns the first day of the year for the given date. */\nexport function startOfYear(date: ZonedDateTime): ZonedDateTime;\nexport function startOfYear(date: CalendarDateTime): CalendarDateTime;\nexport function startOfYear(date: CalendarDate): CalendarDate;\nexport function startOfYear(date: DateValue): DateValue;\nexport function startOfYear(date: DateValue): DateValue {\n  return startOfMonth(date.subtract({months: date.month - 1}));\n}\n\n/** Returns the last day of the year for the given date. */\nexport function endOfYear(date: ZonedDateTime): ZonedDateTime;\nexport function endOfYear(date: CalendarDateTime): CalendarDateTime;\nexport function endOfYear(date: CalendarDate): CalendarDate;\nexport function endOfYear(date: DateValue): DateValue;\nexport function endOfYear(date: DateValue): DateValue {\n  return endOfMonth(date.add({months: date.calendar.getMonthsInYear(date) - date.month}));\n}\n\nexport function getMinimumMonthInYear(date: AnyCalendarDate) {\n  if (date.calendar.getMinimumMonthInYear) {\n    return date.calendar.getMinimumMonthInYear(date);\n  }\n\n  return 1;\n}\n\nexport function getMinimumDayInMonth(date: AnyCalendarDate) {\n  if (date.calendar.getMinimumDayInMonth) {\n    return date.calendar.getMinimumDayInMonth(date);\n  }\n\n  return 1;\n}\n\n/** Returns the first date of the week for the given date and locale. */\nexport function startOfWeek(date: ZonedDateTime, locale: string): ZonedDateTime;\nexport function startOfWeek(date: CalendarDateTime, locale: string): CalendarDateTime;\nexport function startOfWeek(date: CalendarDate, locale: string): CalendarDate;\nexport function startOfWeek(date: DateValue, locale: string): DateValue;\nexport function startOfWeek(date: DateValue, locale: string): DateValue {\n  let dayOfWeek = getDayOfWeek(date, locale);\n  return date.subtract({days: dayOfWeek});\n}\n\n/** Returns the last date of the week for the given date and locale. */\nexport function endOfWeek(date: ZonedDateTime, locale: string): ZonedDateTime;\nexport function endOfWeek(date: CalendarDateTime, locale: string): CalendarDateTime;\nexport function endOfWeek(date: CalendarDate, locale: string): CalendarDate;\nexport function endOfWeek(date: DateValue, locale: string): DateValue {\n  return startOfWeek(date, locale).add({days: 6});\n}\n\nconst cachedRegions = new Map<string, string>();\n\nfunction getRegion(locale: string) {\n  // If the Intl.Locale API is available, use it to get the region for the locale.\n  // @ts-ignore\n  if (Intl.Locale) {\n    // Constructing an Intl.Locale is expensive, so cache the result.\n    let region = cachedRegions.get(locale);\n    if (!region) {\n      // @ts-ignore\n      region = new Intl.Locale(locale).maximize().region;\n      cachedRegions.set(locale, region);\n    }\n    return region;\n  }\n\n  // If not, just try splitting the string.\n  // If the second part of the locale string is 'u',\n  // then this is a unicode extension, so ignore it.\n  // Otherwise, it should be the region.\n  let part = locale.split('-')[1];\n  return part === 'u' ? null : part;\n}\n\nfunction getWeekStart(locale: string) {\n  // TODO: use Intl.Locale for this once browsers support the weekInfo property\n  // https://github.com/tc39/proposal-intl-locale-info\n  let region = getRegion(locale);\n  return weekStartData[region] || 0;\n}\n\n/** Returns the number of weeks in the given month and locale. */\nexport function getWeeksInMonth(date: DateValue, locale: string): number {\n  let days = date.calendar.getDaysInMonth(date);\n  return Math.ceil((getDayOfWeek(startOfMonth(date), locale) + days) / 7);\n}\n\n/** Returns the lesser of the two provider dates. */\nexport function minDate<A extends DateValue, B extends DateValue>(a: A, b: B): A | B {\n  if (a && b) {\n    return a.compare(b) <= 0 ? a : b;\n  }\n\n  return a || b;\n}\n\n/** Returns the greater of the two provider dates. */\nexport function maxDate<A extends DateValue, B extends DateValue>(a: A, b: B): A | B {\n  if (a && b) {\n    return a.compare(b) >= 0 ? a : b;\n  }\n\n  return a || b;\n}\n\nconst WEEKEND_DATA = {\n  AF: [4, 5],\n  AE: [5, 6],\n  BH: [5, 6],\n  DZ: [5, 6],\n  EG: [5, 6],\n  IL: [5, 6],\n  IQ: [5, 6],\n  IR: [5, 5],\n  JO: [5, 6],\n  KW: [5, 6],\n  LY: [5, 6],\n  OM: [5, 6],\n  QA: [5, 6],\n  SA: [5, 6],\n  SD: [5, 6],\n  SY: [5, 6],\n  YE: [5, 6]\n};\n\n/** Returns whether the given date is on a weekend in the given locale. */\nexport function isWeekend(date: DateValue, locale: string): boolean {\n  let julian = date.calendar.toJulianDay(date);\n\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  let dayOfWeek = Math.ceil(julian + 1) % 7;\n  if (dayOfWeek < 0) {\n    dayOfWeek += 7;\n  }\n\n  let region = getRegion(locale);\n  // Use Intl.Locale for this once weekInfo is supported.\n  // https://github.com/tc39/proposal-intl-locale-info\n  let [start, end] = WEEKEND_DATA[region] || [6, 0];\n  return dayOfWeek === start || dayOfWeek === end;\n}\n\n/** Returns whether the given date is on a weekday in the given locale. */\nexport function isWeekday(date: DateValue, locale: string): boolean {\n  return !isWeekend(date, locale);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Data from https://github.com/unicode-cldr/cldr-core/blob/master/supplemental/weekData.json\n// Locales starting on Sunday have been removed for compression.\nexport const weekStartData = {\n  '001': 1,\n  AD: 1,\n  AE: 6,\n  AF: 6,\n  AI: 1,\n  AL: 1,\n  AM: 1,\n  AN: 1,\n  AR: 1,\n  AT: 1,\n  AU: 1,\n  AX: 1,\n  AZ: 1,\n  BA: 1,\n  BE: 1,\n  BG: 1,\n  BH: 6,\n  BM: 1,\n  BN: 1,\n  BY: 1,\n  CH: 1,\n  CL: 1,\n  CM: 1,\n  CN: 1,\n  CR: 1,\n  CY: 1,\n  CZ: 1,\n  DE: 1,\n  DJ: 6,\n  DK: 1,\n  DZ: 6,\n  EC: 1,\n  EE: 1,\n  EG: 6,\n  ES: 1,\n  FI: 1,\n  FJ: 1,\n  FO: 1,\n  FR: 1,\n  GB: 1,\n  GE: 1,\n  GF: 1,\n  GP: 1,\n  GR: 1,\n  HR: 1,\n  HU: 1,\n  IE: 1,\n  IQ: 6,\n  IR: 6,\n  IS: 1,\n  IT: 1,\n  JO: 6,\n  KG: 1,\n  KW: 6,\n  KZ: 1,\n  LB: 1,\n  LI: 1,\n  LK: 1,\n  LT: 1,\n  LU: 1,\n  LV: 1,\n  LY: 6,\n  MC: 1,\n  MD: 1,\n  ME: 1,\n  MK: 1,\n  MN: 1,\n  MQ: 1,\n  MV: 5,\n  MY: 1,\n  NL: 1,\n  NO: 1,\n  NZ: 1,\n  OM: 6,\n  PL: 1,\n  QA: 6,\n  RE: 1,\n  RO: 1,\n  RS: 1,\n  RU: 1,\n  SD: 6,\n  SE: 1,\n  SI: 1,\n  SK: 1,\n  SM: 1,\n  SY: 6,\n  TJ: 1,\n  TM: 1,\n  TR: 1,\n  UA: 1,\n  UY: 1,\n  UZ: 1,\n  VA: 1,\n  VN: 1,\n  XK: 1\n};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AnyDateTime, DateTimeDuration, Disambiguation} from './types';\nimport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nimport {epochFromDate, fromAbsolute, possibleAbsolutes, toAbsolute, toCalendar, toCalendarDateTime, toTimeZone} from './conversion';\nimport {getLocalTimeZone} from './queries';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {Mutable} from './utils';\n\nconst TIME_RE = /^(\\d{2})(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst DATE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})$/;\nconst DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst ZONED_DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:([+-]\\d{2})(?::?(\\d{2}))?)?\\[(.*?)\\]$/;\nconst ABSOLUTE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:(?:([+-]\\d{2})(?::?(\\d{2}))?)|Z)$/;\nconst DATE_TIME_DURATION_RE =\n    /^((?<negative>-)|\\+)?P((?<years>\\d*)Y)?((?<months>\\d*)M)?((?<weeks>\\d*)W)?((?<days>\\d*)D)?((?<time>T)((?<hours>\\d*[.,]?\\d{1,9})H)?((?<minutes>\\d*[.,]?\\d{1,9})M)?((?<seconds>\\d*[.,]?\\d{1,9})S)?)?$/;\nconst requiredDurationTimeGroups = ['hours', 'minutes', 'seconds'];\nconst requiredDurationGroups = ['years', 'months', 'weeks', 'days', ...requiredDurationTimeGroups];\n\n/** Parses an ISO 8601 time string. */\nexport function parseTime(value: string): Time {\n  let m = value.match(TIME_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 time string: ' + value);\n  }\n\n  return new Time(\n    parseNumber(m[1], 0, 23),\n    m[2] ? parseNumber(m[2], 0, 59) : 0,\n    m[3] ? parseNumber(m[3], 0, 59) : 0,\n    m[4] ? parseNumber(m[4], 0, Infinity) * 1000 : 0\n  );\n}\n\n/** Parses an ISO 8601 date string, with no time components. */\nexport function parseDate(value: string): CalendarDate {\n  let m = value.match(DATE_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date string: ' + value);\n  }\n\n  let date: Mutable<CalendarDate> = new CalendarDate(\n    parseNumber(m[1], 0, 9999),\n    parseNumber(m[2], 1, 12),\n    1\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date as CalendarDate;\n}\n\n/** Parses an ISO 8601 date and time string, with no time zone. */\nexport function parseDateTime(value: string): CalendarDateTime {\n  let m = value.match(DATE_TIME_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date time string: ' + value);\n  }\n\n  let date: Mutable<CalendarDateTime> = new CalendarDateTime(\n    parseNumber(m[1], 1, 9999),\n    parseNumber(m[2], 1, 12),\n    1,\n    m[4] ? parseNumber(m[4], 0, 23) : 0,\n    m[5] ? parseNumber(m[5], 0, 59) : 0,\n    m[6] ? parseNumber(m[6], 0, 59) : 0,\n    m[7] ? parseNumber(m[7], 0, Infinity) * 1000 : 0\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date as CalendarDateTime;\n}\n\n/**\n * Parses an ISO 8601 date and time string with a time zone extension and optional UTC offset\n * (e.g. \"2021-11-07T00:45[America/Los_Angeles]\" or \"2021-11-07T00:45-07:00[America/Los_Angeles]\").\n * Ambiguous times due to daylight saving time transitions are resolved according to the `disambiguation`\n * parameter.\n */\nexport function parseZonedDateTime(value: string, disambiguation?: Disambiguation): ZonedDateTime {\n  let m = value.match(ZONED_DATE_TIME_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date time string: ' + value);\n  }\n\n  let date: Mutable<ZonedDateTime> = new ZonedDateTime(\n    parseNumber(m[1], 1, 9999),\n    parseNumber(m[2], 1, 12),\n    1,\n    m[10],\n    0,\n    m[4] ? parseNumber(m[4], 0, 23) : 0,\n    m[5] ? parseNumber(m[5], 0, 59) : 0,\n    m[6] ? parseNumber(m[6], 0, 59) : 0,\n    m[7] ? parseNumber(m[7], 0, Infinity) * 1000 : 0\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n\n  let plainDateTime = toCalendarDateTime(date as ZonedDateTime);\n\n  let ms: number;\n  if (m[8]) {\n    date.offset = parseNumber(m[8], -23, 23) * 60 * 60 * 1000 + parseNumber(m[9] ?? '0', 0, 59) * 60 * 1000;\n    ms = epochFromDate(date as ZonedDateTime) - date.offset;\n\n    // Validate offset against parsed date.\n    let absolutes = possibleAbsolutes(plainDateTime, date.timeZone);\n    if (!absolutes.includes(ms)) {\n      throw new Error(`Offset ${offsetToString(date.offset)} is invalid for ${dateTimeToString(date)} in ${date.timeZone}`);\n    }\n  } else {\n    // Convert to absolute and back to fix invalid times due to DST.\n    ms = toAbsolute(toCalendarDateTime(plainDateTime), date.timeZone, disambiguation);\n  }\n\n  return fromAbsolute(ms, date.timeZone);\n}\n\n/**\n * Parses an ISO 8601 date and time string with a UTC offset (e.g. \"2021-11-07T07:45:00Z\"\n * or \"2021-11-07T07:45:00-07:00\"). The result is converted to the provided time zone.\n */\nexport function parseAbsolute(value: string, timeZone: string): ZonedDateTime {\n  let m = value.match(ABSOLUTE_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date time string: ' + value);\n  }\n\n  let date: Mutable<ZonedDateTime> = new ZonedDateTime(\n    parseNumber(m[1], 1, 9999),\n    parseNumber(m[2], 1, 12),\n    1,\n    timeZone,\n    0,\n    m[4] ? parseNumber(m[4], 0, 23) : 0,\n    m[5] ? parseNumber(m[5], 0, 59) : 0,\n    m[6] ? parseNumber(m[6], 0, 59) : 0,\n    m[7] ? parseNumber(m[7], 0, Infinity) * 1000 : 0\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n\n  if (m[8]) {\n    date.offset = parseNumber(m[8], -23, 23) * 60 * 60 * 1000 + parseNumber(m[9] ?? '0', 0, 59) * 60 * 1000;\n  }\n\n  return toTimeZone(date as ZonedDateTime, timeZone);\n}\n\n/**\n * Parses an ISO 8601 date and time string with a UTC offset (e.g. \"2021-11-07T07:45:00Z\"\n * or \"2021-11-07T07:45:00-07:00\"). The result is converted to the user's local time zone.\n */\nexport function parseAbsoluteToLocal(value: string): ZonedDateTime {\n  return parseAbsolute(value, getLocalTimeZone());\n}\n\nfunction parseNumber(value: string, min: number, max: number) {\n  let val = Number(value);\n  if (val < min || val > max) {\n    throw new RangeError(`Value out of range: ${min} <= ${val} <= ${max}`);\n  }\n\n  return val;\n}\n\nexport function timeToString(time: Time): string {\n  return `${String(time.hour).padStart(2, '0')}:${String(time.minute).padStart(2, '0')}:${String(time.second).padStart(2, '0')}${time.millisecond ? String(time.millisecond / 1000).slice(1) : ''}`;\n}\n\nexport function dateToString(date: CalendarDate): string {\n  let gregorianDate = toCalendar(date, new GregorianCalendar());\n  return `${String(gregorianDate.year).padStart(4, '0')}-${String(gregorianDate.month).padStart(2, '0')}-${String(gregorianDate.day).padStart(2, '0')}`;\n}\n\nexport function dateTimeToString(date: AnyDateTime): string {\n  // @ts-ignore\n  return `${dateToString(date)}T${timeToString(date)}`;\n}\n\nfunction offsetToString(offset: number) {\n  let sign = Math.sign(offset) < 0 ? '-' : '+';\n  offset = Math.abs(offset);\n  let offsetHours = Math.floor(offset / (60 * 60 * 1000));\n  let offsetMinutes = (offset % (60 * 60 * 1000)) / (60 * 1000);\n  return `${sign}${String(offsetHours).padStart(2, '0')}:${String(offsetMinutes).padStart(2, '0')}`;\n}\n\nexport function zonedDateTimeToString(date: ZonedDateTime): string {\n  return `${dateTimeToString(date)}${offsetToString(date.offset)}[${date.timeZone}]`;\n}\n\n/**\n * Parses an ISO 8601 duration string (e.g. \"P3Y6M6W4DT12H30M5S\").\n * @param value An ISO 8601 duration string.\n * @returns A DateTimeDuration object.\n */\nexport function parseDuration(value: string): Required<DateTimeDuration> {\n  const match = value.match(DATE_TIME_DURATION_RE);\n\n  if (!match) {\n    throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n  }\n\n  const parseDurationGroup = (\n    group: string | undefined,\n    isNegative: boolean,\n    min: number,\n    max: number\n  ): number => {\n    if (!group) {\n      return 0;\n    }\n    try {\n      const sign = isNegative ? -1 : 1;\n      return sign * parseNumber(group.replace(',', '.'), min, max);\n    } catch {\n      throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n    }\n  };\n\n  const isNegative = !!match.groups?.negative;\n\n  const hasRequiredGroups = requiredDurationGroups.some(group => match.groups?.[group]);\n\n  if (!hasRequiredGroups) {\n    throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n  }\n\n  const durationStringIncludesTime = match.groups?.time;\n\n  if (durationStringIncludesTime) {\n    const hasRequiredDurationTimeGroups = requiredDurationTimeGroups.some(group => match.groups?.[group]);\n    if (!hasRequiredDurationTimeGroups) {\n      throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n    }\n  }\n\n  const duration: Mutable<DateTimeDuration> = {\n    years: parseDurationGroup(match.groups?.years, isNegative, 0, 9999),\n    months: parseDurationGroup(match.groups?.months, isNegative, 0, 12),\n    weeks: parseDurationGroup(match.groups?.weeks, isNegative, 0, Infinity),\n    days: parseDurationGroup(match.groups?.days, isNegative, 0, 31),\n    hours: parseDurationGroup(match.groups?.hours, isNegative, 0, 23),\n    minutes: parseDurationGroup(match.groups?.minutes, isNegative, 0, 59),\n    seconds: parseDurationGroup(match.groups?.seconds, isNegative, 0, 59)\n  };\n\n  if (((duration.hours % 1) !== 0) && (duration.minutes || duration.seconds)) {\n    throw new Error(`Invalid ISO 8601 Duration string: ${value} - only the smallest unit can be fractional`);\n  }\n\n  if (((duration.minutes % 1) !== 0) && duration.seconds) {\n    throw new Error(`Invalid ISO 8601 Duration string: ${value} - only the smallest unit can be fractional`);\n  }\n\n  return duration as Required<DateTimeDuration>;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {GregorianCalendar} from './GregorianCalendar';\nimport {Mutable} from '../utils';\n\nconst ERA_START_DATES = [[1868, 9, 8], [1912, 7, 30], [1926, 12, 25], [1989, 1, 8], [2019, 5, 1]];\nconst ERA_END_DATES = [[1912, 7, 29], [1926, 12, 24], [1989, 1, 7], [2019, 4, 30]];\nconst ERA_ADDENDS = [1867, 1911, 1925, 1988, 2018];\nconst ERA_NAMES = ['meiji', 'taisho', 'showa', 'heisei', 'reiwa'];\n\nfunction findEraFromGregorianDate(date: AnyCalendarDate) {\n  const idx = ERA_START_DATES.findIndex(([year, month, day]) => {\n    if (date.year < year) {\n      return true;\n    }\n\n    if (date.year === year && date.month < month) {\n      return true;\n    }\n\n    if (date.year === year && date.month === month && date.day < day) {\n      return true;\n    }\n\n    return false;\n  });\n\n  if (idx === -1) {\n    return ERA_START_DATES.length - 1;\n  }\n\n  if (idx === 0) {\n    return 0;\n  }\n\n  return idx - 1;\n}\n\nfunction toGregorian(date: AnyCalendarDate) {\n  let eraAddend = ERA_ADDENDS[ERA_NAMES.indexOf(date.era)];\n  if (!eraAddend) {\n    throw new Error('Unknown era: ' + date.era);\n  }\n\n  return new CalendarDate(\n    date.year + eraAddend,\n    date.month,\n    date.day\n  );\n}\n\n/**\n * The Japanese calendar is based on the Gregorian calendar, but with eras for the reign of each Japanese emperor.\n * Whenever a new emperor ascends to the throne, a new era begins and the year starts again from 1.\n * Note that eras before 1868 (Gregorian) are not currently supported by this implementation.\n */\nexport class JapaneseCalendar extends GregorianCalendar {\n  identifier = 'japanese';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let date = super.fromJulianDay(jd);\n    let era = findEraFromGregorianDate(date);\n\n    return new CalendarDate(\n      this,\n      ERA_NAMES[era],\n      date.year - ERA_ADDENDS[era],\n      date.month,\n      date.day\n    );\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return super.toJulianDay(toGregorian(date));\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    let gregorianDate = toGregorian(date);\n    let era = findEraFromGregorianDate(gregorianDate);\n\n    if (ERA_NAMES[era] !== date.era) {\n      date.era = ERA_NAMES[era];\n      date.year = gregorianDate.year - ERA_ADDENDS[era];\n    }\n\n    // Constrain in case we went before the first supported era.\n    this.constrainDate(date);\n  }\n\n  constrainDate(date: Mutable<AnyCalendarDate>) {\n    let idx = ERA_NAMES.indexOf(date.era);\n    let end = ERA_END_DATES[idx];\n    if (end != null) {\n      let [endYear, endMonth, endDay] = end;\n\n      // Constrain the year to the maximum possible value in the era.\n      // Then constrain the month and day fields within that.\n      let maxYear = endYear - ERA_ADDENDS[idx];\n      date.year = Math.max(1, Math.min(maxYear, date.year));\n      if (date.year === maxYear) {\n        date.month = Math.min(endMonth, date.month);\n\n        if (date.month === endMonth) {\n          date.day = Math.min(endDay, date.day);\n        }\n      }\n    }\n\n    if (date.year === 1 && idx >= 0) {\n      let [, startMonth, startDay] = ERA_START_DATES[idx];\n      date.month = Math.max(startMonth, date.month);\n\n      if (date.month === startMonth) {\n        date.day = Math.max(startDay, date.day);\n      }\n    }\n  }\n\n  getEras() {\n    return ERA_NAMES;\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    // Get the number of years in the era, taking into account the date's month and day fields.\n    let era = ERA_NAMES.indexOf(date.era);\n    let cur = ERA_START_DATES[era];\n    let next = ERA_START_DATES[era + 1];\n    if (next == null) {\n      // 9999 gregorian is the maximum year allowed.\n      return 9999 - cur[0] + 1;\n    }\n\n    let years = next[0] - cur[0];\n\n    if (date.month < next[1] || (date.month === next[1] && date.day < next[2])) {\n      years++;\n    }\n\n    return years;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return super.getDaysInMonth(toGregorian(date));\n  }\n\n  getMinimumMonthInYear(date: AnyCalendarDate): number {\n    let start = getMinimums(date);\n    return start ? start[1] : 1;\n  }\n\n  getMinimumDayInMonth(date: AnyCalendarDate): number {\n    let start = getMinimums(date);\n    return start && date.month === start[1] ? start[2] : 1;\n  }\n}\n\nfunction getMinimums(date: AnyCalendarDate) {\n  if (date.year === 1) {\n    let idx = ERA_NAMES.indexOf(date.era);\n    return ERA_START_DATES[idx];\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {fromExtendedYear, getExtendedYear, GregorianCalendar} from './GregorianCalendar';\n\nconst BUDDHIST_ERA_START = -543;\n\n/**\n * The Buddhist calendar is the same as the Gregorian calendar, but counts years\n * starting from the birth of Buddha in 543 BC (Gregorian). It supports only one\n * era, identified as 'BE'.\n */\nexport class BuddhistCalendar extends GregorianCalendar {\n  identifier = 'buddhist';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let gregorianDate = super.fromJulianDay(jd);\n    let year = getExtendedYear(gregorianDate.era, gregorianDate.year);\n    return new CalendarDate(\n      this,\n      year - BUDDHIST_ERA_START,\n      gregorianDate.month,\n      gregorianDate.day\n    );\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return super.toJulianDay(toGregorian(date));\n  }\n\n  getEras() {\n    return ['BE'];\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return super.getDaysInMonth(toGregorian(date));\n  }\n\n  balanceDate() {}\n}\n\nfunction toGregorian(date: AnyCalendarDate) {\n  let [era, year] = fromExtendedYear(date.year + BUDDHIST_ERA_START);\n  return new CalendarDate(\n    era,\n    year,\n    date.month,\n    date.day\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {fromExtendedYear, getExtendedYear, GregorianCalendar} from './GregorianCalendar';\nimport {Mutable} from '../utils';\n\nconst TAIWAN_ERA_START = 1911;\n\nfunction gregorianYear(date: AnyCalendarDate) {\n  return date.era === 'minguo'\n    ? date.year + TAIWAN_ERA_START\n    : 1 - date.year + TAIWAN_ERA_START;\n}\n\nfunction gregorianToTaiwan(year: number): [string, number] {\n  let y = year - TAIWAN_ERA_START;\n  if (y > 0) {\n    return ['minguo', y];\n  } else {\n    return ['before_minguo', 1 - y];\n  }\n}\n\n/**\n * The Taiwanese calendar is the same as the Gregorian calendar, but years\n * are numbered starting from 1912 (Gregorian). Two eras are supported:\n * 'before_minguo' and 'minguo'.\n */\nexport class TaiwanCalendar extends GregorianCalendar {\n  identifier = 'roc'; // Republic of China\n\n  fromJulianDay(jd: number): CalendarDate {\n    let date = super.fromJulianDay(jd);\n    let extendedYear = getExtendedYear(date.era, date.year);\n    let [era, year] = gregorianToTaiwan(extendedYear);\n    return new CalendarDate(this, era, year, date.month, date.day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return super.toJulianDay(toGregorian(date));\n  }\n\n  getEras() {\n    return ['before_minguo', 'minguo'];\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    let [era, year] = gregorianToTaiwan(gregorianYear(date));\n    date.era = era;\n    date.year = year;\n  }\n\n  isInverseEra(date: AnyCalendarDate): boolean {\n    return date.era === 'before_minguo';\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return super.getDaysInMonth(toGregorian(date));\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    return date.era === 'before_minguo' ? 9999 : 9999 - TAIWAN_ERA_START;\n  }\n}\n\nfunction toGregorian(date: AnyCalendarDate) {\n  let [era, year] = fromExtendedYear(gregorianYear(date));\n  return new CalendarDate(\n    era,\n    year,\n    date.month,\n    date.day\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {mod} from '../utils';\n\nconst PERSIAN_EPOCH = 1948321; // 622/03/19 Julian C.E.\n\nfunction isLeapYear(year: number): boolean {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = mod(y0, 2820) + 474;\n\n  return mod((y1 + 38) * 31, 128) < 31;\n}\n\nfunction persianToJulianDay(year: number, month: number, day: number): number {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = mod(y0, 2820) + 474;\n  let offset = month <= 7 ? 31 * (month - 1) : 30 * (month - 1) + 6;\n\n  return (\n    PERSIAN_EPOCH -\n    1 +\n    1029983 * Math.floor(y0 / 2820) +\n    365 * (y1 - 1) +\n    Math.floor((31 * y1 - 5) / 128) +\n    offset +\n    day\n  );\n}\n\n/**\n * The Persian calendar is the main calendar used in Iran and Afghanistan. It has 12 months\n * in each year, the first 6 of which have 31 days, and the next 5 have 30 days. The 12th month\n * has either 29 or 30 days depending on whether it is a leap year. The Persian year starts\n * around the March equinox.\n */\nexport class PersianCalendar implements Calendar {\n  identifier = 'persian';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let d0 = jd - persianToJulianDay(475, 1, 1);\n    let n2820 = Math.floor(d0 / 1029983);\n    let d1 = mod(d0, 1029983);\n    let y2820 = d1 === 1029982 ? 2820 : Math.floor((128 * d1 + 46878) / 46751);\n    let year = 474 + 2820 * n2820 + y2820;\n    if (year <= 0) {\n      year--;\n    }\n\n    let yDay = jd - persianToJulianDay(year, 1, 1) + 1;\n    let month = yDay <= 186 ? Math.ceil(yDay / 31) : Math.ceil((yDay - 6) / 31);\n    let day = jd - persianToJulianDay(year, month, 1) + 1;\n\n    return new CalendarDate(this, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    return persianToJulianDay(date.year, date.month, date.day);\n  }\n\n  getMonthsInYear(): number {\n    return 12;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    if (date.month <= 6) {\n      return 31;\n    }\n\n    if (date.month <= 11) {\n      return 30;\n    }\n\n    return isLeapYear(date.year) ? 30 : 29;\n  }\n\n  getEras() {\n    return ['AP'];\n  }\n\n  getYearsInEra(): number {\n    // 9378-10-10 persian is 9999-12-31 gregorian.\n    // Round down to 9377 to set the maximum full year.\n    return 9377;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {fromExtendedYear, GregorianCalendar, gregorianToJulianDay, isLeapYear} from './GregorianCalendar';\n\n// Starts in 78 AD,\nconst INDIAN_ERA_START = 78;\n\n// The Indian year starts 80 days later than the Gregorian year.\nconst INDIAN_YEAR_START = 80;\n\n/**\n * The Indian National Calendar is similar to the Gregorian calendar, but with\n * years numbered since the Saka era in 78 AD (Gregorian). There are 12 months\n * in each year, with either 30 or 31 days. Only one era identifier is supported: 'saka'.\n */\nexport class IndianCalendar extends GregorianCalendar {\n  identifier = 'indian';\n\n  fromJulianDay(jd: number): CalendarDate {\n    // Gregorian date for Julian day\n    let date = super.fromJulianDay(jd);\n\n    // Year in Saka era\n    let indianYear = date.year - INDIAN_ERA_START;\n\n    // Day number in Gregorian year (starting from 0)\n    let yDay = jd - gregorianToJulianDay(date.era, date.year, 1, 1);\n\n    let leapMonth: number;\n    if (yDay < INDIAN_YEAR_START) {\n      //  Day is at the end of the preceding Saka year\n      indianYear--;\n\n      // Days in leapMonth this year, previous Gregorian year\n      leapMonth = isLeapYear(date.year - 1) ? 31 : 30;\n      yDay += leapMonth + (31 * 5) + (30 * 3) + 10;\n    } else {\n      // Days in leapMonth this year\n      leapMonth = isLeapYear(date.year) ? 31 : 30;\n      yDay -= INDIAN_YEAR_START;\n    }\n\n    let indianMonth: number;\n    let indianDay: number;\n    if (yDay < leapMonth) {\n      indianMonth = 1;\n      indianDay = yDay + 1;\n    } else {\n      let mDay = yDay - leapMonth;\n      if (mDay < (31 * 5)) {\n        indianMonth = Math.floor(mDay / 31) + 2;\n        indianDay = (mDay % 31) + 1;\n      } else {\n        mDay -= 31 * 5;\n        indianMonth = Math.floor(mDay / 30) + 7;\n        indianDay = (mDay % 30) + 1;\n      }\n    }\n\n    return new CalendarDate(this, indianYear, indianMonth, indianDay);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let extendedYear = date.year + INDIAN_ERA_START;\n    let [era, year] = fromExtendedYear(extendedYear);\n\n    let leapMonth: number;\n    let jd: number;\n    if (isLeapYear(year)) {\n      leapMonth = 31;\n      jd = gregorianToJulianDay(era, year, 3, 21);\n    } else {\n      leapMonth = 30;\n      jd = gregorianToJulianDay(era, year, 3, 22);\n    }\n\n    if (date.month === 1) {\n      return jd + date.day - 1;\n    }\n\n    jd += leapMonth + Math.min(date.month - 2, 5) * 31;\n\n    if (date.month >= 8) {\n      jd += (date.month - 7) * 30;\n    }\n\n    jd += date.day - 1;\n    return jd;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    if (date.month === 1 && isLeapYear(date.year + INDIAN_ERA_START)) {\n      return 31;\n    }\n\n    if (date.month >= 2 && date.month <= 6) {\n      return 31;\n    }\n\n    return 30;\n  }\n\n  getYearsInEra(): number {\n    // 9999-12-31 gregorian is 9920-10-10 indian.\n    // Round down to 9919 for the last full year.\n    return 9919;\n  }\n\n  getEras() {\n    return ['saka'];\n  }\n\n  balanceDate() {}\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\n\nconst CIVIL_EPOC = 1948440; // CE 622 July 16 Friday (Julian calendar) / CE 622 July 19 (Gregorian calendar)\nconst ASTRONOMICAL_EPOC = 1948439; // CE 622 July 15 Thursday (Julian calendar)\nconst UMALQURA_YEAR_START = 1300;\nconst UMALQURA_YEAR_END = 1600;\nconst UMALQURA_START_DAYS = 460322;\n\nfunction islamicToJulianDay(epoch: number, year: number, month: number, day: number): number {\n  return day +\n    Math.ceil(29.5 * (month - 1)) +\n    (year - 1) * 354 +\n    Math.floor((3 + 11 * year) / 30) +\n    epoch - 1;\n}\n\nfunction julianDayToIslamic(calendar: Calendar, epoch: number, jd: number) {\n  let year = Math.floor((30 * (jd - epoch) + 10646) / 10631);\n  let month = Math.min(12, Math.ceil((jd - (29 + islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);\n  let day = jd - islamicToJulianDay(epoch, year, month, 1) + 1;\n\n  return new CalendarDate(calendar, year, month, day);\n}\n\nfunction isLeapYear(year: number): boolean {\n  return (14 + 11 * year) % 30 < 11;\n}\n\n/**\n * The Islamic calendar, also known as the \"Hijri\" calendar, is used throughout much of the Arab world.\n * The civil variant uses simple arithmetic rules rather than astronomical calculations to approximate\n * the traditional calendar, which is based on sighting of the crescent moon. It uses Friday, July 16 622 CE (Julian) as the epoch.\n * Each year has 12 months, with either 354 or 355 days depending on whether it is a leap year.\n * Learn more about the available Islamic calendars [here](https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types).\n */\nexport class IslamicCivilCalendar implements Calendar {\n  identifier = 'islamic-civil';\n\n  fromJulianDay(jd: number): CalendarDate {\n    return julianDayToIslamic(this, CIVIL_EPOC, jd);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return islamicToJulianDay(CIVIL_EPOC, date.year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    let length = 29 + date.month % 2;\n    if (date.month === 12 && isLeapYear(date.year)) {\n      length++;\n    }\n\n    return length;\n  }\n\n  getMonthsInYear(): number {\n    return 12;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return isLeapYear(date.year) ? 355 : 354;\n  }\n\n  getYearsInEra(): number {\n    // 9999 gregorian\n    return 9665;\n  }\n\n  getEras() {\n    return ['AH'];\n  }\n}\n\n/**\n * The Islamic calendar, also known as the \"Hijri\" calendar, is used throughout much of the Arab world.\n * The tabular variant uses simple arithmetic rules rather than astronomical calculations to approximate\n * the traditional calendar, which is based on sighting of the crescent moon. It uses Thursday, July 15 622 CE (Julian) as the epoch.\n * Each year has 12 months, with either 354 or 355 days depending on whether it is a leap year.\n * Learn more about the available Islamic calendars [here](https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types).\n */\nexport class IslamicTabularCalendar extends IslamicCivilCalendar {\n  identifier = 'islamic-tbla';\n\n  fromJulianDay(jd: number): CalendarDate {\n    return julianDayToIslamic(this, ASTRONOMICAL_EPOC, jd);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return islamicToJulianDay(ASTRONOMICAL_EPOC, date.year, date.month, date.day);\n  }\n}\n\n// Generated by scripts/generate-umalqura.js\nconst UMALQURA_DATA = 'qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=';\nlet UMALQURA_MONTHLENGTH: Uint16Array;\nlet UMALQURA_YEAR_START_TABLE: Uint32Array;\n\nfunction umalquraYearStart(year: number): number {\n  return UMALQURA_START_DAYS + UMALQURA_YEAR_START_TABLE[year - UMALQURA_YEAR_START];\n}\n\nfunction umalquraMonthLength(year: number, month: number): number {\n  let idx = (year - UMALQURA_YEAR_START);\n  let mask = (0x01 << (11 - (month - 1)));\n  if ((UMALQURA_MONTHLENGTH[idx] & mask) === 0) {\n    return 29;\n  } else {\n    return 30;\n  }\n}\n\nfunction umalquraMonthStart(year: number, month: number): number {\n  let day = umalquraYearStart(year);\n  for (let i = 1; i < month; i++) {\n    day += umalquraMonthLength(year, i);\n  }\n  return day;\n}\n\nfunction umalquraYearLength(year: number): number {\n  return UMALQURA_YEAR_START_TABLE[year + 1 - UMALQURA_YEAR_START] - UMALQURA_YEAR_START_TABLE[year - UMALQURA_YEAR_START];\n}\n\n/**\n * The Islamic calendar, also known as the \"Hijri\" calendar, is used throughout much of the Arab world.\n * The Umalqura variant is primarily used in Saudi Arabia. It is a lunar calendar, based on astronomical\n * calculations that predict the sighting of a crescent moon. Month and year lengths vary between years\n * depending on these calculations.\n * Learn more about the available Islamic calendars [here](https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types).\n */\nexport class IslamicUmalquraCalendar extends IslamicCivilCalendar {\n  identifier = 'islamic-umalqura';\n\n  constructor() {\n    super();\n    if (!UMALQURA_MONTHLENGTH) {\n      UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(atob(UMALQURA_DATA), c => c.charCodeAt(0)).buffer);\n    }\n\n    if (!UMALQURA_YEAR_START_TABLE) {\n      UMALQURA_YEAR_START_TABLE = new Uint32Array(UMALQURA_YEAR_END - UMALQURA_YEAR_START + 1);\n\n      let yearStart = 0;\n      for (let year = UMALQURA_YEAR_START; year <= UMALQURA_YEAR_END; year++) {\n        UMALQURA_YEAR_START_TABLE[year - UMALQURA_YEAR_START] = yearStart;\n        for (let i = 1; i <= 12; i++) {\n          yearStart += umalquraMonthLength(year, i);\n        }\n      }\n    }\n  }\n\n  fromJulianDay(jd: number): CalendarDate {\n    let days = jd - CIVIL_EPOC;\n    let startDays = umalquraYearStart(UMALQURA_YEAR_START);\n    let endDays = umalquraYearStart(UMALQURA_YEAR_END);\n    if (days < startDays || days > endDays) {\n      return super.fromJulianDay(jd);\n    } else {\n      let y = UMALQURA_YEAR_START - 1;\n      let m = 1;\n      let d = 1;\n      while (d > 0) {\n        y++;\n        d = days - umalquraYearStart(y) + 1;\n        let yearLength = umalquraYearLength(y);\n        if (d === yearLength) {\n          m = 12;\n          break;\n        } else if (d < yearLength) {\n          let monthLength = umalquraMonthLength(y, m);\n          m = 1;\n          while (d > monthLength) {\n            d -= monthLength;\n            m++;\n            monthLength = umalquraMonthLength(y, m);\n          }\n          break;\n        }\n      }\n\n      return new CalendarDate(this, y, m, (days - umalquraMonthStart(y, m) + 1));\n    }\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    if (date.year < UMALQURA_YEAR_START || date.year > UMALQURA_YEAR_END) {\n      return super.toJulianDay(date);\n    }\n\n    return CIVIL_EPOC + umalquraMonthStart(date.year, date.month) + (date.day - 1);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    if (date.year < UMALQURA_YEAR_START || date.year > UMALQURA_YEAR_END) {\n      return super.getDaysInMonth(date);\n    }\n\n    return umalquraMonthLength(date.year, date.month);\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    if (date.year < UMALQURA_YEAR_START || date.year > UMALQURA_YEAR_END) {\n      return super.getDaysInYear(date);\n    }\n\n    return umalquraYearLength(date.year);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {mod, Mutable} from '../utils';\n\nconst HEBREW_EPOCH = 347997;\n\n// Hebrew date calculations are performed in terms of days, hours, and\n// \"parts\" (or halakim), which are 1/1080 of an hour, or 3 1/3 seconds.\nconst HOUR_PARTS = 1080;\nconst DAY_PARTS  = 24 * HOUR_PARTS;\n\n// An approximate value for the length of a lunar month.\n// It is used to calculate the approximate year and month of a given\n// absolute date.\nconst MONTH_DAYS = 29;\nconst MONTH_FRACT = 12 * HOUR_PARTS + 793;\nconst MONTH_PARTS = MONTH_DAYS * DAY_PARTS + MONTH_FRACT;\n\nfunction isLeapYear(year: number) {\n  return mod(year * 7 + 1, 19) < 7;\n}\n\n// Test for delay of start of new year and to avoid\n// Sunday, Wednesday, and Friday as start of the new year.\nfunction hebrewDelay1(year: number) {\n  let months = Math.floor((235 * year - 234) / 19);\n  let parts = 12084 + 13753 * months;\n  let day = months * 29 + Math.floor(parts / 25920);\n\n  if (mod(3 * (day + 1), 7) < 3) {\n    day += 1;\n  }\n\n  return day;\n}\n\n// Check for delay in start of new year due to length of adjacent years\nfunction hebrewDelay2(year: number) {\n  let last = hebrewDelay1(year - 1);\n  let present = hebrewDelay1(year);\n  let next = hebrewDelay1(year + 1);\n\n  if (next - present === 356) {\n    return 2;\n  }\n\n  if (present - last === 382) {\n    return 1;\n  }\n\n  return 0;\n}\n\nfunction startOfYear(year: number) {\n  return hebrewDelay1(year) + hebrewDelay2(year);\n}\n\nfunction getDaysInYear(year: number) {\n  return startOfYear(year + 1) - startOfYear(year);\n}\n\nfunction getYearType(year: number) {\n  let yearLength = getDaysInYear(year);\n\n  if (yearLength > 380) {\n    yearLength -= 30; // Subtract length of leap month.\n  }\n\n  switch (yearLength) {\n    case 353:\n      return 0; // deficient\n    case 354:\n      return 1; // normal\n    case 355:\n      return 2; // complete\n  }\n}\n\nfunction getDaysInMonth(year: number, month: number): number {\n  // Normalize month numbers from 1 - 13, even on non-leap years\n  if (month >= 6 && !isLeapYear(year)) {\n    month++;\n  }\n\n  // First of all, dispose of fixed-length 29 day months\n  if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13) {\n    return 29;\n  }\n\n  let yearType = getYearType(year);\n\n  // If it's Heshvan, days depend on length of year\n  if (month === 2) {\n    return yearType === 2 ? 30 : 29;\n  }\n\n  // Similarly, Kislev varies with the length of year\n  if (month === 3) {\n    return yearType === 0 ? 29 : 30;\n  }\n\n  // Adar I only exists in leap years\n  if (month === 6) {\n    return isLeapYear(year) ? 30 : 0;\n  }\n\n  return 30;\n}\n\n/**\n * The Hebrew calendar is used in Israel and around the world by the Jewish faith.\n * Years include either 12 or 13 months depending on whether it is a leap year.\n * In leap years, an extra month is inserted at month 6.\n */\nexport class HebrewCalendar implements Calendar {\n  identifier = 'hebrew';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let d = jd - HEBREW_EPOCH;\n    let m = (d * DAY_PARTS) / MONTH_PARTS;           // Months (approx)\n    let year = Math.floor((19 * m + 234) / 235) + 1; // Years (approx)\n    let ys = startOfYear(year);                      // 1st day of year\n    let dayOfYear = Math.floor(d - ys);\n\n    // Because of the postponement rules, it's possible to guess wrong.  Fix it.\n    while (dayOfYear < 1) {\n      year--;\n      ys = startOfYear(year);\n      dayOfYear = Math.floor(d - ys);\n    }\n\n    // Now figure out which month we're in, and the date within that month\n    let month = 1;\n    let monthStart = 0;\n    while (monthStart < dayOfYear) {\n      monthStart += getDaysInMonth(year, month);\n      month++;\n    }\n\n    month--;\n    monthStart -= getDaysInMonth(year, month);\n\n    let day = dayOfYear - monthStart;\n    return new CalendarDate(this, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let jd = startOfYear(date.year);\n    for (let month = 1; month < date.month; month++) {\n      jd += getDaysInMonth(date.year, month);\n    }\n\n    return jd + date.day + HEBREW_EPOCH;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return getDaysInMonth(date.year, date.month);\n  }\n\n  getMonthsInYear(date: AnyCalendarDate): number {\n    return isLeapYear(date.year) ? 13 : 12;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return getDaysInYear(date.year);\n  }\n\n  getYearsInEra(): number {\n    // 6239 gregorian\n    return 9999;\n  }\n\n  getEras() {\n    return ['AM'];\n  }\n\n  balanceYearMonth(date: Mutable<AnyCalendarDate>, previousDate: AnyCalendarDate) {\n    // Keep date in the same month when switching between leap years and non leap years\n    if (previousDate.year !== date.year) {\n      if (isLeapYear(previousDate.year) && !isLeapYear(date.year) && previousDate.month > 6) {\n        date.month--;\n      } else if (!isLeapYear(previousDate.year) && isLeapYear(date.year) && previousDate.month > 6) {\n        date.month++;\n      }\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {Mutable} from '../utils';\n\nconst ETHIOPIC_EPOCH = 1723856;\nconst COPTIC_EPOCH = 1824665;\n\n// The delta between Amete Alem 1 and Amete Mihret 1\n// AA 5501 = AM 1\nconst AMETE_MIHRET_DELTA = 5500;\n\nfunction ceToJulianDay(epoch: number, year: number, month: number, day: number): number {\n  return (\n    epoch                   // difference from Julian epoch to 1,1,1\n    + 365 * year            // number of days from years\n    + Math.floor(year / 4)  // extra day of leap year\n    + 30 * (month - 1)      // number of days from months (1 based)\n    + day - 1               // number of days for present month (1 based)\n  );\n}\n\nfunction julianDayToCE(epoch: number, jd: number) {\n  let year = Math.floor((4 * (jd - epoch)) / 1461);\n  let month = 1 + Math.floor((jd - ceToJulianDay(epoch, year, 1, 1)) / 30);\n  let day = jd + 1 - ceToJulianDay(epoch, year, month, 1);\n  return [year, month, day];\n}\n\nfunction getLeapDay(year: number) {\n  return Math.floor((year % 4) / 3);\n}\n\nfunction getDaysInMonth(year: number, month: number) {\n  // The Ethiopian and Coptic calendars have 13 months, 12 of 30 days each and\n  // an intercalary month at the end of the year of 5 or 6 days, depending whether\n  // the year is a leap year or not. The Leap Year follows the same rules as the\n  // Julian Calendar so that the extra month always has six days in the year before\n  // a Julian Leap Year.\n  if (month % 13 !== 0) {\n    // not intercalary month\n    return 30;\n  } else {\n    // intercalary month 5 days + possible leap day\n    return getLeapDay(year) + 5;\n  }\n}\n\n/**\n * The Ethiopic calendar system is the official calendar used in Ethiopia.\n * It includes 12 months of 30 days each, plus 5 or 6 intercalary days depending\n * on whether it is a leap year. Two eras are supported: 'AA' and 'AM'.\n */\nexport class EthiopicCalendar implements Calendar {\n  identifier = 'ethiopic';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let [year, month, day] = julianDayToCE(ETHIOPIC_EPOCH, jd);\n    let era = 'AM';\n    if (year <= 0) {\n      era = 'AA';\n      year += AMETE_MIHRET_DELTA;\n    }\n\n    return new CalendarDate(this, era, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let year = date.year;\n    if (date.era === 'AA') {\n      year -= AMETE_MIHRET_DELTA;\n    }\n\n    return ceToJulianDay(ETHIOPIC_EPOCH, year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return getDaysInMonth(date.year, date.month);\n  }\n\n  getMonthsInYear(): number {\n    return 13;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return 365 + getLeapDay(date.year);\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    // 9999-12-31 gregorian is 9992-20-02 ethiopic.\n    // Round down to 9991 for the last full year.\n    // AA 9999-01-01 ethiopic is 4506-09-30 gregorian.\n    return date.era === 'AA' ? 9999 : 9991;\n  }\n\n  getEras() {\n    return ['AA', 'AM'];\n  }\n}\n\n/**\n * The Ethiopic (Amete Alem) calendar is the same as the modern Ethiopic calendar,\n * except years were measured from a different epoch. Only one era is supported: 'AA'.\n */\nexport class EthiopicAmeteAlemCalendar extends EthiopicCalendar {\n  identifier = 'ethioaa'; // also known as 'ethiopic-amete-alem' in ICU\n\n  fromJulianDay(jd: number): CalendarDate {\n    let [year, month, day] = julianDayToCE(ETHIOPIC_EPOCH, jd);\n    year += AMETE_MIHRET_DELTA;\n    return new CalendarDate(this, 'AA', year, month, day);\n  }\n\n  getEras() {\n    return ['AA'];\n  }\n\n  getYearsInEra(): number {\n    // 9999-13-04 ethioaa is the maximum date, which is equivalent to 4506-09-29 gregorian.\n    return 9999;\n  }\n}\n\n/**\n * The Coptic calendar is similar to the Ethiopic calendar.\n * It includes 12 months of 30 days each, plus 5 or 6 intercalary days depending\n * on whether it is a leap year. Two eras are supported: 'BCE' and 'CE'.\n */\nexport class CopticCalendar extends EthiopicCalendar {\n  identifier = 'coptic';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let [year, month, day] = julianDayToCE(COPTIC_EPOCH, jd);\n    let era = 'CE';\n    if (year <= 0) {\n      era = 'BCE';\n      year = 1 - year;\n    }\n\n    return new CalendarDate(this, era, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let year = date.year;\n    if (date.era === 'BCE') {\n      year = 1 - year;\n    }\n\n    return ceToJulianDay(COPTIC_EPOCH, year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    let year = date.year;\n    if (date.era === 'BCE') {\n      year = 1 - year;\n    }\n\n    return getDaysInMonth(year, date.month);\n  }\n\n  isInverseEra(date: AnyCalendarDate): boolean {\n    return date.era === 'BCE';\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    if (date.year <= 0) {\n      date.era = date.era === 'BCE' ? 'CE' : 'BCE';\n      date.year = 1 - date.year;\n    }\n  }\n\n  getEras() {\n    return ['BCE', 'CE'];\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    // 9999-12-30 gregorian is 9716-02-20 coptic.\n    // Round down to 9715 for the last full year.\n    // BCE 9999-01-01 coptic is BC 9716-06-15 gregorian.\n    return date.era === 'BCE' ? 9999 : 9715;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {BuddhistCalendar} from './calendars/BuddhistCalendar';\nimport {Calendar} from './types';\nimport {CopticCalendar, EthiopicAmeteAlemCalendar, EthiopicCalendar} from './calendars/EthiopicCalendar';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {HebrewCalendar} from './calendars/HebrewCalendar';\nimport {IndianCalendar} from './calendars/IndianCalendar';\nimport {IslamicCivilCalendar, IslamicTabularCalendar, IslamicUmalquraCalendar} from './calendars/IslamicCalendar';\nimport {JapaneseCalendar} from './calendars/JapaneseCalendar';\nimport {PersianCalendar} from './calendars/PersianCalendar';\nimport {TaiwanCalendar} from './calendars/TaiwanCalendar';\n\n/** Creates a `Calendar` instance from a Unicode calendar identifier string. */\nexport function createCalendar(name: string): Calendar {\n  switch (name) {\n    case 'buddhist':\n      return new BuddhistCalendar();\n    case 'ethiopic':\n      return new EthiopicCalendar();\n    case 'ethioaa':\n      return new EthiopicAmeteAlemCalendar();\n    case 'coptic':\n      return new CopticCalendar();\n    case 'hebrew':\n      return new HebrewCalendar();\n    case 'indian':\n      return new IndianCalendar();\n    case 'islamic-civil':\n      return new IslamicCivilCalendar();\n    case 'islamic-tbla':\n      return new IslamicTabularCalendar();\n    case 'islamic-umalqura':\n      return new IslamicUmalquraCalendar();\n    case 'japanese':\n      return new JapaneseCalendar();\n    case 'persian':\n      return new PersianCalendar();\n    case 'roc':\n      return new TaiwanCalendar();\n    case 'gregory':\n    default:\n      return new GregorianCalendar();\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet formatterCache = new Map<string, Intl.DateTimeFormat>();\n\ninterface ResolvedDateTimeFormatOptions extends Intl.ResolvedDateTimeFormatOptions {\n  hourCycle?: Intl.DateTimeFormatOptions['hourCycle']\n}\n\ninterface DateRangeFormatPart extends Intl.DateTimeFormatPart {\n  source: 'startRange' | 'endRange' | 'shared'\n}\n\n/** A wrapper around Intl.DateTimeFormat that fixes various browser bugs, and polyfills new features. */\nexport class DateFormatter implements Intl.DateTimeFormat {\n  private formatter: Intl.DateTimeFormat;\n  private options: Intl.DateTimeFormatOptions;\n  private resolvedHourCycle: Intl.DateTimeFormatOptions['hourCycle'];\n\n  constructor(locale: string, options: Intl.DateTimeFormatOptions = {}) {\n    this.formatter = getCachedDateFormatter(locale, options);\n    this.options = options;\n  }\n\n  /** Formats a date as a string according to the locale and format options passed to the constructor. */\n  format(value: Date): string {\n    return this.formatter.format(value);\n  }\n\n  /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */\n  formatToParts(value: Date): Intl.DateTimeFormatPart[] {\n    return this.formatter.formatToParts(value);\n  }\n\n  /** Formats a date range as a string. */\n  formatRange(start: Date, end: Date): string {\n    // @ts-ignore\n    if (typeof this.formatter.formatRange === 'function') {\n      // @ts-ignore\n      return this.formatter.formatRange(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    // Very basic fallback for old browsers.\n    return `${this.formatter.format(start)} – ${this.formatter.format(end)}`;\n  }\n\n  /** Formats a date range as an array of parts. */\n  formatRangeToParts(start: Date, end: Date): DateRangeFormatPart[] {\n    // @ts-ignore\n    if (typeof this.formatter.formatRangeToParts === 'function') {\n      // @ts-ignore\n      return this.formatter.formatRangeToParts(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    let startParts = this.formatter.formatToParts(start);\n    let endParts = this.formatter.formatToParts(end);\n    return [\n      ...startParts.map(p => ({...p, source: 'startRange'} as DateRangeFormatPart)),\n      {type: 'literal', value: ' – ', source: 'shared'},\n      ...endParts.map(p => ({...p, source: 'endRange'} as DateRangeFormatPart))\n    ];\n  }\n\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n  resolvedOptions(): ResolvedDateTimeFormatOptions {\n    let resolvedOptions = this.formatter.resolvedOptions() as ResolvedDateTimeFormatOptions;\n    if (hasBuggyResolvedHourCycle()) {\n      if (!this.resolvedHourCycle) {\n        this.resolvedHourCycle = getResolvedHourCycle(resolvedOptions.locale, this.options);\n      }\n      resolvedOptions.hourCycle = this.resolvedHourCycle;\n      resolvedOptions.hour12 = this.resolvedHourCycle === 'h11' || this.resolvedHourCycle === 'h12';\n    }\n\n    // Safari uses a different name for the Ethiopic (Amete Alem) calendar.\n    // https://bugs.webkit.org/show_bug.cgi?id=241564\n    if (resolvedOptions.calendar === 'ethiopic-amete-alem') {\n      resolvedOptions.calendar = 'ethioaa';\n    }\n\n    return resolvedOptions;\n  }\n}\n\n// There are multiple bugs involving the hour12 and hourCycle options in various browser engines.\n//   - Chrome [1] (and the ECMA 402 spec [2]) resolve hour12: false in English and other locales to h24 (24:00 - 23:59)\n//     rather than h23 (00:00 - 23:59). Same can happen with hour12: true in French, which Chrome resolves to h11 (00:00 - 11:59)\n//     rather than h12 (12:00 - 11:59).\n//   - WebKit returns an incorrect hourCycle resolved option in the French locale due to incorrect parsing of 'h' literal\n//     in the resolved pattern. It also formats incorrectly when specifying the hourCycle option for the same reason. [3]\n// [1] https://bugs.chromium.org/p/chromium/issues/detail?id=1045791\n// [2] https://github.com/tc39/ecma402/issues/402\n// [3] https://bugs.webkit.org/show_bug.cgi?id=229313\n\n// https://github.com/unicode-org/cldr/blob/018b55eff7ceb389c7e3fc44e2f657eae3b10b38/common/supplemental/supplementalData.xml#L4774-L4802\nconst hour12Preferences = {\n  true: {\n    // Only Japanese uses the h11 style for 12 hour time. All others use h12.\n    ja: 'h11'\n  },\n  false: {\n    // All locales use h23 for 24 hour time. None use h24.\n  }\n};\n\nfunction getCachedDateFormatter(locale: string, options: Intl.DateTimeFormatOptions = {}): Intl.DateTimeFormat {\n  // Work around buggy hour12 behavior in Chrome / ECMA 402 spec by using hourCycle instead.\n  // Only apply the workaround if the issue is detected, because the hourCycle option is buggy in Safari.\n  if (typeof options.hour12 === 'boolean' && hasBuggyHour12Behavior()) {\n    options = {...options};\n    let pref = hour12Preferences[String(options.hour12)][locale.split('-')[0]];\n    let defaultHourCycle = options.hour12 ? 'h12' : 'h23';\n    options.hourCycle = pref ?? defaultHourCycle;\n    delete options.hour12;\n  }\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if (formatterCache.has(cacheKey)) {\n    return formatterCache.get(cacheKey);\n  }\n\n  let numberFormatter = new Intl.DateTimeFormat(locale, options);\n  formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\nlet _hasBuggyHour12Behavior: boolean = null;\nfunction hasBuggyHour12Behavior() {\n  if (_hasBuggyHour12Behavior == null) {\n    _hasBuggyHour12Behavior = new Intl.DateTimeFormat('en-US', {\n      hour: 'numeric',\n      hour12: false\n    }).format(new Date(2020, 2, 3, 0)) === '24';\n  }\n\n  return _hasBuggyHour12Behavior;\n}\n\nlet _hasBuggyResolvedHourCycle: boolean = null;\nfunction hasBuggyResolvedHourCycle() {\n  if (_hasBuggyResolvedHourCycle == null) {\n    _hasBuggyResolvedHourCycle = (new Intl.DateTimeFormat('fr', {\n      hour: 'numeric',\n      hour12: false\n    }).resolvedOptions() as ResolvedDateTimeFormatOptions).hourCycle === 'h12';\n  }\n\n  return _hasBuggyResolvedHourCycle;\n}\n\nfunction getResolvedHourCycle(locale: string, options: Intl.DateTimeFormatOptions) {\n  if (!options.timeStyle && !options.hour) {\n    return undefined;\n  }\n\n  // Work around buggy results in resolved hourCycle and hour12 options in WebKit.\n  // Format the minimum possible hour and maximum possible hour in a day and parse the results.\n  locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, '');\n  locale += (locale.includes('-u-') ? '' : '-u') + '-nu-latn';\n  let formatter = getCachedDateFormatter(locale, {\n    ...options,\n    timeZone: undefined // use local timezone\n  });\n\n  let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find(p => p.type === 'hour').value, 10);\n  let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find(p => p.type === 'hour').value, 10);\n\n  if (min === 0 && max === 23) {\n    return 'h23';\n  }\n\n  if (min === 24 && max === 23) {\n    return 'h24';\n  }\n\n  if (min === 0 && max === 11) {\n    return 'h11';\n  }\n\n  if (min === 12 && max === 11) {\n    return 'h12';\n  }\n\n  throw new Error('Unexpected hour cycle result');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}