{"ast":null,"code":"import { useFormValidationState as $b3nuO$useFormValidationState, mergeValidation as $b3nuO$mergeValidation } from \"@react-stately/form\";\nimport { useControlledState as $b3nuO$useControlledState } from \"@react-stately/utils\";\nimport { useRef as $b3nuO$useRef } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n\nfunction $587d3ad58be6d31f$export$daff6da51032a415(props = {}) {\n  let [selectedValues, setValue] = (0, $b3nuO$useControlledState)(props.value, props.defaultValue || [], props.onChange);\n  let isRequired = props.isRequired && selectedValues.length === 0;\n  let invalidValues = (0, $b3nuO$useRef)(new Map());\n  let validation = (0, $b3nuO$useFormValidationState)({\n    ...props,\n    value: selectedValues\n  });\n  let isInvalid = validation.displayValidation.isInvalid;\n  var _props_validationState;\n  const state = {\n    ...validation,\n    value: selectedValues,\n    setValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      if (!selectedValues.includes(value)) setValue(selectedValues.concat(value));\n    },\n    removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      if (selectedValues.includes(value)) setValue(selectedValues.filter(existingValue => existingValue !== value));\n    },\n    toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      if (selectedValues.includes(value)) setValue(selectedValues.filter(existingValue => existingValue !== value));else setValue(selectedValues.concat(value));\n    },\n    setInvalid(value, v) {\n      let s = new Map(invalidValues.current);\n      if (v.isInvalid) s.set(value, v);else s.delete(value);\n      invalidValues.current = s;\n      validation.updateValidation((0, $b3nuO$mergeValidation)(...s.values()));\n    },\n    validationState: (_props_validationState = props.validationState) !== null && _props_validationState !== void 0 ? _props_validationState : isInvalid ? \"invalid\" : null,\n    isInvalid: isInvalid,\n    isRequired: isRequired\n  };\n  return state;\n}\nexport { $587d3ad58be6d31f$export$daff6da51032a415 as useCheckboxGroupState };","map":{"version":3,"names":["$587d3ad58be6d31f$export$daff6da51032a415","props","selectedValues","setValue","$b3nuO$useControlledState","value","defaultValue","onChange","isRequired","length","invalidValues","$b3nuO$useRef","Map","validation","$b3nuO$useFormValidationState","isInvalid","displayValidation","_props_validationState","state","isReadOnly","isDisabled","isSelected","includes","addValue","concat","removeValue","filter","existingValue","toggleValue","setInvalid","v","s","current","set","delete","updateValidation","$b3nuO$mergeValidation","values","validationState"],"sources":["C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@react-stately\\checkbox\\dist\\packages\\@react-stately\\checkbox\\src\\index.ts","C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@react-stately\\checkbox\\dist\\packages\\@react-stately\\checkbox\\src\\useCheckboxGroupState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useCheckboxGroupState} from './useCheckboxGroupState';\n\nexport type {CheckboxGroupProps} from '@react-types/checkbox';\nexport type {CheckboxGroupState} from './useCheckboxGroupState';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupProps} from '@react-types/checkbox';\nimport {FormValidationState, mergeValidation, useFormValidationState} from '@react-stately/form';\nimport {useControlledState} from '@react-stately/utils';\nimport {useRef} from 'react';\nimport {ValidationResult, ValidationState} from '@react-types/shared';\n\nexport interface CheckboxGroupState extends FormValidationState {\n  /** Current selected values. */\n  readonly value: readonly string[],\n\n  /** Whether the checkbox group is disabled. */\n  readonly isDisabled: boolean,\n\n  /** Whether the checkbox group is read only. */\n  readonly isReadOnly: boolean,\n\n  /**\n   * The current validation state of the checkbox group.\n   * @deprecated Use `isInvalid` instead.\n   */\n  readonly validationState: ValidationState | null,\n\n  /** Whether the checkbox group is invalid. */\n  readonly isInvalid: boolean,\n\n  /**\n   * Whether the checkboxes in the group are required.\n   * This changes to false once at least one item is selected.\n   */\n  readonly isRequired: boolean,\n\n  /** Returns whether the given value is selected. */\n  isSelected(value: string): boolean,\n\n  /** Sets the selected values. */\n  setValue(value: string[]): void,\n\n  /** Adds a value to the set of selected values. */\n  addValue(value: string): void,\n\n  /** Removes a value from the set of selected values. */\n  removeValue(value: string): void,\n\n  /** Toggles a value in the set of selected values. */\n  toggleValue(value: string): void,\n\n  /** Sets whether one of the checkboxes is invalid. */\n  setInvalid(value: string, validation: ValidationResult): void\n}\n\n/**\n * Provides state management for a checkbox group component. Provides a name for the group,\n * and manages selection and focus state.\n */\nexport function useCheckboxGroupState(props: CheckboxGroupProps = {}): CheckboxGroupState {\n  let [selectedValues, setValue] = useControlledState(props.value, props.defaultValue || [], props.onChange);\n  let isRequired = props.isRequired && selectedValues.length === 0;\n\n  let invalidValues = useRef(new Map<string, ValidationResult>());\n  let validation = useFormValidationState({\n    ...props,\n    value: selectedValues\n  });\n\n  let isInvalid = validation.displayValidation.isInvalid;\n  const state: CheckboxGroupState = {\n    ...validation,\n    value: selectedValues,\n    setValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (!selectedValues.includes(value)) {\n        setValue(selectedValues.concat(value));\n      }\n    },\n    removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (selectedValues.includes(value)) {\n        setValue(selectedValues.filter(existingValue => existingValue !== value));\n      }\n    },\n    toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (selectedValues.includes(value)) {\n        setValue(selectedValues.filter(existingValue => existingValue !== value));\n      } else {\n        setValue(selectedValues.concat(value));\n      }\n    },\n    setInvalid(value, v) {\n      let s = new Map(invalidValues.current);\n      if (v.isInvalid) {\n        s.set(value, v);\n      } else {\n        s.delete(value);\n      }\n\n      invalidValues.current = s;\n      validation.updateValidation(mergeValidation(...s.values()));\n    },\n    validationState: props.validationState ?? (isInvalid ? 'invalid' : null),\n    isInvalid,\n    isRequired\n  };\n\n  return state;\n}\n"],"mappings":";;;;AAAA;;;;;;;;;;ACAA,GDAA,CCAA;;;;;;;;;;;;AAkEO,SAASA,0CAAsBC,KAAA,GAA4B,CAAC,CAAC;EAClE,IAAI,CAACC,cAAA,EAAgBC,QAAA,CAAS,GAAG,IAAAC,yBAAiB,EAAEH,KAAA,CAAMI,KAAK,EAAEJ,KAAA,CAAMK,YAAY,IAAI,EAAE,EAAEL,KAAA,CAAMM,QAAQ;EACzG,IAAIC,UAAA,GAAaP,KAAA,CAAMO,UAAU,IAAIN,cAAA,CAAeO,MAAM,KAAK;EAE/D,IAAIC,aAAA,GAAgB,IAAAC,aAAK,EAAE,IAAIC,GAAA;EAC/B,IAAIC,UAAA,GAAa,IAAAC,6BAAqB,EAAE;IACtC,GAAGb,KAAK;IACRI,KAAA,EAAOH;EACT;EAEA,IAAIa,SAAA,GAAYF,UAAA,CAAWG,iBAAiB,CAACD,SAAS;MAqDnCE,sBAAA;EApDnB,MAAMC,KAAA,GAA4B;IAChC,GAAGL,UAAU;IACbR,KAAA,EAAOH,cAAA;IACPC,SAASE,KAAK;MACZ,IAAIJ,KAAA,CAAMkB,UAAU,IAAIlB,KAAA,CAAMmB,UAAU,EACtC;MAGFjB,QAAA,CAASE,KAAA;IACX;IACAe,UAAA,EAAYnB,KAAA,CAAMmB,UAAU,IAAI;IAChCD,UAAA,EAAYlB,KAAA,CAAMkB,UAAU,IAAI;IAChCE,WAAWhB,KAAK;MACd,OAAOH,cAAA,CAAeoB,QAAQ,CAACjB,KAAA;IACjC;IACAkB,SAASlB,KAAK;MACZ,IAAIJ,KAAA,CAAMkB,UAAU,IAAIlB,KAAA,CAAMmB,UAAU,EACtC;MAEF,IAAI,CAAClB,cAAA,CAAeoB,QAAQ,CAACjB,KAAA,GAC3BF,QAAA,CAASD,cAAA,CAAesB,MAAM,CAACnB,KAAA;IAEnC;IACAoB,YAAYpB,KAAK;MACf,IAAIJ,KAAA,CAAMkB,UAAU,IAAIlB,KAAA,CAAMmB,UAAU,EACtC;MAEF,IAAIlB,cAAA,CAAeoB,QAAQ,CAACjB,KAAA,GAC1BF,QAAA,CAASD,cAAA,CAAewB,MAAM,CAACC,aAAA,IAAiBA,aAAA,KAAkBtB,KAAA;IAEtE;IACAuB,YAAYvB,KAAK;MACf,IAAIJ,KAAA,CAAMkB,UAAU,IAAIlB,KAAA,CAAMmB,UAAU,EACtC;MAEF,IAAIlB,cAAA,CAAeoB,QAAQ,CAACjB,KAAA,GAC1BF,QAAA,CAASD,cAAA,CAAewB,MAAM,CAACC,aAAA,IAAiBA,aAAA,KAAkBtB,KAAA,QAElEF,QAAA,CAASD,cAAA,CAAesB,MAAM,CAACnB,KAAA;IAEnC;IACAwB,WAAWxB,KAAK,EAAEyB,CAAC;MACjB,IAAIC,CAAA,GAAI,IAAInB,GAAA,CAAIF,aAAA,CAAcsB,OAAO;MACrC,IAAIF,CAAA,CAAEf,SAAS,EACbgB,CAAA,CAAEE,GAAG,CAAC5B,KAAA,EAAOyB,CAAA,OAEbC,CAAA,CAAEG,MAAM,CAAC7B,KAAA;MAGXK,aAAA,CAAcsB,OAAO,GAAGD,CAAA;MACxBlB,UAAA,CAAWsB,gBAAgB,CAAC,IAAAC,sBAAc,KAAKL,CAAA,CAAEM,MAAM;IACzD;IACAC,eAAA,EAAiB,CAAArB,sBAAA,GAAAhB,KAAA,CAAMqC,eAAe,cAArBrB,sBAAA,cAAAA,sBAAA,GAA0BF,SAAA,GAAY,YAAY;eACnEA,SAAA;gBACAP;EACF;EAEA,OAAOU,KAAA;AACT"},"metadata":{},"sourceType":"module","externalDependencies":[]}