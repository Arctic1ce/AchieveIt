{"ast":null,"code":"// src/index.ts\nimport { chain } from \"@react-aria/utils\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport { useCallbackRef } from \"@nextui-org/use-callback-ref\";\nimport { useCallback, useId } from \"react\";\nfunction useDisclosure(props = {}) {\n  const {\n    id: idProp,\n    defaultOpen,\n    isOpen: isOpenProp,\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    onChange = () => {}\n  } = props;\n  const onOpenPropCallbackRef = useCallbackRef(onOpenProp);\n  const onClosePropCallbackRef = useCallbackRef(onCloseProp);\n  const [isOpen, setIsOpen] = useControlledState(isOpenProp, defaultOpen || false, onChange);\n  const reactId = useId();\n  const id = idProp || reactId;\n  const isControlled = isOpenProp !== void 0;\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n    onClosePropCallbackRef == null ? void 0 : onClosePropCallbackRef();\n  }, [isControlled, onClosePropCallbackRef]);\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n    onOpenPropCallbackRef == null ? void 0 : onOpenPropCallbackRef();\n  }, [isControlled, onOpenPropCallbackRef]);\n  const onOpenChange = useCallback(() => {\n    const action = isOpen ? onClose : onOpen;\n    action();\n  }, [isOpen, onOpen, onClose]);\n  return {\n    isOpen: !!isOpen,\n    onOpen,\n    onClose,\n    onOpenChange,\n    isControlled,\n    getButtonProps: (props2 = {}) => ({\n      ...props2,\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n      onClick: chain(props2.onClick, onOpenChange)\n    }),\n    getDisclosureProps: (props2 = {}) => ({\n      ...props2,\n      hidden: !isOpen,\n      id\n    })\n  };\n}\nexport { useDisclosure };","map":{"version":3,"names":["chain","useControlledState","useCallbackRef","useCallback","useId","useDisclosure","props","id","idProp","defaultOpen","isOpen","isOpenProp","onClose","onCloseProp","onOpen","onOpenProp","onChange","onOpenPropCallbackRef","onClosePropCallbackRef","setIsOpen","reactId","isControlled","onOpenChange","action","getButtonProps","props2","onClick","getDisclosureProps","hidden"],"sources":["C:/Users/joelp/csc-307-achieveit/AchieveIt/node_modules/@nextui-org/use-disclosure/dist/index.mjs"],"sourcesContent":["// src/index.ts\nimport { chain } from \"@react-aria/utils\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport { useCallbackRef } from \"@nextui-org/use-callback-ref\";\nimport { useCallback, useId } from \"react\";\nfunction useDisclosure(props = {}) {\n  const {\n    id: idProp,\n    defaultOpen,\n    isOpen: isOpenProp,\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    onChange = () => {\n    }\n  } = props;\n  const onOpenPropCallbackRef = useCallbackRef(onOpenProp);\n  const onClosePropCallbackRef = useCallbackRef(onCloseProp);\n  const [isOpen, setIsOpen] = useControlledState(isOpenProp, defaultOpen || false, onChange);\n  const reactId = useId();\n  const id = idProp || reactId;\n  const isControlled = isOpenProp !== void 0;\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n    onClosePropCallbackRef == null ? void 0 : onClosePropCallbackRef();\n  }, [isControlled, onClosePropCallbackRef]);\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n    onOpenPropCallbackRef == null ? void 0 : onOpenPropCallbackRef();\n  }, [isControlled, onOpenPropCallbackRef]);\n  const onOpenChange = useCallback(() => {\n    const action = isOpen ? onClose : onOpen;\n    action();\n  }, [isOpen, onOpen, onClose]);\n  return {\n    isOpen: !!isOpen,\n    onOpen,\n    onClose,\n    onOpenChange,\n    isControlled,\n    getButtonProps: (props2 = {}) => ({\n      ...props2,\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n      onClick: chain(props2.onClick, onOpenChange)\n    }),\n    getDisclosureProps: (props2 = {}) => ({\n      ...props2,\n      hidden: !isOpen,\n      id\n    })\n  };\n}\nexport {\n  useDisclosure\n};\n"],"mappings":"AAAA;AACA,SAASA,KAAK,QAAQ,mBAAmB;AACzC,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,SAASC,cAAc,QAAQ,8BAA8B;AAC7D,SAASC,WAAW,EAAEC,KAAK,QAAQ,OAAO;AAC1C,SAASC,aAAaA,CAACC,KAAK,GAAG,CAAC,CAAC,EAAE;EACjC,MAAM;IACJC,EAAE,EAAEC,MAAM;IACVC,WAAW;IACXC,MAAM,EAAEC,UAAU;IAClBC,OAAO,EAAEC,WAAW;IACpBC,MAAM,EAAEC,UAAU;IAClBC,QAAQ,GAAGA,CAAA,KAAM,CACjB;EACF,CAAC,GAAGV,KAAK;EACT,MAAMW,qBAAqB,GAAGf,cAAc,CAACa,UAAU,CAAC;EACxD,MAAMG,sBAAsB,GAAGhB,cAAc,CAACW,WAAW,CAAC;EAC1D,MAAM,CAACH,MAAM,EAAES,SAAS,CAAC,GAAGlB,kBAAkB,CAACU,UAAU,EAAEF,WAAW,IAAI,KAAK,EAAEO,QAAQ,CAAC;EAC1F,MAAMI,OAAO,GAAGhB,KAAK,CAAC,CAAC;EACvB,MAAMG,EAAE,GAAGC,MAAM,IAAIY,OAAO;EAC5B,MAAMC,YAAY,GAAGV,UAAU,KAAK,KAAK,CAAC;EAC1C,MAAMC,OAAO,GAAGT,WAAW,CAAC,MAAM;IAChC,IAAI,CAACkB,YAAY,EAAE;MACjBF,SAAS,CAAC,KAAK,CAAC;IAClB;IACAD,sBAAsB,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,sBAAsB,CAAC,CAAC;EACpE,CAAC,EAAE,CAACG,YAAY,EAAEH,sBAAsB,CAAC,CAAC;EAC1C,MAAMJ,MAAM,GAAGX,WAAW,CAAC,MAAM;IAC/B,IAAI,CAACkB,YAAY,EAAE;MACjBF,SAAS,CAAC,IAAI,CAAC;IACjB;IACAF,qBAAqB,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAAC,CAAC;EAClE,CAAC,EAAE,CAACI,YAAY,EAAEJ,qBAAqB,CAAC,CAAC;EACzC,MAAMK,YAAY,GAAGnB,WAAW,CAAC,MAAM;IACrC,MAAMoB,MAAM,GAAGb,MAAM,GAAGE,OAAO,GAAGE,MAAM;IACxCS,MAAM,CAAC,CAAC;EACV,CAAC,EAAE,CAACb,MAAM,EAAEI,MAAM,EAAEF,OAAO,CAAC,CAAC;EAC7B,OAAO;IACLF,MAAM,EAAE,CAAC,CAACA,MAAM;IAChBI,MAAM;IACNF,OAAO;IACPU,YAAY;IACZD,YAAY;IACZG,cAAc,EAAEA,CAACC,MAAM,GAAG,CAAC,CAAC,MAAM;MAChC,GAAGA,MAAM;MACT,eAAe,EAAEf,MAAM;MACvB,eAAe,EAAEH,EAAE;MACnBmB,OAAO,EAAE1B,KAAK,CAACyB,MAAM,CAACC,OAAO,EAAEJ,YAAY;IAC7C,CAAC,CAAC;IACFK,kBAAkB,EAAEA,CAACF,MAAM,GAAG,CAAC,CAAC,MAAM;MACpC,GAAGA,MAAM;MACTG,MAAM,EAAE,CAAClB,MAAM;MACfH;IACF,CAAC;EACH,CAAC;AACH;AACA,SACEF,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}