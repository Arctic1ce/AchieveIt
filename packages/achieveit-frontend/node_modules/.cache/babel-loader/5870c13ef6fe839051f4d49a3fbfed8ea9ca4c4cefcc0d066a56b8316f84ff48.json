{"ast":null,"code":"var _jsxFileName = \"/Users/adavari/git/AchieveIt/packages/achieveit-frontend/src/AchieveIt.js\",\n  _s = $RefreshSig$();\n/* Filename: AchieveIt.js */\nimport Navbar from './Navbar';\nimport TaskList from './TaskList';\nimport React, { useState, useEffect } from 'react';\n\n// The server location\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst backend = require('./server-locations.json')['backend'];\nconst serverUrl = backend;\nfunction AchieveIt() {\n  _s();\n  const [taskLists, setTasks] = useState([]);\n  const [numItems, setNumItems] = useState(0);\n  useEffect(() => {\n    getTasks();\n  }, []);\n\n  /*\n   * GetTasks: Fetches all the tasks from the database and updates the state\n   * */\n  function getTasks() {\n    fetch(serverUrl).then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => setTasks(data)).catch(error => {\n      console.error('Fetch error:', error);\n    });\n  }\n\n  /*\n   * Update the number of items in the list\n   *  */\n  useEffect(() => {\n    let count = 0;\n    for (let i = 0; i < taskLists.length; i++) {\n      count += taskLists[i].items.length;\n    }\n    setNumItems(count);\n  }, [taskLists]);\n  async function addList(listName) {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    try {\n      await fetch(serverUrl + '/?name=' + listName, requestOptions);\n      await getTasks();\n    } catch (error) {\n      console.error('Fetch error:', error);\n    }\n  }\n  /*\n   * Insert a task into the database\n   * */\n  function insertTask(list, task) {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    };\n    fetch(serverUrl + `/tasks/?name=${list}`, requestOptions).then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(() => getTasks()).catch(error => console.error('Fetch error:', error));\n  }\n  /* Check or uncheck a task */\n  async function setChecked(taskName, itemName, status) {\n    try {\n      // Set the task to completed\n      const requestOptions = {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      console.log('checking: ' + taskName + ' ' + itemName + ' ' + status);\n\n      // PATCH request using fetch with async/await\n      const response = await fetch(serverUrl + '/?name=' + taskName + '&task=' + itemName + '&status=' + status, requestOptions);\n\n      // Check if the request was successful (status code 2xx)\n      if (!response.ok) {\n        throw new Error(`Failed to update task status. Status: ${response.status}`);\n      }\n\n      // Update the state of the list of tasks\n      await getTasks();\n\n      // Optionally, you might want to return some information about the update\n      return {\n        success: true,\n        message: 'Task status updated successfully'\n      };\n    } catch (error) {\n      console.error('An error occurred:', error);\n      // Handle or propagate the error as needed\n      throw error;\n    }\n  }\n  /* Delete a task */\n  async function deleteTask(listName, taskName) {\n    try {\n      // Delete the task\n      const requestOptions = {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n\n      // DELETE request using fetch with async/await\n      const response = await fetch(serverUrl + '/?name=' + listName + '&task=' + taskName, requestOptions);\n\n      // Check if the request was successful (status code 2xx)\n      if (!response.ok) {\n        throw new Error(`Failed to delete task. Status: ${response.status}`);\n      }\n\n      // Update the state of the list of tasks\n      await getTasks();\n\n      // Optionally, you might want to return some information about the update\n      return {\n        success: true,\n        message: 'Task deleted successfully'\n      };\n    } catch (error) {\n      console.error('An error occurred:', error);\n      // Handle or propagate the error as needed\n      throw error;\n    }\n  }\n  /* Render the page */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"AchieveIt\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"taskList\",\n      children: /*#__PURE__*/_jsxDEV(TaskList, {\n        lists: taskLists,\n        addList: addList,\n        numItems: numItems,\n        setChecked: setChecked,\n        insertTask: insertTask,\n        deleteTask: deleteTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n/* Export the component! */\n_s(AchieveIt, \"GF5+XnK0FYj45oCIwYnPnMQc/50=\");\n_c = AchieveIt;\nexport default AchieveIt;\nvar _c;\n$RefreshReg$(_c, \"AchieveIt\");","map":{"version":3,"names":["Navbar","TaskList","React","useState","useEffect","jsxDEV","_jsxDEV","backend","require","serverUrl","AchieveIt","_s","taskLists","setTasks","numItems","setNumItems","getTasks","fetch","then","response","ok","Error","json","data","catch","error","console","count","i","length","items","addList","listName","requestOptions","method","headers","insertTask","list","task","body","JSON","stringify","setChecked","taskName","itemName","status","log","success","message","deleteTask","className","children","fileName","_jsxFileName","lineNumber","columnNumber","lists","_c","$RefreshReg$"],"sources":["/Users/adavari/git/AchieveIt/packages/achieveit-frontend/src/AchieveIt.js"],"sourcesContent":["/* Filename: AchieveIt.js */\nimport Navbar from './Navbar';\nimport TaskList from './TaskList';\nimport React, { useState, useEffect } from 'react';\n\n// The server location\nconst backend = require('./server-locations.json')['backend'];\nconst serverUrl = backend;\n\nfunction AchieveIt() {\n  const [taskLists, setTasks] = useState([]);\n  const [numItems, setNumItems] = useState(0);\n\n  useEffect(() => {\n    getTasks();\n  }, []);\n\n  /*\n   * GetTasks: Fetches all the tasks from the database and updates the state\n   * */\n  function getTasks() {\n    fetch(serverUrl)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then((data) => setTasks(data))\n      .catch((error) => {\n        console.error('Fetch error:', error);\n      });\n  }\n\n  /*\n   * Update the number of items in the list\n   *  */\n  useEffect(() => {\n    let count = 0;\n    for (let i = 0; i < taskLists.length; i++) {\n      count += taskLists[i].items.length;\n    }\n    setNumItems(count);\n  }, [taskLists]);\n\n  async function addList(listName) {\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n    };\n    try {\n      await fetch(serverUrl + '/?name=' + listName, requestOptions);\n      await getTasks();\n    } catch (error) {\n      console.error('Fetch error:', error);\n    }\n  }\n  /*\n   * Insert a task into the database\n   * */\n  function insertTask(list, task) {\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(task),\n    };\n\n    fetch(serverUrl + `/tasks/?name=${list}`, requestOptions)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then(() => getTasks())\n      .catch((error) => console.error('Fetch error:', error));\n  }\n  /* Check or uncheck a task */\n  async function setChecked(taskName, itemName, status) {\n    try {\n      // Set the task to completed\n      const requestOptions = {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n      };\n\n      console.log('checking: ' + taskName + ' ' + itemName + ' ' + status);\n\n      // PATCH request using fetch with async/await\n      const response = await fetch(\n        serverUrl +\n          '/?name=' +\n          taskName +\n          '&task=' +\n          itemName +\n          '&status=' +\n          status,\n        requestOptions,\n      );\n\n      // Check if the request was successful (status code 2xx)\n      if (!response.ok) {\n        throw new Error(\n          `Failed to update task status. Status: ${response.status}`,\n        );\n      }\n\n      // Update the state of the list of tasks\n      await getTasks();\n\n      // Optionally, you might want to return some information about the update\n      return { success: true, message: 'Task status updated successfully' };\n    } catch (error) {\n      console.error('An error occurred:', error);\n      // Handle or propagate the error as needed\n      throw error;\n    }\n  }\n  /* Delete a task */\n  async function deleteTask(listName, taskName) {\n    try {\n      // Delete the task\n      const requestOptions = {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n      };\n\n      // DELETE request using fetch with async/await\n      const response = await fetch(\n        serverUrl + '/?name=' + listName + '&task=' + taskName,\n        requestOptions,\n      );\n\n      // Check if the request was successful (status code 2xx)\n      if (!response.ok) {\n        throw new Error(`Failed to delete task. Status: ${response.status}`);\n      }\n\n      // Update the state of the list of tasks\n      await getTasks();\n\n      // Optionally, you might want to return some information about the update\n      return { success: true, message: 'Task deleted successfully' };\n    } catch (error) {\n      console.error('An error occurred:', error);\n      // Handle or propagate the error as needed\n      throw error;\n    }\n  }\n  /* Render the page */\n  return (\n    <div className=\"AchieveIt\">\n      <div className=\"header\">\n        <Navbar />\n      </div>\n      <div className=\"taskList\">\n        <TaskList\n          lists={taskLists}\n          addList={addList}\n          numItems={numItems}\n          setChecked={setChecked}\n          insertTask={insertTask}\n          deleteTask={deleteTask}\n        />\n      </div>\n    </div>\n  );\n}\n/* Export the component! */\nexport default AchieveIt;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}