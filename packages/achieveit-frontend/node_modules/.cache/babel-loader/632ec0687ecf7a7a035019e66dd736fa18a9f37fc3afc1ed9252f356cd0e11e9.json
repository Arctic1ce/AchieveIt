{"ast":null,"code":"/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2022 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */class $5b160d28a433310d$export$c17fa47878dc55b6 {\n  /** Returns a localized string for the given key and locale. */getStringForLocale(key, locale) {\n    let strings = this.strings[locale];\n    if (!strings) {\n      strings = $5b160d28a433310d$var$getStringsForLocale(locale, this.strings, this.defaultLocale);\n      this.strings[locale] = strings;\n    }\n    let string = strings[key];\n    if (!string) throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    return string;\n  }\n  constructor(messages, defaultLocale = \"en-US\") {\n    // Clone messages so we don't modify the original object.\n    this.strings = {\n      ...messages\n    };\n    this.defaultLocale = defaultLocale;\n  }\n}\nfunction $5b160d28a433310d$var$getStringsForLocale(locale, strings, defaultLocale = \"en-US\") {\n  // If there is an exact match, use it.\n  if (strings[locale]) return strings[locale];\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n  let language = $5b160d28a433310d$var$getLanguage(locale);\n  if (strings[language]) return strings[language];\n  for (let key in strings) {\n    if (key.startsWith(language + \"-\")) return strings[key];\n  }\n  // Nothing close, use english.\n  return strings[defaultLocale];\n}\nfunction $5b160d28a433310d$var$getLanguage(locale) {\n  // @ts-ignore\n  if (Intl.Locale)\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  return locale.split(\"-\")[0];\n}\n\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nconst $6db58dc88e78b024$var$pluralRulesCache = new Map();\nconst $6db58dc88e78b024$var$numberFormatCache = new Map();\nclass $6db58dc88e78b024$export$2f817fcdc4b89ae0 {\n  /** Formats a localized string for the given key with the provided variables. */format(key, variables) {\n    let message = this.strings.getStringForLocale(key, this.locale);\n    return typeof message === \"function\" ? message(variables, this) : message;\n  }\n  plural(count, options, type = \"cardinal\") {\n    let opt = options[\"=\" + count];\n    if (opt) return typeof opt === \"function\" ? opt() : opt;\n    let key = this.locale + \":\" + type;\n    let pluralRules = $6db58dc88e78b024$var$pluralRulesCache.get(key);\n    if (!pluralRules) {\n      pluralRules = new Intl.PluralRules(this.locale, {\n        type: type\n      });\n      $6db58dc88e78b024$var$pluralRulesCache.set(key, pluralRules);\n    }\n    let selected = pluralRules.select(count);\n    opt = options[selected] || options.other;\n    return typeof opt === \"function\" ? opt() : opt;\n  }\n  number(value) {\n    let numberFormat = $6db58dc88e78b024$var$numberFormatCache.get(this.locale);\n    if (!numberFormat) {\n      numberFormat = new Intl.NumberFormat(this.locale);\n      $6db58dc88e78b024$var$numberFormatCache.set(this.locale, numberFormat);\n    }\n    return numberFormat.format(value);\n  }\n  select(options, value) {\n    let opt = options[value] || options.other;\n    return typeof opt === \"function\" ? opt() : opt;\n  }\n  constructor(locale, strings) {\n    this.locale = locale;\n    this.strings = strings;\n  }\n}\nexport { $5b160d28a433310d$export$c17fa47878dc55b6 as LocalizedStringDictionary, $6db58dc88e78b024$export$2f817fcdc4b89ae0 as LocalizedStringFormatter };","map":{"version":3,"names":["$5b160d28a433310d$export$c17fa47878dc55b6","getStringForLocale","key","locale","strings","$5b160d28a433310d$var$getStringsForLocale","defaultLocale","string","Error","constructor","messages","language","$5b160d28a433310d$var$getLanguage","startsWith","Intl","Locale","split","$6db58dc88e78b024$var$pluralRulesCache","Map","$6db58dc88e78b024$var$numberFormatCache","$6db58dc88e78b024$export$2f817fcdc4b89ae0","format","variables","message","plural","count","options","type","opt","pluralRules","get","PluralRules","set","selected","select","other","number","value","numberFormat","NumberFormat"],"sources":["C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@internationalized\\string\\dist\\packages\\@internationalized\\string\\src\\index.ts","C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@internationalized\\string\\dist\\packages\\@internationalized\\string\\src\\LocalizedStringDictionary.ts","C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@internationalized\\string\\dist\\packages\\@internationalized\\string\\src\\LocalizedStringFormatter.ts"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {Variables, LocalizedString} from './LocalizedStringFormatter';\nexport type {LocalizedStrings} from './LocalizedStringDictionary';\nexport {LocalizedStringDictionary} from './LocalizedStringDictionary';\nexport {LocalizedStringFormatter} from './LocalizedStringFormatter';\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport type {LocalizedString} from './LocalizedStringFormatter';\n\nexport type LocalizedStrings<K extends string, T extends LocalizedString> = {\n  [lang: string]: Record<K, T>\n};\n\n/**\n * Stores a mapping of localized strings. Can be used to find the\n * closest available string for a given locale.\n */\nexport class LocalizedStringDictionary<K extends string = string, T extends LocalizedString = string> {\n  private strings: LocalizedStrings<K, T>;\n  private defaultLocale: string;\n\n  constructor(messages: LocalizedStrings<K, T>, defaultLocale: string = 'en-US') {\n    // Clone messages so we don't modify the original object.\n    this.strings = {...messages};\n    this.defaultLocale = defaultLocale;\n  }\n\n  /** Returns a localized string for the given key and locale. */\n  getStringForLocale(key: K, locale: string): T {\n    let strings = this.strings[locale];\n    if (!strings) {\n      strings = getStringsForLocale(locale, this.strings, this.defaultLocale);\n      this.strings[locale] = strings;\n    }\n\n    let string = strings[key];\n    if (!string) {\n      throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    }\n\n    return string;\n  }\n}\n\nfunction getStringsForLocale<K extends string, T extends LocalizedString>(locale: string, strings: LocalizedStrings<K, T>, defaultLocale = 'en-US') {\n  // If there is an exact match, use it.\n  if (strings[locale]) {\n    return strings[locale];\n  }\n\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n  let language = getLanguage(locale);\n  if (strings[language]) {\n    return strings[language];\n  }\n\n  for (let key in strings) {\n    if (key.startsWith(language + '-')) {\n      return strings[key];\n    }\n  }\n\n  // Nothing close, use english.\n  return strings[defaultLocale];\n}\n\nfunction getLanguage(locale: string) {\n  // @ts-ignore\n  if (Intl.Locale) {\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  }\n\n  return locale.split('-')[0];\n}\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport type {LocalizedStringDictionary} from './LocalizedStringDictionary';\n\nexport type Variables = Record<string, string | number | boolean> | undefined;\nexport type LocalizedString = string | ((args: Variables, formatter?: LocalizedStringFormatter<any, any>) => string);\ntype InternalString = string | (() => string);\n\nconst pluralRulesCache = new Map<string, Intl.PluralRules>();\nconst numberFormatCache = new Map<string, Intl.NumberFormat>();\n\n/**\n * Formats localized strings from a LocalizedStringDictionary. Supports interpolating variables,\n * selecting the correct pluralization, and formatting numbers for the locale.\n */\nexport class LocalizedStringFormatter<K extends string = string, T extends LocalizedString = string> {\n  private locale: string;\n  private strings: LocalizedStringDictionary<K, T>;\n\n  constructor(locale: string, strings: LocalizedStringDictionary<K, T>) {\n    this.locale = locale;\n    this.strings = strings;\n  }\n\n  /** Formats a localized string for the given key with the provided variables. */\n  format(key: K, variables?: Variables): string {\n    let message = this.strings.getStringForLocale(key, this.locale);\n    return typeof message === 'function' ? message(variables, this) : message;\n  }\n\n  protected plural(count: number, options: Record<string, InternalString>, type: Intl.PluralRuleType = 'cardinal') {\n    let opt = options['=' + count];\n    if (opt) {\n      return typeof opt === 'function' ? opt() : opt;\n    }\n\n    let key = this.locale + ':' + type;\n    let pluralRules = pluralRulesCache.get(key);\n    if (!pluralRules) {\n      pluralRules = new Intl.PluralRules(this.locale, {type});\n      pluralRulesCache.set(key, pluralRules);\n    }\n\n    let selected = pluralRules.select(count);\n    opt = options[selected] || options.other;\n    return typeof opt === 'function' ? opt() : opt;\n  }\n\n  protected number(value: number) {\n    let numberFormat = numberFormatCache.get(this.locale);\n    if (!numberFormat) {\n      numberFormat = new Intl.NumberFormat(this.locale);\n      numberFormatCache.set(this.locale, numberFormat);\n    }\n    return numberFormat.format(value);\n  }\n\n  protected select(options: Record<string, InternalString>, value: string) {\n    let opt = options[value] || options.other;\n    return typeof opt === 'function' ? opt() : opt;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}