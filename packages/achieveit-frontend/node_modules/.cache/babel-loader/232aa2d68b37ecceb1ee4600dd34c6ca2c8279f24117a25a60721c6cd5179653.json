{"ast":null,"code":"import $1DoQa$intlmessageformat from \"intl-messageformat\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\nclass $d6fd23bc337660df$export$64839e615120df17 {\n  getStringForLocale(key, locale) {\n    let strings = this.messages[locale];\n    if (!strings) {\n      strings = $d6fd23bc337660df$var$getStringsForLocale(locale, this.messages, this.defaultLocale);\n      this.messages[locale] = strings;\n    }\n    let string = strings[key];\n    if (!string) throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    return string;\n  }\n  constructor(messages, defaultLocale = \"en-US\") {\n    // Clone messages so we don't modify the original object.\n    this.messages = {\n      ...messages\n    };\n    this.defaultLocale = defaultLocale;\n  }\n}\nfunction $d6fd23bc337660df$var$getStringsForLocale(locale, strings, defaultLocale = \"en-US\") {\n  // If there is an exact match, use it.\n  if (strings[locale]) return strings[locale];\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n  let language = $d6fd23bc337660df$var$getLanguage(locale);\n  if (strings[language]) return strings[language];\n  for (let key in strings) {\n    if (key.startsWith(language + \"-\")) return strings[key];\n  }\n  // Nothing close, use english.\n  return strings[defaultLocale];\n}\nfunction $d6fd23bc337660df$var$getLanguage(locale) {\n  // @ts-ignore\n  if (Intl.Locale)\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  return locale.split(\"-\")[0];\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nclass $972eb555d604f491$export$526ebc05ff964723 {\n  format(key, variables) {\n    let message = this.cache[key];\n    if (!message) {\n      let msg = this.messages.getStringForLocale(key, this.locale);\n      if (!msg) throw new Error(`Could not find intl message ${key} in ${this.locale} locale`);\n      message = new (0, $1DoQa$intlmessageformat)(msg, this.locale);\n      this.cache[key] = message;\n    }\n    let varCopy;\n    if (variables) varCopy = Object.keys(variables).reduce((acc, key) => {\n      acc[key] = variables[key] == null ? false : variables[key];\n      return acc;\n    }, {});\n    return message.format(varCopy);\n  }\n  constructor(locale, messages) {\n    this.locale = locale;\n    this.messages = messages;\n    this.cache = {};\n  }\n}\nexport { $d6fd23bc337660df$export$64839e615120df17 as MessageDictionary, $972eb555d604f491$export$526ebc05ff964723 as MessageFormatter };","map":{"version":3,"names":["$d6fd23bc337660df$export$64839e615120df17","getStringForLocale","key","locale","strings","messages","$d6fd23bc337660df$var$getStringsForLocale","defaultLocale","string","Error","constructor","language","$d6fd23bc337660df$var$getLanguage","startsWith","Intl","Locale","split","$972eb555d604f491$export$526ebc05ff964723","format","variables","message","cache","msg","$1DoQa$intlmessageformat","varCopy","Object","keys","reduce","acc"],"sources":["C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@internationalized\\message\\dist\\packages\\@internationalized\\message\\src\\index.ts","C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@internationalized\\message\\dist\\packages\\@internationalized\\message\\src\\MessageDictionary.ts","C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@internationalized\\message\\dist\\packages\\@internationalized\\message\\src\\MessageFormatter.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {LocalizedStrings} from './MessageDictionary';\nexport {MessageDictionary} from './MessageDictionary';\nexport {MessageFormatter} from './MessageFormatter';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type LocalizedStrings = {\n  [lang: string]: {\n    [key: string]: string\n  }\n};\n\n/**\n * Stores a mapping of localized strings. Can be used to find the\n * closest available string for a given locale.\n */\nexport class MessageDictionary {\n  private messages: LocalizedStrings;\n  private defaultLocale: string;\n\n  constructor(messages: LocalizedStrings, defaultLocale: string = 'en-US') {\n    // Clone messages so we don't modify the original object.\n    this.messages = {...messages};\n    this.defaultLocale = defaultLocale;\n  }\n\n  getStringForLocale(key: string, locale: string) {\n    let strings = this.messages[locale];\n    if (!strings) {\n      strings = getStringsForLocale(locale, this.messages, this.defaultLocale);\n      this.messages[locale] = strings;\n    }\n\n    let string = strings[key];\n    if (!string) {\n      throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    }\n\n    return string;\n  }\n}\n\nfunction getStringsForLocale(locale: string, strings: LocalizedStrings, defaultLocale = 'en-US') {\n  // If there is an exact match, use it.\n  if (strings[locale]) {\n    return strings[locale];\n  }\n\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n  let language = getLanguage(locale);\n  if (strings[language]) {\n    return strings[language];\n  }\n\n  for (let key in strings) {\n    if (key.startsWith(language + '-')) {\n      return strings[key];\n    }\n  }\n\n  // Nothing close, use english.\n  return strings[defaultLocale];\n}\n\nfunction getLanguage(locale: string) {\n  // @ts-ignore\n  if (Intl.Locale) {\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  }\n\n  return locale.split('-')[0];\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FormatXMLElementFn, PrimitiveType} from 'intl-messageformat/src/formatters';\nimport IntlMessageFormat from 'intl-messageformat';\nimport {MessageDictionary} from './MessageDictionary';\n\n/**\n * Formats ICU Message strings to create localized strings from a MessageDictionary.\n */\nexport class MessageFormatter {\n  private locale: string;\n  private messages: MessageDictionary;\n  private cache: {[key: string]: IntlMessageFormat};\n\n  constructor(locale: string, messages: MessageDictionary) {\n    this.locale = locale;\n    this.messages = messages;\n    this.cache = {};\n  }\n\n  format<T = void>(key: string, variables: Record<string, PrimitiveType | T | FormatXMLElementFn<T, string | T | (string | T)[]>> | undefined) {\n    let message = this.cache[key];\n    if (!message) {\n      let msg = this.messages.getStringForLocale(key, this.locale);\n      if (!msg) {\n        throw new Error(`Could not find intl message ${key} in ${this.locale} locale`);\n      }\n\n      message = new IntlMessageFormat(msg, this.locale);\n      this.cache[key] = message;\n    }\n    let varCopy: Record<string, PrimitiveType | T | FormatXMLElementFn<T, string | T | (string | T)[]>> | undefined;\n    if (variables) {\n      varCopy = Object.keys(variables).reduce((acc, key) => {\n        acc[key] = variables[key] == null ? false : variables[key];\n        return acc;\n      }, {});\n    }\n\n    return message.format(varCopy);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}