{"ast":null,"code":"\"use client\";\n\n// src/use-menu.ts\nimport { useMenu as useAriaMenu } from \"@react-aria/menu\";\nimport { menu } from \"@nextui-org/theme\";\nimport { useTreeState } from \"@react-stately/tree\";\nimport { filterDOMProps, useDOMRef } from \"@nextui-org/react-utils\";\nimport { useMemo } from \"react\";\nimport { clsx } from \"@nextui-org/shared-utils\";\nfunction useMenu(props) {\n  const {\n    as,\n    ref,\n    variant,\n    color,\n    children,\n    disableAnimation,\n    onAction,\n    closeOnSelect,\n    itemClasses,\n    className,\n    state: propState,\n    topContent,\n    bottomContent,\n    hideEmptyContent = false,\n    hideSelectedIcon = false,\n    emptyContent = \"No items.\",\n    menuProps: userMenuProps,\n    onClose,\n    classNames,\n    ...otherProps\n  } = props;\n  const Component = as || \"ul\";\n  const domRef = useDOMRef(ref);\n  const shouldFilterDOMProps = typeof Component === \"string\";\n  const innerState = useTreeState({\n    ...otherProps,\n    children\n  });\n  const state = propState || innerState;\n  const {\n    menuProps\n  } = useAriaMenu(otherProps, state, domRef);\n  const slots = useMemo(() => menu({\n    className\n  }), [className]);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const getBaseProps = (props2 = {}) => {\n    return {\n      ref: domRef,\n      \"data-slot\": \"base\",\n      className: slots.base({\n        class: baseStyles\n      }),\n      ...filterDOMProps(otherProps, {\n        enabled: shouldFilterDOMProps\n      }),\n      ...props2\n    };\n  };\n  const getListProps = (props2 = {}) => {\n    return {\n      \"data-slot\": \"list\",\n      className: slots.list({\n        class: classNames == null ? void 0 : classNames.list\n      }),\n      ...userMenuProps,\n      ...menuProps,\n      ...props2\n    };\n  };\n  const getEmptyContentProps = (props2 = {}) => {\n    return {\n      children: emptyContent,\n      className: slots.emptyContent({\n        class: classNames == null ? void 0 : classNames.emptyContent\n      }),\n      ...props2\n    };\n  };\n  return {\n    Component,\n    state,\n    variant,\n    color,\n    disableAnimation,\n    onAction,\n    onClose,\n    topContent,\n    bottomContent,\n    closeOnSelect,\n    className,\n    itemClasses,\n    getBaseProps,\n    getListProps,\n    hideEmptyContent,\n    hideSelectedIcon,\n    getEmptyContentProps\n  };\n}\nexport { useMenu };","map":{"version":3,"names":["useMenu","useAriaMenu","menu","useTreeState","filterDOMProps","useDOMRef","useMemo","clsx","props","as","ref","variant","color","children","disableAnimation","onAction","closeOnSelect","itemClasses","className","state","propState","topContent","bottomContent","hideEmptyContent","hideSelectedIcon","emptyContent","menuProps","userMenuProps","onClose","classNames","otherProps","Component","domRef","shouldFilterDOMProps","innerState","slots","baseStyles","base","getBaseProps","props2","class","enabled","getListProps","list","getEmptyContentProps"],"sources":["C:/Users/joelp/csc-307-achieveit/AchieveIt/node_modules/@nextui-org/menu/dist/chunk-R4ZQ5Y3Q.mjs"],"sourcesContent":["\"use client\";\n\n// src/use-menu.ts\nimport { useMenu as useAriaMenu } from \"@react-aria/menu\";\nimport { menu } from \"@nextui-org/theme\";\nimport { useTreeState } from \"@react-stately/tree\";\nimport { filterDOMProps, useDOMRef } from \"@nextui-org/react-utils\";\nimport { useMemo } from \"react\";\nimport { clsx } from \"@nextui-org/shared-utils\";\nfunction useMenu(props) {\n  const {\n    as,\n    ref,\n    variant,\n    color,\n    children,\n    disableAnimation,\n    onAction,\n    closeOnSelect,\n    itemClasses,\n    className,\n    state: propState,\n    topContent,\n    bottomContent,\n    hideEmptyContent = false,\n    hideSelectedIcon = false,\n    emptyContent = \"No items.\",\n    menuProps: userMenuProps,\n    onClose,\n    classNames,\n    ...otherProps\n  } = props;\n  const Component = as || \"ul\";\n  const domRef = useDOMRef(ref);\n  const shouldFilterDOMProps = typeof Component === \"string\";\n  const innerState = useTreeState({ ...otherProps, children });\n  const state = propState || innerState;\n  const { menuProps } = useAriaMenu(otherProps, state, domRef);\n  const slots = useMemo(() => menu({ className }), [className]);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const getBaseProps = (props2 = {}) => {\n    return {\n      ref: domRef,\n      \"data-slot\": \"base\",\n      className: slots.base({ class: baseStyles }),\n      ...filterDOMProps(otherProps, {\n        enabled: shouldFilterDOMProps\n      }),\n      ...props2\n    };\n  };\n  const getListProps = (props2 = {}) => {\n    return {\n      \"data-slot\": \"list\",\n      className: slots.list({ class: classNames == null ? void 0 : classNames.list }),\n      ...userMenuProps,\n      ...menuProps,\n      ...props2\n    };\n  };\n  const getEmptyContentProps = (props2 = {}) => {\n    return {\n      children: emptyContent,\n      className: slots.emptyContent({ class: classNames == null ? void 0 : classNames.emptyContent }),\n      ...props2\n    };\n  };\n  return {\n    Component,\n    state,\n    variant,\n    color,\n    disableAnimation,\n    onAction,\n    onClose,\n    topContent,\n    bottomContent,\n    closeOnSelect,\n    className,\n    itemClasses,\n    getBaseProps,\n    getListProps,\n    hideEmptyContent,\n    hideSelectedIcon,\n    getEmptyContentProps\n  };\n}\n\nexport {\n  useMenu\n};\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA,SAASA,OAAO,IAAIC,WAAW,QAAQ,kBAAkB;AACzD,SAASC,IAAI,QAAQ,mBAAmB;AACxC,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,cAAc,EAAEC,SAAS,QAAQ,yBAAyB;AACnE,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,IAAI,QAAQ,0BAA0B;AAC/C,SAASP,OAAOA,CAACQ,KAAK,EAAE;EACtB,MAAM;IACJC,EAAE;IACFC,GAAG;IACHC,OAAO;IACPC,KAAK;IACLC,QAAQ;IACRC,gBAAgB;IAChBC,QAAQ;IACRC,aAAa;IACbC,WAAW;IACXC,SAAS;IACTC,KAAK,EAAEC,SAAS;IAChBC,UAAU;IACVC,aAAa;IACbC,gBAAgB,GAAG,KAAK;IACxBC,gBAAgB,GAAG,KAAK;IACxBC,YAAY,GAAG,WAAW;IAC1BC,SAAS,EAAEC,aAAa;IACxBC,OAAO;IACPC,UAAU;IACV,GAAGC;EACL,CAAC,GAAGtB,KAAK;EACT,MAAMuB,SAAS,GAAGtB,EAAE,IAAI,IAAI;EAC5B,MAAMuB,MAAM,GAAG3B,SAAS,CAACK,GAAG,CAAC;EAC7B,MAAMuB,oBAAoB,GAAG,OAAOF,SAAS,KAAK,QAAQ;EAC1D,MAAMG,UAAU,GAAG/B,YAAY,CAAC;IAAE,GAAG2B,UAAU;IAAEjB;EAAS,CAAC,CAAC;EAC5D,MAAMM,KAAK,GAAGC,SAAS,IAAIc,UAAU;EACrC,MAAM;IAAER;EAAU,CAAC,GAAGzB,WAAW,CAAC6B,UAAU,EAAEX,KAAK,EAAEa,MAAM,CAAC;EAC5D,MAAMG,KAAK,GAAG7B,OAAO,CAAC,MAAMJ,IAAI,CAAC;IAAEgB;EAAU,CAAC,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAC7D,MAAMkB,UAAU,GAAG7B,IAAI,CAACsB,UAAU,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACQ,IAAI,EAAEnB,SAAS,CAAC;EACjF,MAAMoB,YAAY,GAAGA,CAACC,MAAM,GAAG,CAAC,CAAC,KAAK;IACpC,OAAO;MACL7B,GAAG,EAAEsB,MAAM;MACX,WAAW,EAAE,MAAM;MACnBd,SAAS,EAAEiB,KAAK,CAACE,IAAI,CAAC;QAAEG,KAAK,EAAEJ;MAAW,CAAC,CAAC;MAC5C,GAAGhC,cAAc,CAAC0B,UAAU,EAAE;QAC5BW,OAAO,EAAER;MACX,CAAC,CAAC;MACF,GAAGM;IACL,CAAC;EACH,CAAC;EACD,MAAMG,YAAY,GAAGA,CAACH,MAAM,GAAG,CAAC,CAAC,KAAK;IACpC,OAAO;MACL,WAAW,EAAE,MAAM;MACnBrB,SAAS,EAAEiB,KAAK,CAACQ,IAAI,CAAC;QAAEH,KAAK,EAAEX,UAAU,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACc;MAAK,CAAC,CAAC;MAC/E,GAAGhB,aAAa;MAChB,GAAGD,SAAS;MACZ,GAAGa;IACL,CAAC;EACH,CAAC;EACD,MAAMK,oBAAoB,GAAGA,CAACL,MAAM,GAAG,CAAC,CAAC,KAAK;IAC5C,OAAO;MACL1B,QAAQ,EAAEY,YAAY;MACtBP,SAAS,EAAEiB,KAAK,CAACV,YAAY,CAAC;QAAEe,KAAK,EAAEX,UAAU,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACJ;MAAa,CAAC,CAAC;MAC/F,GAAGc;IACL,CAAC;EACH,CAAC;EACD,OAAO;IACLR,SAAS;IACTZ,KAAK;IACLR,OAAO;IACPC,KAAK;IACLE,gBAAgB;IAChBC,QAAQ;IACRa,OAAO;IACPP,UAAU;IACVC,aAAa;IACbN,aAAa;IACbE,SAAS;IACTD,WAAW;IACXqB,YAAY;IACZI,YAAY;IACZnB,gBAAgB;IAChBC,gBAAgB;IAChBoB;EACF,CAAC;AACH;AAEA,SACE5C,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}