{"ast":null,"code":"\"use client\";\n\n// src/use-checkbox-group.ts\nimport { useCallback, useMemo } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { checkboxGroup } from \"@nextui-org/theme\";\nimport { useCheckboxGroup as useReactAriaCheckboxGroup } from \"@react-aria/checkbox\";\nimport { useCheckboxGroupState } from \"@react-stately/checkbox\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { clsx, safeAriaLabel } from \"@nextui-org/shared-utils\";\nfunction useCheckboxGroup(props) {\n  const {\n    as,\n    ref,\n    classNames,\n    children,\n    label,\n    radius,\n    value,\n    name,\n    defaultValue,\n    size = \"md\",\n    color = \"primary\",\n    orientation = \"vertical\",\n    lineThrough = false,\n    isDisabled = false,\n    disableAnimation = false,\n    validationState,\n    isInvalid = validationState === \"invalid\",\n    isReadOnly,\n    isRequired,\n    onValueChange,\n    description,\n    errorMessage,\n    className,\n    ...otherProps\n  } = props;\n  const Component = as || \"div\";\n  const domRef = useDOMRef(ref);\n  const checkboxGroupProps = useMemo(() => ({\n    value,\n    name,\n    \"aria-label\": safeAriaLabel(otherProps[\"aria-label\"], label),\n    defaultValue,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    orientation,\n    onChange: onValueChange,\n    ...otherProps\n  }), [value, name, label, defaultValue, isRequired, isReadOnly, isInvalid, orientation, onValueChange, otherProps[\"aria-label\"], otherProps]);\n  const groupState = useCheckboxGroupState(checkboxGroupProps);\n  const {\n    labelProps,\n    groupProps,\n    descriptionProps,\n    errorMessageProps\n  } = useReactAriaCheckboxGroup(checkboxGroupProps, groupState);\n  const context = useMemo(() => ({\n    size,\n    color,\n    radius,\n    lineThrough,\n    isInvalid,\n    isDisabled,\n    disableAnimation,\n    groupState\n  }), [size, color, radius, lineThrough, isDisabled, disableAnimation, isInvalid, groupState == null ? void 0 : groupState.value, groupState == null ? void 0 : groupState.isDisabled, groupState == null ? void 0 : groupState.isReadOnly, groupState == null ? void 0 : groupState.isInvalid, groupState == null ? void 0 : groupState.isSelected]);\n  const slots = useMemo(() => checkboxGroup({\n    isRequired,\n    isInvalid,\n    disableAnimation\n  }), [isRequired, isInvalid, disableAnimation]);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const getGroupProps = useCallback(() => {\n    return {\n      ref: domRef,\n      className: slots.base({\n        class: baseStyles\n      }),\n      ...mergeProps(groupProps, otherProps)\n    };\n  }, [slots, domRef, baseStyles, groupProps, otherProps]);\n  const getLabelProps = useCallback(() => {\n    return {\n      className: slots.label({\n        class: classNames == null ? void 0 : classNames.label\n      }),\n      ...labelProps\n    };\n  }, [slots, labelProps, classNames == null ? void 0 : classNames.label]);\n  const getWrapperProps = useCallback(() => {\n    return {\n      className: slots.wrapper({\n        class: classNames == null ? void 0 : classNames.wrapper\n      }),\n      role: \"presentation\",\n      \"data-orientation\": orientation\n    };\n  }, [slots, orientation, classNames == null ? void 0 : classNames.wrapper]);\n  const getDescriptionProps = useCallback((props2 = {}) => {\n    return {\n      ...props2,\n      ...descriptionProps,\n      className: slots.description({\n        class: clsx(classNames == null ? void 0 : classNames.description, props2 == null ? void 0 : props2.className)\n      })\n    };\n  }, [slots, descriptionProps, classNames == null ? void 0 : classNames.description]);\n  const getErrorMessageProps = useCallback((props2 = {}) => {\n    return {\n      ...props2,\n      ...errorMessageProps,\n      className: slots.errorMessage({\n        class: clsx(classNames == null ? void 0 : classNames.errorMessage, props2 == null ? void 0 : props2.className)\n      })\n    };\n  }, [slots, errorMessageProps, classNames == null ? void 0 : classNames.errorMessage]);\n  return {\n    Component,\n    children,\n    label,\n    context,\n    description,\n    errorMessage,\n    getGroupProps,\n    getLabelProps,\n    getWrapperProps,\n    getDescriptionProps,\n    getErrorMessageProps\n  };\n}\nexport { useCheckboxGroup };","map":{"version":3,"names":["useCallback","useMemo","mergeProps","checkboxGroup","useCheckboxGroup","useReactAriaCheckboxGroup","useCheckboxGroupState","useDOMRef","clsx","safeAriaLabel","props","as","ref","classNames","children","label","radius","value","name","defaultValue","size","color","orientation","lineThrough","isDisabled","disableAnimation","validationState","isInvalid","isReadOnly","isRequired","onValueChange","description","errorMessage","className","otherProps","Component","domRef","checkboxGroupProps","onChange","groupState","labelProps","groupProps","descriptionProps","errorMessageProps","context","isSelected","slots","baseStyles","base","getGroupProps","class","getLabelProps","getWrapperProps","wrapper","role","getDescriptionProps","props2","getErrorMessageProps"],"sources":["C:/Users/joelp/csc-307-achieveit/AchieveIt/node_modules/@nextui-org/checkbox/dist/chunk-TQULP5FO.mjs"],"sourcesContent":["\"use client\";\n\n// src/use-checkbox-group.ts\nimport { useCallback, useMemo } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { checkboxGroup } from \"@nextui-org/theme\";\nimport { useCheckboxGroup as useReactAriaCheckboxGroup } from \"@react-aria/checkbox\";\nimport { useCheckboxGroupState } from \"@react-stately/checkbox\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { clsx, safeAriaLabel } from \"@nextui-org/shared-utils\";\nfunction useCheckboxGroup(props) {\n  const {\n    as,\n    ref,\n    classNames,\n    children,\n    label,\n    radius,\n    value,\n    name,\n    defaultValue,\n    size = \"md\",\n    color = \"primary\",\n    orientation = \"vertical\",\n    lineThrough = false,\n    isDisabled = false,\n    disableAnimation = false,\n    validationState,\n    isInvalid = validationState === \"invalid\",\n    isReadOnly,\n    isRequired,\n    onValueChange,\n    description,\n    errorMessage,\n    className,\n    ...otherProps\n  } = props;\n  const Component = as || \"div\";\n  const domRef = useDOMRef(ref);\n  const checkboxGroupProps = useMemo(\n    () => ({\n      value,\n      name,\n      \"aria-label\": safeAriaLabel(otherProps[\"aria-label\"], label),\n      defaultValue,\n      isRequired,\n      isInvalid,\n      isReadOnly,\n      orientation,\n      onChange: onValueChange,\n      ...otherProps\n    }),\n    [\n      value,\n      name,\n      label,\n      defaultValue,\n      isRequired,\n      isReadOnly,\n      isInvalid,\n      orientation,\n      onValueChange,\n      otherProps[\"aria-label\"],\n      otherProps\n    ]\n  );\n  const groupState = useCheckboxGroupState(checkboxGroupProps);\n  const { labelProps, groupProps, descriptionProps, errorMessageProps } = useReactAriaCheckboxGroup(\n    checkboxGroupProps,\n    groupState\n  );\n  const context = useMemo(\n    () => ({\n      size,\n      color,\n      radius,\n      lineThrough,\n      isInvalid,\n      isDisabled,\n      disableAnimation,\n      groupState\n    }),\n    [\n      size,\n      color,\n      radius,\n      lineThrough,\n      isDisabled,\n      disableAnimation,\n      isInvalid,\n      groupState == null ? void 0 : groupState.value,\n      groupState == null ? void 0 : groupState.isDisabled,\n      groupState == null ? void 0 : groupState.isReadOnly,\n      groupState == null ? void 0 : groupState.isInvalid,\n      groupState == null ? void 0 : groupState.isSelected\n    ]\n  );\n  const slots = useMemo(\n    () => checkboxGroup({ isRequired, isInvalid, disableAnimation }),\n    [isRequired, isInvalid, disableAnimation]\n  );\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const getGroupProps = useCallback(() => {\n    return {\n      ref: domRef,\n      className: slots.base({ class: baseStyles }),\n      ...mergeProps(groupProps, otherProps)\n    };\n  }, [slots, domRef, baseStyles, groupProps, otherProps]);\n  const getLabelProps = useCallback(() => {\n    return {\n      className: slots.label({ class: classNames == null ? void 0 : classNames.label }),\n      ...labelProps\n    };\n  }, [slots, labelProps, classNames == null ? void 0 : classNames.label]);\n  const getWrapperProps = useCallback(() => {\n    return {\n      className: slots.wrapper({ class: classNames == null ? void 0 : classNames.wrapper }),\n      role: \"presentation\",\n      \"data-orientation\": orientation\n    };\n  }, [slots, orientation, classNames == null ? void 0 : classNames.wrapper]);\n  const getDescriptionProps = useCallback(\n    (props2 = {}) => {\n      return {\n        ...props2,\n        ...descriptionProps,\n        className: slots.description({ class: clsx(classNames == null ? void 0 : classNames.description, props2 == null ? void 0 : props2.className) })\n      };\n    },\n    [slots, descriptionProps, classNames == null ? void 0 : classNames.description]\n  );\n  const getErrorMessageProps = useCallback(\n    (props2 = {}) => {\n      return {\n        ...props2,\n        ...errorMessageProps,\n        className: slots.errorMessage({ class: clsx(classNames == null ? void 0 : classNames.errorMessage, props2 == null ? void 0 : props2.className) })\n      };\n    },\n    [slots, errorMessageProps, classNames == null ? void 0 : classNames.errorMessage]\n  );\n  return {\n    Component,\n    children,\n    label,\n    context,\n    description,\n    errorMessage,\n    getGroupProps,\n    getLabelProps,\n    getWrapperProps,\n    getDescriptionProps,\n    getErrorMessageProps\n  };\n}\n\nexport {\n  useCheckboxGroup\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}