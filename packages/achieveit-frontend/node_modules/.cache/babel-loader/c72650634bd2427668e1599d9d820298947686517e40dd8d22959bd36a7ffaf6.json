{"ast":null,"code":"\"use client\";\n\n// src/table-checkbox-cell.tsx\nimport { forwardRef } from \"@nextui-org/system\";\nimport { useDOMRef, filterDOMProps } from \"@nextui-org/react-utils\";\nimport { clsx, dataAttr } from \"@nextui-org/shared-utils\";\nimport { useTableCell, useTableSelectionCheckbox } from \"@react-aria/table\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { Checkbox } from \"@nextui-org/checkbox\";\nimport { VisuallyHidden } from \"@react-aria/visually-hidden\";\nimport { jsx } from \"react/jsx-runtime\";\nvar TableCheckboxCell = forwardRef((props, ref) => {\n  var _a, _b;\n  const {\n    as,\n    className,\n    node,\n    rowKey,\n    slots,\n    state,\n    color,\n    disableAnimation,\n    checkboxesProps,\n    selectionMode,\n    classNames,\n    ...otherProps\n  } = props;\n  const Component = as || \"td\";\n  const shouldFilterDOMProps = typeof Component === \"string\";\n  const domRef = useDOMRef(ref);\n  const {\n    gridCellProps\n  } = useTableCell({\n    node\n  }, state, domRef);\n  const {\n    isFocusVisible,\n    focusProps\n  } = useFocusRing();\n  const {\n    checkboxProps\n  } = useTableSelectionCheckbox({\n    key: (node == null ? void 0 : node.parentKey) || node.key\n  }, state);\n  const tdStyles = clsx(classNames == null ? void 0 : classNames.td, className, (_a = node.props) == null ? void 0 : _a.className);\n  const isSingleSelectionMode = selectionMode === \"single\";\n  const {\n    onChange,\n    ...otherCheckboxProps\n  } = checkboxProps;\n  const isRowSelected = state.selectionManager.isSelected(rowKey);\n  return /* @__PURE__ */jsx(Component, {\n    ref: domRef,\n    \"data-focus-visible\": dataAttr(isFocusVisible),\n    \"data-selected\": dataAttr(isRowSelected),\n    ...mergeProps(gridCellProps, focusProps, filterDOMProps(node.props, {\n      enabled: shouldFilterDOMProps\n    }), otherProps),\n    className: (_b = slots.td) == null ? void 0 : _b.call(slots, {\n      class: tdStyles\n    }),\n    children: isSingleSelectionMode ? /* @__PURE__ */jsx(VisuallyHidden, {\n      children: checkboxProps[\"aria-label\"]\n    }) : /* @__PURE__ */jsx(Checkbox, {\n      color,\n      disableAnimation,\n      onValueChange: onChange,\n      ...mergeProps(checkboxesProps, otherCheckboxProps)\n    })\n  });\n});\nTableCheckboxCell.displayName = \"NextUI.TableCheckboxCell\";\nvar table_checkbox_cell_default = TableCheckboxCell;\nexport { table_checkbox_cell_default };","map":{"version":3,"names":["forwardRef","useDOMRef","filterDOMProps","clsx","dataAttr","useTableCell","useTableSelectionCheckbox","mergeProps","useFocusRing","Checkbox","VisuallyHidden","jsx","TableCheckboxCell","props","ref","_a","_b","as","className","node","rowKey","slots","state","color","disableAnimation","checkboxesProps","selectionMode","classNames","otherProps","Component","shouldFilterDOMProps","domRef","gridCellProps","isFocusVisible","focusProps","checkboxProps","key","parentKey","tdStyles","td","isSingleSelectionMode","onChange","otherCheckboxProps","isRowSelected","selectionManager","isSelected","enabled","call","class","children","onValueChange","displayName","table_checkbox_cell_default"],"sources":["C:/Users/joelp/csc-307-achieveit/AchieveIt/node_modules/@nextui-org/table/dist/chunk-ZVKU2CIZ.mjs"],"sourcesContent":["\"use client\";\n\n// src/table-checkbox-cell.tsx\nimport { forwardRef } from \"@nextui-org/system\";\nimport { useDOMRef, filterDOMProps } from \"@nextui-org/react-utils\";\nimport { clsx, dataAttr } from \"@nextui-org/shared-utils\";\nimport { useTableCell, useTableSelectionCheckbox } from \"@react-aria/table\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { Checkbox } from \"@nextui-org/checkbox\";\nimport { VisuallyHidden } from \"@react-aria/visually-hidden\";\nimport { jsx } from \"react/jsx-runtime\";\nvar TableCheckboxCell = forwardRef((props, ref) => {\n  var _a, _b;\n  const {\n    as,\n    className,\n    node,\n    rowKey,\n    slots,\n    state,\n    color,\n    disableAnimation,\n    checkboxesProps,\n    selectionMode,\n    classNames,\n    ...otherProps\n  } = props;\n  const Component = as || \"td\";\n  const shouldFilterDOMProps = typeof Component === \"string\";\n  const domRef = useDOMRef(ref);\n  const { gridCellProps } = useTableCell({ node }, state, domRef);\n  const { isFocusVisible, focusProps } = useFocusRing();\n  const { checkboxProps } = useTableSelectionCheckbox({ key: (node == null ? void 0 : node.parentKey) || node.key }, state);\n  const tdStyles = clsx(classNames == null ? void 0 : classNames.td, className, (_a = node.props) == null ? void 0 : _a.className);\n  const isSingleSelectionMode = selectionMode === \"single\";\n  const { onChange, ...otherCheckboxProps } = checkboxProps;\n  const isRowSelected = state.selectionManager.isSelected(rowKey);\n  return /* @__PURE__ */ jsx(\n    Component,\n    {\n      ref: domRef,\n      \"data-focus-visible\": dataAttr(isFocusVisible),\n      \"data-selected\": dataAttr(isRowSelected),\n      ...mergeProps(\n        gridCellProps,\n        focusProps,\n        filterDOMProps(node.props, {\n          enabled: shouldFilterDOMProps\n        }),\n        otherProps\n      ),\n      className: (_b = slots.td) == null ? void 0 : _b.call(slots, { class: tdStyles }),\n      children: isSingleSelectionMode ? /* @__PURE__ */ jsx(VisuallyHidden, { children: checkboxProps[\"aria-label\"] }) : /* @__PURE__ */ jsx(\n        Checkbox,\n        {\n          color,\n          disableAnimation,\n          onValueChange: onChange,\n          ...mergeProps(checkboxesProps, otherCheckboxProps)\n        }\n      )\n    }\n  );\n});\nTableCheckboxCell.displayName = \"NextUI.TableCheckboxCell\";\nvar table_checkbox_cell_default = TableCheckboxCell;\n\nexport {\n  table_checkbox_cell_default\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}