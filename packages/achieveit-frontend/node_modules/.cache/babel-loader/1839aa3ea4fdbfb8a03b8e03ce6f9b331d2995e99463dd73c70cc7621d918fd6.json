{"ast":null,"code":"import { useState as $6imuh$useState, useRef as $6imuh$useRef, useEffect as $6imuh$useEffect, useCallback as $6imuh$useCallback } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\nfunction $458b0a5536c1a7cf$export$40bfa8c7b0832715(value, defaultValue, onChange) {\n  let [stateValue, setStateValue] = (0, $6imuh$useState)(value || defaultValue);\n  let isControlledRef = (0, $6imuh$useRef)(value !== undefined);\n  let isControlled = value !== undefined;\n  (0, $6imuh$useEffect)(() => {\n    let wasControlled = isControlledRef.current;\n    if (wasControlled !== isControlled) console.warn(`WARN: A component changed from ${wasControlled ? \"controlled\" : \"uncontrolled\"} to ${isControlled ? \"controlled\" : \"uncontrolled\"}.`);\n    isControlledRef.current = isControlled;\n  }, [isControlled]);\n  let currentValue = isControlled ? value : stateValue;\n  let setValue = (0, $6imuh$useCallback)((value, ...args) => {\n    let onChangeCaller = (value, ...onChangeArgs) => {\n      if (onChange) {\n        if (!Object.is(currentValue, value)) onChange(value, ...onChangeArgs);\n      }\n      if (!isControlled)\n        // If uncontrolled, mutate the currentValue local variable so that\n        // calling setState multiple times with the same value only emits onChange once.\n        // We do not use a ref for this because we specifically _do_ want the value to\n        // reset every render, and assigning to a ref in render breaks aborted suspended renders.\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        currentValue = value;\n    };\n    if (typeof value === \"function\") {\n      console.warn(\"We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320\");\n      // this supports functional updates https://reactjs.org/docs/hooks-reference.html#functional-updates\n      // when someone using useControlledState calls setControlledState(myFunc)\n      // this will call our useState setState with a function as well which invokes myFunc and calls onChange with the value from myFunc\n      // if we're in an uncontrolled state, then we also return the value of myFunc which to setState looks as though it was just called with myFunc from the beginning\n      // otherwise we just return the controlled value, which won't cause a rerender because React knows to bail out when the value is the same\n      let updateFunction = (oldValue, ...functionArgs) => {\n        let interceptedValue = value(isControlled ? currentValue : oldValue, ...functionArgs);\n        onChangeCaller(interceptedValue, ...args);\n        if (!isControlled) return interceptedValue;\n        return oldValue;\n      };\n      setStateValue(updateFunction);\n    } else {\n      if (!isControlled) setStateValue(value);\n      onChangeCaller(value, ...args);\n    }\n  }, [isControlled, currentValue, onChange]);\n  return [currentValue, setValue];\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /**\n    * Takes a value and forces it to the closest min/max if it's outside. Also forces it to the closest valid step.\n    */\nfunction $9446cca9a3875146$export$7d15b64cf5a3a4c4(value, min = -Infinity, max = Infinity) {\n  let newValue = Math.min(Math.max(value, min), max);\n  return newValue;\n}\nfunction $9446cca9a3875146$export$cb6e0bb50bc19463(value, min, max, step) {\n  min = Number(min);\n  max = Number(max);\n  let remainder = (value - (isNaN(min) ? 0 : min)) % step;\n  let snappedValue = Math.abs(remainder) * 2 >= step ? value + Math.sign(remainder) * (step - Math.abs(remainder)) : value - remainder;\n  if (!isNaN(min)) {\n    if (snappedValue < min) snappedValue = min;else if (!isNaN(max) && snappedValue > max) snappedValue = min + Math.floor((max - min) / step) * step;\n  } else if (!isNaN(max) && snappedValue > max) snappedValue = Math.floor(max / step) * step;\n  // correct floating point behavior by rounding to step precision\n  let string = step.toString();\n  let index = string.indexOf(\".\");\n  let precision = index >= 0 ? string.length - index : 0;\n  if (precision > 0) {\n    let pow = Math.pow(10, precision);\n    snappedValue = Math.round(snappedValue * pow) / pow;\n  }\n  return snappedValue;\n}\nfunction $9446cca9a3875146$export$b6268554fba451f(value, digits, base = 10) {\n  const pow = Math.pow(base, digits);\n  return Math.round(value * pow) / pow;\n}\nexport { $458b0a5536c1a7cf$export$40bfa8c7b0832715 as useControlledState, $9446cca9a3875146$export$7d15b64cf5a3a4c4 as clamp, $9446cca9a3875146$export$cb6e0bb50bc19463 as snapValueToStep, $9446cca9a3875146$export$b6268554fba451f as toFixedNumber };","map":{"version":3,"names":["$458b0a5536c1a7cf$export$40bfa8c7b0832715","value","defaultValue","onChange","stateValue","setStateValue","$6imuh$useState","isControlledRef","$6imuh$useRef","undefined","isControlled","$6imuh$useEffect","wasControlled","current","console","warn","currentValue","setValue","$6imuh$useCallback","args","onChangeCaller","onChangeArgs","Object","is","updateFunction","oldValue","functionArgs","interceptedValue","$9446cca9a3875146$export$7d15b64cf5a3a4c4","min","Infinity","max","newValue","Math","$9446cca9a3875146$export$cb6e0bb50bc19463","step","Number","remainder","isNaN","snappedValue","abs","sign","floor","string","toString","index","indexOf","precision","length","pow","round","$9446cca9a3875146$export$b6268554fba451f","digits","base"],"sources":["C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@react-stately\\utils\\dist\\packages\\@react-stately\\utils\\src\\index.ts","C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@react-stately\\utils\\dist\\packages\\@react-stately\\utils\\src\\useControlledState.ts","C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@react-stately\\utils\\dist\\packages\\@react-stately\\utils\\src\\number.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nexport {useControlledState} from './useControlledState';\nexport {clamp, snapValueToStep, toFixedNumber} from './number';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useCallback, useEffect, useRef, useState} from 'react';\n\nexport function useControlledState<T, C = T>(value: Exclude<T, undefined>, defaultValue: Exclude<T, undefined> | undefined, onChange?: (v: C, ...args: any[]) => void): [T, (value: T) => void];\nexport function useControlledState<T, C = T>(value: Exclude<T, undefined> | undefined, defaultValue: Exclude<T, undefined>, onChange?: (v: C, ...args: any[]) => void): [T, (value: T) => void];\nexport function useControlledState<T, C = T>(value: T, defaultValue: T, onChange?: (v: C, ...args: any[]) => void): [T, (value: T) => void] {\n  let [stateValue, setStateValue] = useState(value || defaultValue);\n\n  let isControlledRef = useRef(value !== undefined);\n  let isControlled = value !== undefined;\n  useEffect(() => {\n    let wasControlled = isControlledRef.current;\n    if (wasControlled !== isControlled) {\n      console.warn(`WARN: A component changed from ${wasControlled ? 'controlled' : 'uncontrolled'} to ${isControlled ? 'controlled' : 'uncontrolled'}.`);\n    }\n    isControlledRef.current = isControlled;\n  }, [isControlled]);\n\n  let currentValue = isControlled ? value : stateValue;\n  let setValue = useCallback((value, ...args) => {\n    let onChangeCaller = (value, ...onChangeArgs) => {\n      if (onChange) {\n        if (!Object.is(currentValue, value)) {\n          onChange(value, ...onChangeArgs);\n        }\n      }\n      if (!isControlled) {\n        // If uncontrolled, mutate the currentValue local variable so that\n        // calling setState multiple times with the same value only emits onChange once.\n        // We do not use a ref for this because we specifically _do_ want the value to\n        // reset every render, and assigning to a ref in render breaks aborted suspended renders.\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        currentValue = value;\n      }\n    };\n\n    if (typeof value === 'function') {\n      console.warn('We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320');\n      // this supports functional updates https://reactjs.org/docs/hooks-reference.html#functional-updates\n      // when someone using useControlledState calls setControlledState(myFunc)\n      // this will call our useState setState with a function as well which invokes myFunc and calls onChange with the value from myFunc\n      // if we're in an uncontrolled state, then we also return the value of myFunc which to setState looks as though it was just called with myFunc from the beginning\n      // otherwise we just return the controlled value, which won't cause a rerender because React knows to bail out when the value is the same\n      let updateFunction = (oldValue, ...functionArgs) => {\n        let interceptedValue = value(isControlled ? currentValue : oldValue, ...functionArgs);\n        onChangeCaller(interceptedValue, ...args);\n        if (!isControlled) {\n          return interceptedValue;\n        }\n        return oldValue;\n      };\n      setStateValue(updateFunction);\n    } else {\n      if (!isControlled) {\n        setStateValue(value);\n      }\n      onChangeCaller(value, ...args);\n    }\n  }, [isControlled, currentValue, onChange]);\n\n  return [currentValue, setValue];\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/**\n * Takes a value and forces it to the closest min/max if it's outside. Also forces it to the closest valid step.\n */\nexport function clamp(value: number, min: number = -Infinity, max: number = Infinity): number {\n  let newValue = Math.min(Math.max(value, min), max);\n  return newValue;\n}\n\nexport function snapValueToStep(value: number, min: number | undefined, max: number | undefined, step: number): number {\n  min = Number(min);\n  max = Number(max);\n  let remainder = ((value - (isNaN(min) ? 0 : min)) % step);\n  let snappedValue = Math.abs(remainder) * 2 >= step\n    ? value + Math.sign(remainder) * (step - Math.abs(remainder))\n    : value - remainder;\n\n  if (!isNaN(min)) {\n    if (snappedValue < min) {\n      snappedValue = min;\n    } else if (!isNaN(max) && snappedValue > max) {\n      snappedValue = min + Math.floor((max - min) / step) * step;\n    }\n  } else if (!isNaN(max) && snappedValue > max) {\n    snappedValue = Math.floor(max / step) * step;\n  }\n\n  // correct floating point behavior by rounding to step precision\n  let string = step.toString();\n  let index = string.indexOf('.');\n  let precision = index >= 0 ? string.length - index : 0;\n\n  if (precision > 0) {\n    let pow = Math.pow(10, precision);\n    snappedValue = Math.round(snappedValue * pow) / pow;\n  }\n\n  return snappedValue;\n}\n\n/* Takes a value and rounds off to the number of digits. */\nexport function toFixedNumber(value: number, digits: number, base: number = 10): number {\n  const pow = Math.pow(base, digits);\n\n  return Math.round(value * pow) / pow;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}