{"ast":null,"code":"\"use client\";\n\n// src/use-chip.ts\nimport { mapPropsVariants } from \"@nextui-org/system\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { usePress } from \"@nextui-org/use-aria-press\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { chip } from \"@nextui-org/theme\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { clsx } from \"@nextui-org/shared-utils\";\nimport { useMemo, isValidElement, cloneElement } from \"react\";\nfunction useChip(originalProps) {\n  const [props, variantProps] = mapPropsVariants(originalProps, chip.variantKeys);\n  const {\n    ref,\n    as,\n    children,\n    avatar,\n    startContent,\n    endContent,\n    onClose,\n    classNames,\n    className,\n    ...otherProps\n  } = props;\n  const Component = as || \"div\";\n  const domRef = useDOMRef(ref);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const isCloseable = !!onClose;\n  const isDotVariant = originalProps.variant === \"dot\";\n  const {\n    focusProps: closeFocusProps,\n    isFocusVisible: isCloseButtonFocusVisible\n  } = useFocusRing();\n  const isOneChar = useMemo(() => typeof children === \"string\" && (children == null ? void 0 : children.length) === 1, [children]);\n  const hasStartContent = useMemo(() => !!avatar || !!startContent, [avatar, startContent]);\n  const hasEndContent = useMemo(() => !!endContent || isCloseable, [endContent, isCloseable]);\n  const slots = useMemo(() => chip({\n    ...variantProps,\n    hasStartContent,\n    hasEndContent,\n    isOneChar,\n    isCloseable,\n    isCloseButtonFocusVisible\n  }), [...Object.values(variantProps), isCloseButtonFocusVisible, hasStartContent, hasEndContent, isOneChar, isCloseable]);\n  const {\n    pressProps: closePressProps\n  } = usePress({\n    isDisabled: !!(originalProps == null ? void 0 : originalProps.isDisabled),\n    onPress: onClose\n  });\n  const getChipProps = () => {\n    return {\n      ref: domRef,\n      className: slots.base({\n        class: baseStyles\n      }),\n      ...otherProps\n    };\n  };\n  const getCloseButtonProps = () => {\n    return {\n      role: \"button\",\n      tabIndex: 0,\n      className: slots.closeButton({\n        class: classNames == null ? void 0 : classNames.closeButton\n      }),\n      ...mergeProps(closePressProps, closeFocusProps)\n    };\n  };\n  const getAvatarClone = avatar2 => {\n    if (!isValidElement(avatar2)) return null;\n    return cloneElement(avatar2, {\n      className: slots.avatar({\n        class: classNames == null ? void 0 : classNames.avatar\n      })\n    });\n  };\n  const getContentClone = content => isValidElement(content) ? cloneElement(content, {\n    className: clsx(\"max-h-[80%]\", content.props.className)\n  }) : null;\n  return {\n    Component,\n    children,\n    slots,\n    classNames,\n    isDot: isDotVariant,\n    isCloseable,\n    startContent: getAvatarClone(avatar) || getContentClone(startContent),\n    endContent: getContentClone(endContent),\n    getCloseButtonProps,\n    getChipProps\n  };\n}\nexport { useChip };","map":{"version":3,"names":["mapPropsVariants","mergeProps","usePress","useFocusRing","chip","useDOMRef","clsx","useMemo","isValidElement","cloneElement","useChip","originalProps","props","variantProps","variantKeys","ref","as","children","avatar","startContent","endContent","onClose","classNames","className","otherProps","Component","domRef","baseStyles","base","isCloseable","isDotVariant","variant","focusProps","closeFocusProps","isFocusVisible","isCloseButtonFocusVisible","isOneChar","length","hasStartContent","hasEndContent","slots","Object","values","pressProps","closePressProps","isDisabled","onPress","getChipProps","class","getCloseButtonProps","role","tabIndex","closeButton","getAvatarClone","avatar2","getContentClone","content","isDot"],"sources":["C:/Users/joelp/csc-307-achieveit/AchieveIt/node_modules/@nextui-org/chip/dist/chunk-ECKJU7BV.mjs"],"sourcesContent":["\"use client\";\n\n// src/use-chip.ts\nimport { mapPropsVariants } from \"@nextui-org/system\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { usePress } from \"@nextui-org/use-aria-press\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { chip } from \"@nextui-org/theme\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { clsx } from \"@nextui-org/shared-utils\";\nimport { useMemo, isValidElement, cloneElement } from \"react\";\nfunction useChip(originalProps) {\n  const [props, variantProps] = mapPropsVariants(originalProps, chip.variantKeys);\n  const {\n    ref,\n    as,\n    children,\n    avatar,\n    startContent,\n    endContent,\n    onClose,\n    classNames,\n    className,\n    ...otherProps\n  } = props;\n  const Component = as || \"div\";\n  const domRef = useDOMRef(ref);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const isCloseable = !!onClose;\n  const isDotVariant = originalProps.variant === \"dot\";\n  const { focusProps: closeFocusProps, isFocusVisible: isCloseButtonFocusVisible } = useFocusRing();\n  const isOneChar = useMemo(\n    () => typeof children === \"string\" && (children == null ? void 0 : children.length) === 1,\n    [children]\n  );\n  const hasStartContent = useMemo(() => !!avatar || !!startContent, [avatar, startContent]);\n  const hasEndContent = useMemo(() => !!endContent || isCloseable, [endContent, isCloseable]);\n  const slots = useMemo(\n    () => chip({\n      ...variantProps,\n      hasStartContent,\n      hasEndContent,\n      isOneChar,\n      isCloseable,\n      isCloseButtonFocusVisible\n    }),\n    [\n      ...Object.values(variantProps),\n      isCloseButtonFocusVisible,\n      hasStartContent,\n      hasEndContent,\n      isOneChar,\n      isCloseable\n    ]\n  );\n  const { pressProps: closePressProps } = usePress({\n    isDisabled: !!(originalProps == null ? void 0 : originalProps.isDisabled),\n    onPress: onClose\n  });\n  const getChipProps = () => {\n    return {\n      ref: domRef,\n      className: slots.base({ class: baseStyles }),\n      ...otherProps\n    };\n  };\n  const getCloseButtonProps = () => {\n    return {\n      role: \"button\",\n      tabIndex: 0,\n      className: slots.closeButton({ class: classNames == null ? void 0 : classNames.closeButton }),\n      ...mergeProps(closePressProps, closeFocusProps)\n    };\n  };\n  const getAvatarClone = (avatar2) => {\n    if (!isValidElement(avatar2))\n      return null;\n    return cloneElement(avatar2, {\n      className: slots.avatar({ class: classNames == null ? void 0 : classNames.avatar })\n    });\n  };\n  const getContentClone = (content) => isValidElement(content) ? cloneElement(content, {\n    className: clsx(\"max-h-[80%]\", content.props.className)\n  }) : null;\n  return {\n    Component,\n    children,\n    slots,\n    classNames,\n    isDot: isDotVariant,\n    isCloseable,\n    startContent: getAvatarClone(avatar) || getContentClone(startContent),\n    endContent: getContentClone(endContent),\n    getCloseButtonProps,\n    getChipProps\n  };\n}\n\nexport {\n  useChip\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}