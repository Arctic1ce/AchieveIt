{"ast":null,"code":"import { useSlotId as $m1DSs$useSlotId, filterDOMProps as $m1DSs$filterDOMProps } from \"@react-aria/utils\";\nimport { focusSafely as $m1DSs$focusSafely } from \"@react-aria/focus\";\nimport { useRef as $m1DSs$useRef, useEffect as $m1DSs$useEffect } from \"react\";\nimport { useOverlayFocusContain as $m1DSs$useOverlayFocusContain } from \"@react-aria/overlays\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n\nfunction $40df3f8667284809$export$d55e7ee900f34e93(props, ref) {\n  let {\n    role = \"dialog\"\n  } = props;\n  let titleId = (0, $m1DSs$useSlotId)();\n  titleId = props[\"aria-label\"] ? undefined : titleId;\n  let isRefocusing = (0, $m1DSs$useRef)(false);\n  // Focus the dialog itself on mount, unless a child element is already focused.\n  (0, $m1DSs$useEffect)(() => {\n    if (ref.current && !ref.current.contains(document.activeElement)) {\n      (0, $m1DSs$focusSafely)(ref.current);\n      // Safari on iOS does not move the VoiceOver cursor to the dialog\n      // or announce that it has opened until it has rendered. A workaround\n      // is to wait for half a second, then blur and re-focus the dialog.\n      let timeout = setTimeout(() => {\n        if (document.activeElement === ref.current) {\n          isRefocusing.current = true;\n          ref.current.blur();\n          (0, $m1DSs$focusSafely)(ref.current);\n          isRefocusing.current = false;\n        }\n      }, 500);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [ref]);\n  (0, $m1DSs$useOverlayFocusContain)();\n  // We do not use aria-modal due to a Safari bug which forces the first focusable element to be focused\n  // on mount when inside an iframe, no matter which element we programmatically focus.\n  // See https://bugs.webkit.org/show_bug.cgi?id=211934.\n  // useModal sets aria-hidden on all elements outside the dialog, so the dialog will behave as a modal\n  // even without aria-modal on the dialog itself.\n  return {\n    dialogProps: {\n      ...(0, $m1DSs$filterDOMProps)(props, {\n        labelable: true\n      }),\n      role: role,\n      tabIndex: -1,\n      \"aria-labelledby\": props[\"aria-labelledby\"] || titleId,\n      // Prevent blur events from reaching useOverlay, which may cause\n      // popovers to close. Since focus is contained within the dialog,\n      // we don't want this to occur due to the above useEffect.\n      onBlur: e => {\n        if (isRefocusing.current) e.stopPropagation();\n      }\n    },\n    titleProps: {\n      id: titleId\n    }\n  };\n}\nexport { $40df3f8667284809$export$d55e7ee900f34e93 as useDialog };","map":{"version":3,"names":["$40df3f8667284809$export$d55e7ee900f34e93","props","ref","role","titleId","$m1DSs$useSlotId","undefined","isRefocusing","$m1DSs$useRef","$m1DSs$useEffect","current","contains","document","activeElement","$m1DSs$focusSafely","timeout","setTimeout","blur","clearTimeout","$m1DSs$useOverlayFocusContain","dialogProps","$m1DSs$filterDOMProps","labelable","tabIndex","onBlur","e","stopPropagation","titleProps","id"],"sources":["C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@react-aria\\dialog\\dist\\packages\\@react-aria\\dialog\\src\\index.ts","C:\\Users\\joelp\\csc-307-achieveit\\AchieveIt\\node_modules\\@react-aria\\dialog\\dist\\packages\\@react-aria\\dialog\\src\\useDialog.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nexport {useDialog} from './useDialog';\nexport type {AriaDialogProps} from '@react-types/dialog';\nexport type {DialogAria} from './useDialog';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaDialogProps} from '@react-types/dialog';\nimport {DOMAttributes, FocusableElement} from '@react-types/shared';\nimport {filterDOMProps, useSlotId} from '@react-aria/utils';\nimport {focusSafely} from '@react-aria/focus';\nimport {RefObject, useEffect, useRef} from 'react';\nimport {useOverlayFocusContain} from '@react-aria/overlays';\n\nexport interface DialogAria {\n  /** Props for the dialog container element. */\n  dialogProps: DOMAttributes,\n\n  /** Props for the dialog title element. */\n  titleProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a dialog component.\n * A dialog is an overlay shown above other content in an application.\n */\nexport function useDialog(props: AriaDialogProps, ref: RefObject<FocusableElement>): DialogAria {\n  let {role = 'dialog'} = props;\n  let titleId = useSlotId();\n  titleId = props['aria-label'] ? undefined : titleId;\n\n  let isRefocusing = useRef(false);\n\n  // Focus the dialog itself on mount, unless a child element is already focused.\n  useEffect(() => {\n    if (ref.current && !ref.current.contains(document.activeElement)) {\n      focusSafely(ref.current);\n\n      // Safari on iOS does not move the VoiceOver cursor to the dialog\n      // or announce that it has opened until it has rendered. A workaround\n      // is to wait for half a second, then blur and re-focus the dialog.\n      let timeout = setTimeout(() => {\n        if (document.activeElement === ref.current) {\n          isRefocusing.current = true;\n          ref.current.blur();\n          focusSafely(ref.current);\n          isRefocusing.current = false;\n        }\n      }, 500);\n\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [ref]);\n\n  useOverlayFocusContain();\n\n  // We do not use aria-modal due to a Safari bug which forces the first focusable element to be focused\n  // on mount when inside an iframe, no matter which element we programmatically focus.\n  // See https://bugs.webkit.org/show_bug.cgi?id=211934.\n  // useModal sets aria-hidden on all elements outside the dialog, so the dialog will behave as a modal\n  // even without aria-modal on the dialog itself.\n  return {\n    dialogProps: {\n      ...filterDOMProps(props, {labelable: true}),\n      role,\n      tabIndex: -1,\n      'aria-labelledby': props['aria-labelledby'] || titleId,\n      // Prevent blur events from reaching useOverlay, which may cause\n      // popovers to close. Since focus is contained within the dialog,\n      // we don't want this to occur due to the above useEffect.\n      onBlur: e => {\n        if (isRefocusing.current) {\n          e.stopPropagation();\n        }\n      }\n    },\n    titleProps: {\n      id: titleId\n    }\n  };\n}\n"],"mappings":";;;;;AAAA;;;;;;;;;;ACAA,GDAA,CCAA;;;;;;;;;;;;AA+BO,SAASA,0CAAUC,KAAsB,EAAEC,GAAgC;EAChF,IAAI;IAACC,IAAA,GAAO;EAAA,CAAS,GAAGF,KAAA;EACxB,IAAIG,OAAA,GAAU,IAAAC,gBAAQ;EACtBD,OAAA,GAAUH,KAAK,CAAC,aAAa,GAAGK,SAAA,GAAYF,OAAA;EAE5C,IAAIG,YAAA,GAAe,IAAAC,aAAK,EAAE;EAE1B;EACA,IAAAC,gBAAQ,EAAE;IACR,IAAIP,GAAA,CAAIQ,OAAO,IAAI,CAACR,GAAA,CAAIQ,OAAO,CAACC,QAAQ,CAACC,QAAA,CAASC,aAAa,GAAG;MAChE,IAAAC,kBAAU,EAAEZ,GAAA,CAAIQ,OAAO;MAEvB;MACA;MACA;MACA,IAAIK,OAAA,GAAUC,UAAA,CAAW;QACvB,IAAIJ,QAAA,CAASC,aAAa,KAAKX,GAAA,CAAIQ,OAAO,EAAE;UAC1CH,YAAA,CAAaG,OAAO,GAAG;UACvBR,GAAA,CAAIQ,OAAO,CAACO,IAAI;UAChB,IAAAH,kBAAU,EAAEZ,GAAA,CAAIQ,OAAO;UACvBH,YAAA,CAAaG,OAAO,GAAG;QACzB;MACF,GAAG;MAEH,OAAO;QACLQ,YAAA,CAAaH,OAAA;MACf;IACF;EACF,GAAG,CAACb,GAAA,CAAI;EAER,IAAAiB,6BAAqB;EAErB;EACA;EACA;EACA;EACA;EACA,OAAO;IACLC,WAAA,EAAa;MACX,GAAG,IAAAC,qBAAa,EAAEpB,KAAA,EAAO;QAACqB,SAAA,EAAW;MAAI,EAAE;YAC3CnB,IAAA;MACAoB,QAAA,EAAU;MACV,mBAAmBtB,KAAK,CAAC,kBAAkB,IAAIG,OAAA;MAC/C;MACA;MACA;MACAoB,MAAA,EAAQC,CAAA;QACN,IAAIlB,YAAA,CAAaG,OAAO,EACtBe,CAAA,CAAEC,eAAe;MAErB;IACF;IACAC,UAAA,EAAY;MACVC,EAAA,EAAIxB;IACN;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}