{"ast":null,"code":"\"use client\";\n\n// src/use-listbox.ts\nimport { useListBox as useAriaListbox } from \"@react-aria/listbox\";\nimport { listbox } from \"@nextui-org/theme\";\nimport { useListState } from \"@react-stately/list\";\nimport { filterDOMProps, useDOMRef } from \"@nextui-org/react-utils\";\nimport { useMemo } from \"react\";\nimport { clsx } from \"@nextui-org/shared-utils\";\nfunction useListbox(props) {\n  const {\n    ref,\n    as,\n    state: propState,\n    variant,\n    color,\n    onAction,\n    children,\n    onSelectionChange,\n    disableAnimation,\n    itemClasses,\n    className,\n    topContent,\n    bottomContent,\n    emptyContent = \"No items.\",\n    hideSelectedIcon = false,\n    hideEmptyContent = false,\n    shouldHighlightOnFocus = false,\n    classNames,\n    ...otherProps\n  } = props;\n  const Component = as || \"ul\";\n  const shouldFilterDOMProps = typeof Component === \"string\";\n  const domRef = useDOMRef(ref);\n  const innerState = useListState({\n    ...props,\n    children,\n    onSelectionChange\n  });\n  const state = propState || innerState;\n  const {\n    listBoxProps\n  } = useAriaListbox({\n    ...props,\n    onAction\n  }, state, domRef);\n  const slots = useMemo(() => listbox({\n    className\n  }), [, className]);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const getBaseProps = (props2 = {}) => {\n    return {\n      ref: domRef,\n      \"data-slot\": \"base\",\n      className: slots.base({\n        class: baseStyles\n      }),\n      ...filterDOMProps(otherProps, {\n        enabled: shouldFilterDOMProps\n      }),\n      ...props2\n    };\n  };\n  const getListProps = (props2 = {}) => {\n    return {\n      \"data-slot\": \"list\",\n      className: slots.list({\n        class: classNames == null ? void 0 : classNames.list\n      }),\n      ...listBoxProps,\n      ...props2\n    };\n  };\n  const getEmptyContentProps = (props2 = {}) => {\n    return {\n      \"data-slot\": \"empty-content\",\n      children: emptyContent,\n      className: slots.emptyContent({\n        class: classNames == null ? void 0 : classNames.emptyContent\n      }),\n      ...props2\n    };\n  };\n  return {\n    Component,\n    state,\n    variant,\n    color,\n    slots,\n    classNames,\n    topContent,\n    bottomContent,\n    emptyContent,\n    hideEmptyContent,\n    shouldHighlightOnFocus,\n    hideSelectedIcon,\n    disableAnimation,\n    className,\n    itemClasses,\n    getBaseProps,\n    getListProps,\n    getEmptyContentProps\n  };\n}\nexport { useListbox };","map":{"version":3,"names":["useListBox","useAriaListbox","listbox","useListState","filterDOMProps","useDOMRef","useMemo","clsx","useListbox","props","ref","as","state","propState","variant","color","onAction","children","onSelectionChange","disableAnimation","itemClasses","className","topContent","bottomContent","emptyContent","hideSelectedIcon","hideEmptyContent","shouldHighlightOnFocus","classNames","otherProps","Component","shouldFilterDOMProps","domRef","innerState","listBoxProps","slots","baseStyles","base","getBaseProps","props2","class","enabled","getListProps","list","getEmptyContentProps"],"sources":["C:/Users/joelp/csc-307-achieveit/AchieveIt/node_modules/@nextui-org/listbox/dist/chunk-P7Z6AEJN.mjs"],"sourcesContent":["\"use client\";\n\n// src/use-listbox.ts\nimport { useListBox as useAriaListbox } from \"@react-aria/listbox\";\nimport { listbox } from \"@nextui-org/theme\";\nimport { useListState } from \"@react-stately/list\";\nimport { filterDOMProps, useDOMRef } from \"@nextui-org/react-utils\";\nimport { useMemo } from \"react\";\nimport { clsx } from \"@nextui-org/shared-utils\";\nfunction useListbox(props) {\n  const {\n    ref,\n    as,\n    state: propState,\n    variant,\n    color,\n    onAction,\n    children,\n    onSelectionChange,\n    disableAnimation,\n    itemClasses,\n    className,\n    topContent,\n    bottomContent,\n    emptyContent = \"No items.\",\n    hideSelectedIcon = false,\n    hideEmptyContent = false,\n    shouldHighlightOnFocus = false,\n    classNames,\n    ...otherProps\n  } = props;\n  const Component = as || \"ul\";\n  const shouldFilterDOMProps = typeof Component === \"string\";\n  const domRef = useDOMRef(ref);\n  const innerState = useListState({ ...props, children, onSelectionChange });\n  const state = propState || innerState;\n  const { listBoxProps } = useAriaListbox({ ...props, onAction }, state, domRef);\n  const slots = useMemo(() => listbox({ className }), [, className]);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const getBaseProps = (props2 = {}) => {\n    return {\n      ref: domRef,\n      \"data-slot\": \"base\",\n      className: slots.base({ class: baseStyles }),\n      ...filterDOMProps(otherProps, {\n        enabled: shouldFilterDOMProps\n      }),\n      ...props2\n    };\n  };\n  const getListProps = (props2 = {}) => {\n    return {\n      \"data-slot\": \"list\",\n      className: slots.list({ class: classNames == null ? void 0 : classNames.list }),\n      ...listBoxProps,\n      ...props2\n    };\n  };\n  const getEmptyContentProps = (props2 = {}) => {\n    return {\n      \"data-slot\": \"empty-content\",\n      children: emptyContent,\n      className: slots.emptyContent({ class: classNames == null ? void 0 : classNames.emptyContent }),\n      ...props2\n    };\n  };\n  return {\n    Component,\n    state,\n    variant,\n    color,\n    slots,\n    classNames,\n    topContent,\n    bottomContent,\n    emptyContent,\n    hideEmptyContent,\n    shouldHighlightOnFocus,\n    hideSelectedIcon,\n    disableAnimation,\n    className,\n    itemClasses,\n    getBaseProps,\n    getListProps,\n    getEmptyContentProps\n  };\n}\n\nexport {\n  useListbox\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}