[{"/Users/adavari/git/AchieveIt/packages/achieveit-frontend/src/index.js":"1","/Users/adavari/git/AchieveIt/packages/achieveit-frontend/src/AchieveIt.js":"2","/Users/adavari/git/AchieveIt/packages/achieveit-frontend/src/Navbar.js":"3","/Users/adavari/git/AchieveIt/packages/achieveit-frontend/src/Login.js":"4","/Users/adavari/git/AchieveIt/packages/achieveit-frontend/src/Signup.js":"5","/Users/adavari/git/AchieveIt/packages/achieveit-frontend/src/TaskList.js":"6","/Users/adavari/git/AchieveIt/packages/achieveit-frontend/src/ListTable.js":"7","/Users/adavari/git/AchieveIt/packages/achieveit-frontend/src/NewItem.js":"8"},{"size":308,"mtime":1701283255062,"results":"9","hashOfConfig":"10"},{"size":6263,"mtime":1701358578753,"results":"11","hashOfConfig":"10"},{"size":1668,"mtime":1701283255061,"results":"12","hashOfConfig":"10"},{"size":2908,"mtime":1701283255061,"results":"13","hashOfConfig":"10"},{"size":4190,"mtime":1701358578753,"results":"14","hashOfConfig":"10"},{"size":3045,"mtime":1701283255062,"results":"15","hashOfConfig":"10"},{"size":2775,"mtime":1701283255060,"results":"16","hashOfConfig":"10"},{"size":5691,"mtime":1701283255061,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xyhxpo",{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/adavari/git/AchieveIt/packages/achieveit-frontend/src/index.js",[],"/Users/adavari/git/AchieveIt/packages/achieveit-frontend/src/AchieveIt.js",[],"/Users/adavari/git/AchieveIt/packages/achieveit-frontend/src/Navbar.js",[],"/Users/adavari/git/AchieveIt/packages/achieveit-frontend/src/Login.js",[],"/Users/adavari/git/AchieveIt/packages/achieveit-frontend/src/Signup.js",["35","36"],"import React, {useState} from 'react';\nimport {authenticateUser} from \"achieveit-backend/auth\";\nfunction Signup() {\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n  });\n\n  const [formErrors, setFormErrors] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n  });\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n    setFormErrors({\n      ...formErrors,\n      [name]: value ? '' : `Please enter your ${name.toLowerCase()}`,\n    });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // Check for empty fields\n    const errors = {};\n    for (const key in formData) {\n      if (!formData[key]) {\n        errors[key] = `Please enter your ${key.toLowerCase()}`;\n      }\n    }\n\n    // Update formErrors state\n    setFormErrors(errors);\n\n    // If there are no errors, proceed with form submission\n    if (Object.keys(errors).length === 0) {\n      // Perform form submission logic here\n      try {\n        console.log(formData);\n        // POST to backend\n        const requestOptions = {\n          method: 'POST',\n          headers: {'Content-Type': 'application/json'},\n          body: JSON.stringify(formData)\n        };\n        // fetch('http://localhost:8080/signup', requestOptions)\n      } catch (error) {\n        console.error(error);\n      }\n      console.log('Signed up user:', formData);\n    }\n  };\n\n  return (\n    <div className=\"d-flex align-items-center justify-content-center\" style={{ height: '100vh' }}>\n      <div className=\"card\" style={{ width: '400px' }}>\n        <form className=\"card-body\" onSubmit={handleSubmit}>\n          <h3 className=\"text-center mb-4\">Sign Up</h3>\n\n          <div className=\"mb-3\">\n            <label className=\"form-label\">First name</label>\n            <input\n              type=\"text\"\n              className={`form-control ${formErrors.firstName ? 'is-invalid' : ''}`}\n              placeholder=\"First name\"\n              name=\"firstName\"\n              value={formData.firstName}\n              onChange={handleInputChange}\n            />\n            {formErrors.firstName && <div className=\"invalid-feedback\">{formErrors.firstName}</div>}\n          </div>\n\n          <div className=\"mb-3\">\n            <label className=\"form-label\">Last name</label>\n            <input\n              type=\"text\"\n              className={`form-control ${formErrors.lastName ? 'is-invalid' : ''}`}\n              placeholder=\"Last name\"\n              name=\"lastName\"\n              value={formData.lastName}\n              onChange={handleInputChange}\n            />\n            {formErrors.lastName && <div className=\"invalid-feedback\">{formErrors.lastName}</div>}\n          </div>\n\n          <div className=\"mb-3\">\n            <label className=\"form-label\">Email address</label>\n            <input\n              type=\"email\"\n              className={`form-control ${formErrors.email ? 'is-invalid' : ''}`}\n              placeholder=\"Enter email\"\n              name=\"email\"\n              value={formData.email}\n              onChange={handleInputChange}\n            />\n            {formErrors.email && <div className=\"invalid-feedback\">{formErrors.email}</div>}\n          </div>\n\n          <div className=\"mb-3\">\n            <label className=\"form-label\">Password</label>\n            <input\n              type=\"password\"\n              className={`form-control ${formErrors.password ? 'is-invalid' : ''}`}\n              placeholder=\"Enter password\"\n              name=\"password\"\n              value={formData.password}\n              onChange={handleInputChange}\n            />\n            {formErrors.password && <div className=\"invalid-feedback\">{formErrors.password}</div>}\n          </div>\n\n          <div className=\"d-grid\">\n            <button type=\"submit\" className=\"btn btn-primary\">\n              Sign Up\n            </button>\n          </div>\n\n          <p className=\"forgot-password text-center mt-3\">\n            Already registered? <a href=\"/Login\">Sign in</a>\n          </p>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default Signup;\n","/Users/adavari/git/AchieveIt/packages/achieveit-frontend/src/TaskList.js",[],"/Users/adavari/git/AchieveIt/packages/achieveit-frontend/src/ListTable.js",[],"/Users/adavari/git/AchieveIt/packages/achieveit-frontend/src/NewItem.js",[],{"ruleId":"37","severity":1,"message":"38","line":2,"column":9,"nodeType":"39","messageId":"40","endLine":2,"endColumn":25},{"ruleId":"37","severity":1,"message":"41","line":50,"column":15,"nodeType":"39","messageId":"40","endLine":50,"endColumn":29},"no-unused-vars","'authenticateUser' is defined but never used.","Identifier","unusedVar","'requestOptions' is assigned a value but never used."]